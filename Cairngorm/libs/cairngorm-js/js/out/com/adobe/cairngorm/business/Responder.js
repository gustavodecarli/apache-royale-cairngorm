/**
 * Generated by Apache Royale Compiler from com/adobe/cairngorm/business/Responder.as
 * com.adobe.cairngorm.business.Responder
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('com.adobe.cairngorm.business.Responder');



/**
 * @interface
 */
com.adobe.cairngorm.business.Responder = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('com.adobe.cairngorm.business.Responder', com.adobe.cairngorm.business.Responder);
/**
 * The onResult method interface is used to mark the method on a
 * concrete Responder that will handle the results from a successful
 * call to a server-side service.  The actual data returned will be
 * held in the event.
 *
 * @asparam event An object containing the data passed back from the
 * service call, it is recommended that this be immediately narrowed
 * within the concrete responder by using an appropriate cast.  For
 * instance, if you invoke a Java method that returns an AccountVO
 * value object, cast event.result to an AccountVO as follows:
 * <p>
 * <code> var customerAccount:AccountVO = AccountVO( event.result );</code>
 * </p>
 * <p>
 * It is considered good practice when building applications with the
 * Cairngorm framework, to indicate the return types from the server
 * by appropriate casting.
 * </p>
 *
 * <p>
 * Java Developers should take care not to use
 * the Java casting notation - a common mistake for RIA developers
 * migrating from J2EE development.
 * </p>
 * @export
 * @param {*=} event
 */
com.adobe.cairngorm.business.Responder.prototype.onResult = function(event) {
};
/**
 * The onFault method interface is used to mark the method on a
 * concrete Responder that will handle the information from a failed
 * call to a server-side service.  The actual data returned will be
 * held in the event.
 *
 * @asparam event An object containing the data passed back from the
 * service call
 * @export
 * @param {*=} event
 */
com.adobe.cairngorm.business.Responder.prototype.onFault = function(event) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.adobe.cairngorm.business.Responder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Responder', qName: 'com.adobe.cairngorm.business.Responder', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.adobe.cairngorm.business.Responder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'onResult': { type: 'void', declaredBy: 'com.adobe.cairngorm.business.Responder', parameters: function () { return [ '*', true ]; }},
        'onFault': { type: 'void', declaredBy: 'com.adobe.cairngorm.business.Responder', parameters: function () { return [ '*', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.adobe.cairngorm.business.Responder.prototype.ROYALE_COMPILE_FLAGS = 11;

//# sourceMappingURL=./Responder.js.map