/**
 * Generated by Apache Royale Compiler from com/adobe/cairngorm/commands/SequenceCommand.as
 * com.adobe.cairngorm.commands.SequenceCommand
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('com.adobe.cairngorm.commands.SequenceCommand');

goog.require('com.adobe.cairngorm.control.CairngormEvent');
goog.require('com.adobe.cairngorm.control.CairngormEventDispatcher');
goog.require('com.adobe.cairngorm.commands.ICommand');



/**
 * Constructor, with optional nextEvent.
 * @constructor
 * @implements {com.adobe.cairngorm.commands.ICommand}
 * @param {com.adobe.cairngorm.control.CairngormEvent=} nextEvent
 */
com.adobe.cairngorm.commands.SequenceCommand = function(nextEvent) {
  nextEvent = typeof nextEvent !== 'undefined' ? nextEvent : null;
  ;
  this.nextEvent = nextEvent;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('com.adobe.cairngorm.commands.SequenceCommand', com.adobe.cairngorm.commands.SequenceCommand);


/**
 * @export
 * @type {com.adobe.cairngorm.control.CairngormEvent}
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.nextEvent = null;


/** 
 * Abstract implementation of the execute() method.
 *
 * <p>ActionScript does not explicity support abstract methods and abstract classes, so this concrete 
 * implementation of the interface method must be overridden by the developer.</p>
 * 
 * @export
 * @param {com.adobe.cairngorm.control.CairngormEvent} event
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.execute = function(event) {
};


/**
 * Call to execute the next command in the sequence.
 * 
 * <p>Called explicitly by the developer within a concrete SequenceCommand implementation, this method causes the
 * event registered with nextEvent to be broadcast, for the next command in the sequence to be called 
 * without further user-gesture.</p>
 * 
 * @export
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.executeNextCommand = function() {
  var /** @type {boolean} */ isSequenceCommand = (this.nextEvent != null);
  if (isSequenceCommand)
    com.adobe.cairngorm.control.CairngormEventDispatcher.getInstance().dispatchEvent(this.nextEvent);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SequenceCommand', qName: 'com.adobe.cairngorm.commands.SequenceCommand', kind: 'class' }], interfaces: [com.adobe.cairngorm.commands.ICommand] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'nextEvent': { type: 'com.adobe.cairngorm.control.CairngormEvent', get_set: function (/** com.adobe.cairngorm.commands.SequenceCommand */ inst, /** * */ v) {return v !== undefined ? inst.nextEvent = v : inst.nextEvent;}}
      };
    },
    methods: function () {
      return {
        'SequenceCommand': { type: 'void', declaredBy: 'com.adobe.cairngorm.commands.SequenceCommand', parameters: function () { return [ 'com.adobe.cairngorm.control.CairngormEvent', true ]; }},
        'execute': { type: 'void', declaredBy: 'com.adobe.cairngorm.commands.SequenceCommand', parameters: function () { return [ 'com.adobe.cairngorm.control.CairngormEvent', false ]; }},
        'executeNextCommand': { type: 'void', declaredBy: 'com.adobe.cairngorm.commands.SequenceCommand'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.adobe.cairngorm.commands.SequenceCommand.prototype.ROYALE_COMPILE_FLAGS = 11;

//# sourceMappingURL=./SequenceCommand.js.map