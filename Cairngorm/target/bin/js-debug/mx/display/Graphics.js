/**
 * Generated by Apache Royale Compiler from mx/display/Graphics.as
 * mx.display.Graphics
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.display.Graphics');
/* Royale Dependency List: mx.core.UIComponent,mx.geom.Matrix,org.apache.royale.utils.Language,XML*/




/**
 * @royaleignorecoercion HTMLElement
 * @constructor
 * @param {mx.core.UIComponent} displayObject
 */
mx.display.Graphics = function(displayObject) {
  ;
  this.mx_display_Graphics_displayObject = displayObject;
  this.mx_display_Graphics_element = displayObject.element;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.display.Graphics', mx.display.Graphics);


/**
 * @private
 * @type {mx.core.UIComponent}
 */
mx.display.Graphics.prototype.mx_display_Graphics_displayObject;


/**
 * @private
 * @type {HTMLElement}
 */
mx.display.Graphics.prototype.mx_display_Graphics_element;


/**
 * @private
 * @type {HTMLElement}
 */
mx.display.Graphics.prototype.mx_display_Graphics_svg;


/**
 * @private
 * @type {boolean}
 */
mx.display.Graphics.prototype.mx_display_Graphics_fillInProgress;


/**
 * @royaleignorecoercion HTMLElement
 * @export
 */
mx.display.Graphics.prototype.clear = function() {
  this.mx_display_Graphics_fillInProgress = false;
  
  if (this.mx_display_Graphics_svg)
    this.mx_display_Graphics_element.removeChild(this.mx_display_Graphics_svg);
  this.mx_display_Graphics_svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  this.mx_display_Graphics_svg.setAttribute("width", this.mx_display_Graphics_displayObject.width.toString() + "px");
  this.mx_display_Graphics_svg.setAttribute("height", this.mx_display_Graphics_displayObject.height.toString() + "px");
  this.mx_display_Graphics_svg.style.position = "absolute";
  this.mx_display_Graphics_element.appendChild(this.mx_display_Graphics_svg);
};


/**
 * @private
 * @type {Array}
 */
mx.display.Graphics.prototype.mx_display_Graphics_pathParts;


/**
 * @private
 * @type {number}
 */
mx.display.Graphics.prototype.mx_display_Graphics_fillColor = 0;


/**
 * @private
 * @type {number}
 */
mx.display.Graphics.prototype.mx_display_Graphics_fillAlpha;


/**
 * @export
 * @param {number} color
 * @param {number=} alpha
 */
mx.display.Graphics.prototype.beginFill = function(color, alpha) {
  alpha = typeof alpha !== 'undefined' ? alpha : 1.0;
  
  if (!this.mx_display_Graphics_pathParts)
    this.mx_display_Graphics_pathParts = [];
  this.mx_display_Graphics_fillColor = color;
  this.mx_display_Graphics_fillAlpha = alpha;
  this.mx_display_Graphics_fillInProgress = true;
};


/**
 * @royaleignorecoercion SVGElement
 * @export
 */
mx.display.Graphics.prototype.endFill = function() {
  
  if (this.mx_display_Graphics_pathParts && this.mx_display_Graphics_pathParts.length) {
    var /** @type {SVGElement} */ path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
    colorString = "RGB(" + (this.mx_display_Graphics_fillColor >> 16) + "," + ((this.mx_display_Graphics_fillColor & 0xff00) >> 8) + "," + (this.mx_display_Graphics_fillColor & 0xff) + ")";
    path.setAttribute("fill", colorString);
    if (this.mx_display_Graphics_fillAlpha != 1)
      path.setAttribute("fill-opacity", this.mx_display_Graphics_fillAlpha.toString());
    var /** @type {string} */ pathString = this.mx_display_Graphics_pathParts.join(" ");
    path.setAttribute("d", pathString);
    path.setAttribute("pointer-events", "none");
    this.mx_display_Graphics_svg.appendChild(path);
    this.mx_display_Graphics_pathParts = null;
  }
  this.mx_display_Graphics_fillInProgress = false;
};


/**
 * JS needs some way to know the stroke is starting if there isn't going to be an beginFill call
 * @export
 */
mx.display.Graphics.prototype.beginStroke = function() {
  if (!this.mx_display_Graphics_pathParts)
    this.mx_display_Graphics_pathParts = [];
};


/**
 * JS needs some way to know the stroke is done if there isn't going to be an endFill call
 * @export
 */
mx.display.Graphics.prototype.endStroke = function() {
  if (this.mx_display_Graphics_fillInProgress)
    return;
  if (this.mx_display_Graphics_pathParts && this.mx_display_Graphics_pathParts.length) {
    var /** @type {SVGElement} */ path = org.apache.royale.utils.Language.as(document.createElementNS("http://www.w3.org/2000/svg", "polyline"), SVGElement);
    var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
    path.setAttribute("fill", "none");
    var /** @type {string} */ pathString = "";
    var /** @type {boolean} */ firstOne = true;
    var /** @type {number} */ n = (this.mx_display_Graphics_pathParts.length) >> 0;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      var /** @type {string} */ part = org.apache.royale.utils.Language.string(this.mx_display_Graphics_pathParts[i]);
      if (!firstOne)
        pathString += ",";
      firstOne = false;
      pathString += part.substring(1);
    }
    path.setAttribute("points", pathString);
    path.setAttribute("pointer-events", "none");
    this.mx_display_Graphics_svg.appendChild(path);
    this.mx_display_Graphics_pathParts = null;
  }
};


/**
 * @export
 * @param {string} type
 * @param {Array} colors
 * @param {Array} alphas
 * @param {Array} ratios
 * @param {mx.geom.Matrix=} matrix
 * @param {string=} spreadMethod
 * @param {string=} interpolationMethod
 * @param {number=} focalPointRatio
 */
mx.display.Graphics.prototype.beginGradientFill = function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
  matrix = typeof matrix !== 'undefined' ? matrix : null;
  spreadMethod = typeof spreadMethod !== 'undefined' ? spreadMethod : "pad";
  interpolationMethod = typeof interpolationMethod !== 'undefined' ? interpolationMethod : "rgb";
  focalPointRatio = typeof focalPointRatio !== 'undefined' ? focalPointRatio : 0;
};


/**
 * @private
 * @type {number}
 */
mx.display.Graphics.prototype.mx_display_Graphics_thickness = NaN;


/**
 * @private
 * @type {number}
 */
mx.display.Graphics.prototype.mx_display_Graphics_color = 0;


/**
 * @private
 * @type {number}
 */
mx.display.Graphics.prototype.mx_display_Graphics_alpha = 1.0;


/**
 * @export
 * @param {number=} thickness
 * @param {number=} color
 * @param {number=} alpha
 * @param {boolean=} pixelHinting
 * @param {string=} scaleMode
 * @param {string=} caps
 * @param {string=} joints
 * @param {number=} miterLimit
 */
mx.display.Graphics.prototype.lineStyle = function(thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
  thickness = typeof thickness !== 'undefined' ? thickness : NaN;
  color = typeof color !== 'undefined' ? color : 0;
  alpha = typeof alpha !== 'undefined' ? alpha : 1.0;
  pixelHinting = typeof pixelHinting !== 'undefined' ? pixelHinting : false;
  scaleMode = typeof scaleMode !== 'undefined' ? scaleMode : "normal";
  caps = typeof caps !== 'undefined' ? caps : null;
  joints = typeof joints !== 'undefined' ? joints : null;
  miterLimit = typeof miterLimit !== 'undefined' ? miterLimit : 3;
  
  this.mx_display_Graphics_thickness = thickness == 0 ? 0.5 : thickness;
  this.mx_display_Graphics_color = color;
  this.mx_display_Graphics_alpha = alpha;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
mx.display.Graphics.prototype.moveTo = function(x, y) {
  
  if (!this.mx_display_Graphics_pathParts)
    this.mx_display_Graphics_pathParts = [];
  this.mx_display_Graphics_pathParts.push("M" + x + " " + y);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
mx.display.Graphics.prototype.lineTo = function(x, y) {
  
  if (!this.mx_display_Graphics_pathParts)
    this.mx_display_Graphics_pathParts = [];
  this.mx_display_Graphics_pathParts.push("L" + x + " " + y);
};


/**
 * @export
 * @param {number} controlX
 * @param {number} controlY
 * @param {number} anchorX
 * @param {number} anchorY
 */
mx.display.Graphics.prototype.curveTo = function(controlX, controlY, anchorX, anchorY) {
  
  if (!this.mx_display_Graphics_pathParts)
    this.mx_display_Graphics_pathParts = [];
  this.mx_display_Graphics_pathParts.push("Q" + controlX + " " + controlY + " " + anchorX + " " + anchorY);
};


/**
 * @royaleignorecoercion SVGElement
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 */
mx.display.Graphics.prototype.drawEllipse = function(x, y, width, height) {
  
  var /** @type {SVGElement} */ path = document.createElementNS("http://www.w3.org/2000/svg", "ellipse");
  var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
  if (!isNaN(this.mx_display_Graphics_thickness)) {
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
  }
  colorString = "RGB(" + (this.mx_display_Graphics_fillColor >> 16) + "," + ((this.mx_display_Graphics_fillColor & 0xff00) >> 8) + "," + (this.mx_display_Graphics_fillColor & 0xff) + ")";
  path.setAttribute("fill", colorString);
  if (this.mx_display_Graphics_fillAlpha != 1)
    path.setAttribute("fill-opacity", this.mx_display_Graphics_fillAlpha.toString());
  path.setAttribute("cx", x.toString());
  path.setAttribute("cy", y.toString());
  path.setAttribute("rx", width.toString());
  path.setAttribute("ry", height.toString());
  path.setAttribute("pointer-events", "none");
  this.mx_display_Graphics_svg.appendChild(path);
};


/**
 * @royaleignorecoercion SVGElement
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} radiusX
 * @param {number=} radiusY
 */
mx.display.Graphics.prototype.drawRoundRect = function(x, y, width, height, radiusX, radiusY) {
  radiusY = typeof radiusY !== 'undefined' ? radiusY : NaN;
  
  var /** @type {SVGElement} */ path = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
  if (!isNaN(this.mx_display_Graphics_thickness)) {
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
  }
  colorString = "RGB(" + (this.mx_display_Graphics_fillColor >> 16) + "," + ((this.mx_display_Graphics_fillColor & 0xff00) >> 8) + "," + (this.mx_display_Graphics_fillColor & 0xff) + ")";
  path.setAttribute("fill", colorString);
  if (this.mx_display_Graphics_fillAlpha != 1)
    path.setAttribute("fill-opacity", this.mx_display_Graphics_fillAlpha.toString());
  path.setAttribute("x", x.toString());
  path.setAttribute("y", y.toString());
  path.setAttribute("rx", radiusX.toString());
  if (isNaN(radiusY))
    path.setAttribute("ry", radiusX.toString());
  else
    path.setAttribute("ry", radiusY.toString());
  path.setAttribute("width", width.toString());
  path.setAttribute("height", height.toString());
  path.setAttribute("pointer-events", "none");
  this.mx_display_Graphics_svg.appendChild(path);
};


/**
 * @royaleignorecoercion SVGElement
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 */
mx.display.Graphics.prototype.drawRect = function(x, y, width, height) {
  
  var /** @type {SVGElement} */ path = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
  if (!isNaN(this.mx_display_Graphics_thickness)) {
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
  }
  colorString = "RGB(" + (this.mx_display_Graphics_fillColor >> 16) + "," + ((this.mx_display_Graphics_fillColor & 0xff00) >> 8) + "," + (this.mx_display_Graphics_fillColor & 0xff) + ")";
  path.setAttribute("fill", colorString);
  if (this.mx_display_Graphics_fillAlpha != 1)
    path.setAttribute("fill-opacity", this.mx_display_Graphics_fillAlpha.toString());
  path.setAttribute("x", x.toString());
  path.setAttribute("y", y.toString());
  path.setAttribute("width", width.toString());
  path.setAttribute("height", height.toString());
  path.setAttribute("pointer-events", "none");
  this.mx_display_Graphics_svg.appendChild(path);
};


/**
 * @royaleignorecoercion SVGElement
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 */
mx.display.Graphics.prototype.drawCircle = function(x, y, radius) {
  
  var /** @type {SVGElement} */ path = document.createElementNS("http://www.w3.org/2000/svg", "circle");
  var /** @type {string} */ colorString = "RGB(" + (this.mx_display_Graphics_color >> 16) + "," + ((this.mx_display_Graphics_color & 0xff00) >> 8) + "," + (this.mx_display_Graphics_color & 0xff) + ")";
  if (!isNaN(this.mx_display_Graphics_thickness)) {
    path.setAttribute("stroke", colorString);
    var /** @type {string} */ widthString = this.mx_display_Graphics_thickness.toString();
    path.setAttribute("stroke-width", widthString);
    if (this.mx_display_Graphics_alpha != 1)
      path.setAttribute("stroke-opacity", this.mx_display_Graphics_alpha.toString());
  }
  colorString = "RGB(" + (this.mx_display_Graphics_fillColor >> 16) + "," + ((this.mx_display_Graphics_fillColor & 0xff00) >> 8) + "," + (this.mx_display_Graphics_fillColor & 0xff) + ")";
  path.setAttribute("fill", colorString);
  if (this.mx_display_Graphics_fillAlpha != 1)
    path.setAttribute("fill-opacity", this.mx_display_Graphics_fillAlpha.toString());
  path.setAttribute("cx", x.toString());
  path.setAttribute("cy", y.toString());
  path.setAttribute("r", radius.toString());
  path.setAttribute("pointer-events", "none");
  this.mx_display_Graphics_svg.appendChild(path);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.display.Graphics.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Graphics', qName: 'mx.display.Graphics', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.display.Graphics.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'Graphics': { type: '', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'mx.core.UIComponent', false ]; }},
        'clear': { type: 'void', declaredBy: 'mx.display.Graphics'},
        'beginFill': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'uint', false ,'Number', true ]; }},
        'endFill': { type: 'void', declaredBy: 'mx.display.Graphics'},
        'beginStroke': { type: 'void', declaredBy: 'mx.display.Graphics'},
        'endStroke': { type: 'void', declaredBy: 'mx.display.Graphics'},
        'beginGradientFill': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'String', false ,'Array', false ,'Array', false ,'Array', false ,'mx.geom.Matrix', true ,'String', true ,'String', true ,'Number', true ]; }},
        'lineStyle': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', true ,'uint', true ,'Number', true ,'Boolean', true ,'String', true ,'String', true ,'String', true ,'Number', true ]; }},
        'moveTo': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'lineTo': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'curveTo': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'drawEllipse': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'drawRoundRect': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', true ]; }},
        'drawRect': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'drawCircle': { type: 'void', declaredBy: 'mx.display.Graphics', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.display.Graphics.prototype.ROYALE_COMPILE_FLAGS = 26;
