/**
 * Generated by Apache Royale Compiler from mx/controls/Alert.as
 * mx.controls.Alert
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.Alert');
/* Royale Dependency List: mx.core.FlexGlobals,mx.core.IFlexDisplayObject,mx.core.IUIComponent,mx.events.FlexEvent,mx.managers.PopUpManager,org.apache.royale.core.IAlertModel,org.apache.royale.core.IChild,org.apache.royale.events.CloseEvent,org.apache.royale.utils.Language,XML*/

goog.require('mx.containers.Panel');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @constructor
 * @extends {mx.containers.Panel}
 */
mx.controls.Alert = function() {
  mx.controls.Alert.base(this, 'constructor');
  this.typeNames = "Alert";
};
goog.inherits(mx.controls.Alert, mx.containers.Panel);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.Alert', mx.controls.Alert);


/**
 * @export
 * @const
 * @type {number}
 */
mx.controls.Alert.YES = 0x1;


/**
 * @export
 * @const
 * @type {number}
 */
mx.controls.Alert.NO = 0x2;


/**
 * @export
 * @const
 * @type {number}
 */
mx.controls.Alert.OK = 0x4;


/**
 * @export
 * @const
 * @type {number}
 */
mx.controls.Alert.CANCEL = 0x8;


/**
 * @export
 * @type {number}
 */
mx.controls.Alert.buttonWidth = 65;


/**
 * @private
 * @type {string}
 */
mx.controls.Alert._cancelLabel;


/**
 * @private
 * @type {string}
 */
mx.controls.Alert._okLabel;


/**
 *  Static method that pops up the Alert control. The Alert control 
 *  closes when you select a button in the control, or press the Escape key.
 * 
 *  @asparam text Text string that appears in the Alert control. 
 *  This text is centered in the alert dialog box.
 *
 *  @asparam title Text string that appears in the title bar. 
 *  This text is left justified.
 *
 *  @asparam flags Which buttons to place in the Alert control.
 *  Valid values are <code>Alert.OK</code>, <code>Alert.CANCEL</code>,
 *  <code>Alert.YES</code>, and <code>Alert.NO</code>.
 *  The default value is <code>Alert.OK</code>.
 *  Use the bitwise OR operator to display more than one button. 
 *  For example, passing <code>(Alert.YES | Alert.NO)</code>
 *  displays Yes and No buttons.
 *  Regardless of the order that you specify buttons,
 *  they always appear in the following order from left to right:
 *  OK, Yes, No, Cancel.
 *
 *  @asparam parent Object upon which the Alert control centers itself.
 *
 *  @asparam closeHandler Event handler that is called when any button
 *  on the Alert control is pressed.
 *  The event object passed to this handler is an instance of CloseEvent;
 *  the <code>detail</code> property of this object contains the value
 *  <code>Alert.OK</code>, <code>Alert.CANCEL</code>,
 *  <code>Alert.YES</code>, or <code>Alert.NO</code>.
 *
 *  @asparam iconClass Class of the icon that is placed to the left
 *  of the text in the Alert control.
 *
 *  @asparam defaultButtonFlag A bitflag that specifies the default button.
 *  You can specify one and only one of
 *  <code>Alert.OK</code>, <code>Alert.CANCEL</code>,
 *  <code>Alert.YES</code>, or <code>Alert.NO</code>.
 *  The default value is <code>Alert.OK</code>.
 *  Pressing the Enter key triggers the default button
 *  just as if you clicked it. Pressing Escape triggers the Cancel
 *  or No button just as if you selected it.
 *
 *  @asparam moduleFactory The moduleFactory where this Alert should look for
 *  its embedded fonts and style manager.
 * 
 *  @asreturn A reference to the Alert control. 
 *
 *  @see mx.events.CloseEvent
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {string=} text
 * @param {string=} title
 * @param {number=} flags
 * @param {mx.core.IUIComponent=} parent
 * @param {Function=} closeHandler
 * @param {Object=} iconClass
 * @param {number=} defaultButtonFlag
 * @param {Object=} moduleFactory
 * @return {mx.controls.Alert}
 */
mx.controls.Alert.show = function(text, title, flags, parent, closeHandler, iconClass, defaultButtonFlag, moduleFactory) {
  text = typeof text !== 'undefined' ? text : "";
  title = typeof title !== 'undefined' ? title : "";
  flags = typeof flags !== 'undefined' ? flags : 0x4;
  parent = typeof parent !== 'undefined' ? parent : null;
  closeHandler = typeof closeHandler !== 'undefined' ? closeHandler : null;
  iconClass = typeof iconClass !== 'undefined' ? iconClass : null;
  defaultButtonFlag = typeof defaultButtonFlag !== 'undefined' ? defaultButtonFlag : 0x4;
  moduleFactory = typeof moduleFactory !== 'undefined' ? moduleFactory : null;
  if (!parent) {
    parent = org.apache.royale.utils.Language.as(mx.core.FlexGlobals.topLevelApplication, mx.core.IUIComponent);
  }
  var /** @type {mx.controls.Alert} */ alert = new mx.controls.Alert();
  if (flags & mx.controls.Alert.OK || flags & mx.controls.Alert.CANCEL || flags & mx.controls.Alert.YES || flags & mx.controls.Alert.NO) {
    alert.buttonFlags = flags;
  } else {
    alert.buttonFlags = defaultButtonFlag;
  }
  alert.text = text;
  alert.title = title;
  if (closeHandler != null)
    alert.addEventListener(org.apache.royale.events.CloseEvent.CLOSE, closeHandler);
  alert.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, mx.controls.Alert.static_creationCompleteHandler);
  mx.managers.PopUpManager.addPopUp(alert, parent, true);
  return alert;
};


/**
 *  @asprivate
 * @private
 * @param {mx.events.FlexEvent} event
 */
mx.controls.Alert.static_creationCompleteHandler = function(event) {
  if (org.apache.royale.utils.Language.is(event.target, mx.controls.Alert)) {
    var /** @type {mx.controls.Alert} */ alert = org.apache.royale.utils.Language.as(event.target, mx.controls.Alert, true);
    alert.removeEventListener(mx.events.FlexEvent.CREATION_COMPLETE, mx.controls.Alert.static_creationCompleteHandler);
    mx.managers.PopUpManager.centerPopUp(org.apache.royale.utils.Language.as(alert, mx.core.IFlexDisplayObject, true));
  }
};


/**
 * @asprivate
 * @royaleignorecoercion mx.core.IUIComponent
 * @export
 * @override
 */
mx.controls.Alert.prototype.addElement = function(c, dispatchEvent) {
  dispatchEvent = typeof dispatchEvent !== 'undefined' ? dispatchEvent : true;
  this.$uibase_addChild(c);
};


/**
 * @export
 * @override
 */
mx.controls.Alert.prototype.addedToParent = function() {
  mx.controls.Alert.superClass_.addedToParent.apply(this);
  var /** @type {number} */ buttonWidth = 0;
  var /** @type {HTMLElement} */ controlBar = this.element.childNodes[2];
  var /** @type {number} */ numButtons = (controlBar.childNodes.length) >> 0;
  for (var /** @type {number} */ i = 0; i < numButtons; i++) {
    buttonWidth = Math.max(buttonWidth, controlBar.childNodes[i].offsetWidth);
  }
  for (i = 0; i < numButtons; i++) {
    controlBar.childNodes[i].style.minWidth = buttonWidth.toString() + "px";
  }
  var /** @type {number} */ maxContentWidth = buttonWidth * numButtons;
  maxContentWidth = Math.max(this.element.childNodes[0].childNodes[0].clientWidth);
  maxContentWidth += maxContentWidth;
  this.element.childNodes[1].style.maxWidth = maxContentWidth.toString() + "px";
};


mx.controls.Alert.prototype.get__buttonFlags = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IAlertModel, true).flags;
};


mx.controls.Alert.prototype.set__buttonFlags = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IAlertModel, true).flags = value;
};


mx.controls.Alert.prototype.get__text = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IAlertModel, true).message;
};


mx.controls.Alert.prototype.set__text = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IAlertModel, true).message = value;
};


Object.defineProperties(mx.controls.Alert.prototype, /** @lends {mx.controls.Alert.prototype} */ {
/**
  * @export
  * @type {number} */
buttonFlags: {
get: mx.controls.Alert.prototype.get__buttonFlags,
set: mx.controls.Alert.prototype.set__buttonFlags},
/**
  * @export
  * @type {string} */
text: {
get: mx.controls.Alert.prototype.get__text,
set: mx.controls.Alert.prototype.set__text}}
);


mx.controls.Alert.get__cancelLabel = function() {
  return mx.controls.Alert._cancelLabel;
};


mx.controls.Alert.set__cancelLabel = function(value) {
};


mx.controls.Alert.get__okLabel = function() {
  return mx.controls.Alert._okLabel;
};


mx.controls.Alert.set__okLabel = function(value) {
};


Object.defineProperties(mx.controls.Alert, /** @lends {mx.controls.Alert} */ {
/**
  * @export
  * @type {string} */
cancelLabel: {
get: mx.controls.Alert.get__cancelLabel,
set: mx.controls.Alert.set__cancelLabel},
/**
  * @export
  * @type {string} */
okLabel: {
get: mx.controls.Alert.get__okLabel,
set: mx.controls.Alert.set__okLabel}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.Alert.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Alert', qName: 'mx.controls.Alert', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.Alert.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|buttonWidth': { type: 'Number', get_set: function (/** * */ v) {return v !== undefined ? mx.controls.Alert.buttonWidth = v : mx.controls.Alert.buttonWidth;}}
      };
    },
    accessors: function () {
      return {
        '|cancelLabel': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Alert'},
        '|okLabel': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Alert'},
        'buttonFlags': { type: 'uint', access: 'readwrite', declaredBy: 'mx.controls.Alert'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Alert'}
      };
    },
    methods: function () {
      return {
        '|show': { type: 'mx.controls.Alert', declaredBy: 'mx.controls.Alert', parameters: function () { return [ 'String', true ,'String', true ,'uint', true ,'mx.core.IUIComponent', true ,'Function', true ,'Class', true ,'uint', true ,'Object', true ]; }},
        'Alert': { type: '', declaredBy: 'mx.controls.Alert'},
        'addElement': { type: 'void', declaredBy: 'mx.controls.Alert', parameters: function () { return [ 'org.apache.royale.core.IChild', false ,'Boolean', true ]; }},
        'addedToParent': { type: 'void', declaredBy: 'mx.controls.Alert'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.Alert.prototype.ROYALE_COMPILE_FLAGS = 26;
