/**
 * Generated by Apache Royale Compiler from mx/controls/TextInput.as
 * mx.controls.TextInput
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.TextInput');
/* Royale Dependency List: mx.controls.listClasses.BaseListData,mx.core.EdgeMetrics,mx.core.UITextField,mx.core.mx_internal,mx.events.FlexEvent,mx.events.TextEvent,org.apache.royale.core.TextLineMetrics,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.Event,org.apache.royale.html.accessories.PasswordInputBead,org.apache.royale.html.accessories.RestrictTextInputBead,org.apache.royale.html.beads.DisableBead,org.apache.royale.html.util.addElementToWrapper,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');
goog.require('mx.core.ITextInput');



/**
 *  Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.core.UIComponent}
 * @implements {mx.core.ITextInput}
 */
mx.controls.TextInput = function() {
  mx.controls.TextInput.base(this, 'constructor');
  this.typeNames = "TextInput";
  
};
goog.inherits(mx.controls.TextInput, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.TextInput', mx.controls.TextInput);


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_textSet;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_selectionChanged = false;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_errorCaught = false;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_enabledChanged = false;


/**
 * @private
 * @type {org.apache.royale.html.beads.DisableBead}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__disableBead;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_blockInput = function(event) {
  event["returnValue"] = false;
  if (org.apache.royale.utils.Language.closure(event.preventDefault, event, 'preventDefault'))
    event.preventDefault();
};


/**
 * @private
 * @type {number}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__tabIndex = -1;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_tabIndexChanged = false;


/**
 * @private
 * @type {Object}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__data;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__displayAsPassword = false;


/**
 * @private
 * @type {org.apache.royale.html.accessories.PasswordInputBead}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__passwordBead;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_displayAsPasswordChanged = false;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__editable = true;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_editableChanged = false;


/**
 * @private
 * @type {number}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__horizontalScrollPosition = 0;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_horizontalScrollPositionChanged = false;


/**
 * @private
 * @type {string}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__htmlText = "";


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_htmlTextChanged = false;


/**
 * @private
 * @type {string}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_explicitHTMLText = null;


/**
 * @private
 * @type {mx.controls.listClasses.BaseListData}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__listData;


/**
 * @private
 * @type {number}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__maxChars = 0;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_maxCharsChanged = false;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__parentDrawsFocus = false;


/**
 * @private
 * @type {org.apache.royale.html.accessories.RestrictTextInputBead}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_restrictBead;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__selectable = true;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_selectableChanged = false;


/**
 * @private
 * @type {number}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__selectionBeginIndex = 0;


/**
 * @private
 * @type {number}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput__selectionEndIndex = 0;


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_textChanged = false;


/**
 *  @asprivate
 *  Create child objects.
 * @export
 * @override
 */
mx.controls.TextInput.prototype.createChildren = function() {
  mx.controls.TextInput.superClass_.createChildren.apply(this);
};


/**
 *  @asprivate
 * @export
 * @override
 */
mx.controls.TextInput.prototype.commitProperties = function() {
  mx.controls.TextInput.superClass_.commitProperties.apply(this);
};


/**
 * @export
 * @override
 */
mx.controls.TextInput.prototype.getExplicitOrMeasuredWidth = function() {
  if (!isNaN(this.explicitWidth))
    return this.explicitWidth;
  this.measure();
  return this.measuredWidth;
};


/**
 * @export
 * @override
 */
mx.controls.TextInput.prototype.getExplicitOrMeasuredHeight = function() {
  if (!isNaN(this.explicitHeight))
    return this.explicitHeight;
  this.measure();
  return this.measuredHeight;
};


/**
 *  @asprivate
 * @export
 * @override
 */
mx.controls.TextInput.prototype.measure = function() {
  mx.controls.TextInput.superClass_.measure.apply(this);
  var /** @type {mx.core.EdgeMetrics} */ bm = mx.core.EdgeMetrics.EMPTY;
  var /** @type {number} */ w;
  var /** @type {number} */ h;
  this.measuredWidth = mx.core.UIComponent.DEFAULT_MEASURED_WIDTH;
  if (this.maxChars) {
    this.measuredWidth = Math.min(this.measuredWidth, this.measureText("W").width * this.maxChars + bm.left + bm.right + 8);
  }
  if (!this.text || this.text == "") {
    w = mx.core.UIComponent.DEFAULT_MEASURED_MIN_WIDTH;
    h = this.measureText(" ").height + bm.top + bm.bottom + mx.core.UITextField.http_$$www_adobe_com$2006$flex$mx$internal__TEXT_HEIGHT_PADDING;
    h += Number(this.getStyle("paddingTop") + this.getStyle("paddingBottom"));
  } else {
    var /** @type {org.apache.royale.core.TextLineMetrics} */ lineMetrics;
    lineMetrics = this.measureText(this.text);
    w = lineMetrics.width + bm.left + bm.right + 8;
    h = lineMetrics.height + bm.top + bm.bottom + mx.core.UITextField.http_$$www_adobe_com$2006$flex$mx$internal__TEXT_HEIGHT_PADDING;
    w += Number(this.getStyle("paddingLeft") + this.getStyle("paddingRight"));
    h += Number(this.getStyle("paddingTop") + this.getStyle("paddingBottom"));
  }
  this.measuredWidth = Math.max(w, this.measuredWidth);
  this.measuredHeight = Math.max(h, mx.core.UIComponent.DEFAULT_MEASURED_HEIGHT);
  this.measuredMinWidth = mx.core.UIComponent.DEFAULT_MEASURED_MIN_WIDTH;
  this.measuredMinHeight = mx.core.UIComponent.DEFAULT_MEASURED_MIN_HEIGHT;
};


/**
 *  @asprivate
 *  Stretch the border and fit the TextField inside it.
 * @export
 * @override
 */
mx.controls.TextInput.prototype.updateDisplayList = function(unscaledWidth, unscaledHeight) {
  mx.controls.TextInput.superClass_.updateDisplayList.apply(this, [ unscaledWidth, unscaledHeight] );
  org.apache.royale.utils.Language.trace("TextInput.updateDisplayList not implemented");
};


/**
 *  @asprivate
 * @export
 * @override
 */
mx.controls.TextInput.prototype.styleChanged = function(styleProp) {
  org.apache.royale.utils.Language.trace("TextInput.styleChanged not implemented");
};


/**
 * @royaleignorecoercion org.apache.royale.core.WrappedHTMLElement
 * @export
 * @override
 */
mx.controls.TextInput.prototype.createElement = function() {
  org.apache.royale.html.util.addElementToWrapper(this, 'input');
  this.element.setAttribute('type', 'text');
  goog.events.listen(this.element, 'input', org.apache.royale.utils.Language.closure(this.textChangeHandler, this, 'textChangeHandler'));
  goog.events.listen(this.element, 'keypress', org.apache.royale.utils.Language.closure(this.enterEventHandler, this, 'enterEventHandler'));
  return this.element;
};


/**
 * @private
 * @type {boolean}
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_inSetter;


/**
 *  dispatch change event in response to a textChange event
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
mx.controls.TextInput.prototype.textChangeHandler = function(event) {
  if (!this.mx_controls_TextInput_inSetter) {
    this.dispatchEvent(new org.apache.royale.events.Event(org.apache.royale.events.Event.CHANGE));
    this.dispatchEvent(new org.apache.royale.events.Event(mx.events.FlexEvent.VALUE_COMMIT));
  }
};


/**
 *  dispatch change event in response to a textChange event
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {org.apache.royale.events.Event} event
 */
mx.controls.TextInput.prototype.enterEventHandler = function(event) {
  if (event['key'] === 'Enter') {
    event.preventDefault();
    this.dispatchEvent(new org.apache.royale.events.Event(mx.events.FlexEvent.ENTER));
  } else {
    var /** @type {mx.events.TextEvent} */ textEvent = new mx.events.TextEvent(mx.events.TextEvent.TEXT_INPUT, false, true);
    textEvent.text = org.apache.royale.utils.Language.string(event['key']);
    if (!this.dispatchEvent(textEvent))
      event.preventDefault();
  }
};


/**
 *  Creates the border for this component.
 *  Normally the border is determined by the
 *  <code>borderStyle</code> and <code>borderSkin</code> styles.
 *  It must set the border property to the instance
 *  of the border.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.controls.TextInput.prototype.createBorder = function() {
  org.apache.royale.utils.Language.trace("TextInput.createBorder not implemented");
};


/**
 *  Selects the text in the range specified by the parameters.
 *  If the control is not in focus, the selection highlight will not show
 *  until the control gains focus. Also, if the focus is gained by clicking
 *  on the control, any previous selection would be lost.
 *  If the two parameter values are the same,
 *  the new selection is an insertion point.
 *
 *  @asparam beginIndex The zero-based index of the first character in the
 *  selection; that is, the first character is 0, the second character
 *  is 1, and so on.
 *
 *  @asparam endIndex The zero-based index of the position <i>after</i>
 *  the last character in the selection (equivalent to the one-based
 *  index of the last character).
 *  If the parameter is 5, the last character in the selection, for
 *  example, is the fifth character.
 *  When the TextInput control gets the focus, the selection is visible
 *  if the <code>selectionBeginIndex</code> and <code>selectionEndIndex</code>
 *  properties are both set.
 *
 *  @tiptext Sets a new text selection.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 *  @royaleignorecoercion HTMLInputElement
 * @export
 * @param {number} beginIndex
 * @param {number} endIndex
 */
mx.controls.TextInput.prototype.setSelection = function(beginIndex, endIndex) {
  this.mx_controls_TextInput__selectionBeginIndex = beginIndex;
  this.mx_controls_TextInput__selectionEndIndex = endIndex;
  this.mx_controls_TextInput_selectionChanged = true;
  this.invalidateProperties();
  this.element.setSelectionRange(beginIndex, endIndex);
};


/**
 *  @asprivate
 *  Setting the 'htmlText' of textField changes its 'text',
 *  and vice versa, so afterwards doing so we call this method
 *  to update the storage vars for various properties.
 *  Afterwards, the TextInput's 'text', 'htmlText', 'textWidth',
 *  and 'textHeight' are all in sync with each other
 *  and are identical to the TextField's.
 * @private
 * @param {boolean} styleChangeOnly
 * @param {boolean} dispatchValueCommitEvent
 */
mx.controls.TextInput.prototype.mx_controls_TextInput_textFieldChanged = function(styleChangeOnly, dispatchValueCommitEvent) {
  org.apache.royale.utils.Language.trace("TextInput.textFieldChanged not implemented");
};


/**
 *  Selects the text in the range specified by the parameters.  Unlike
 *  <code>setSelection</code> this is done immediately.
 *
 *  @asparam anchorIndex The zero-based character index specifying the beginning
 *  of the selection that stays fixed when the selection is extended.
 *
 *  @asparam activeIndex The zero-based character index specifying
 *  the end of the selection that moves when the selection is extended.
 *
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {number} anchorIndex
 * @param {number} activeIndex
 */
mx.controls.TextInput.prototype.selectRange = function(anchorIndex, activeIndex) {
  org.apache.royale.utils.Language.trace("TextInput.selectRange not implemented");
};


mx.controls.TextInput.prototype.set__enabled = function(value) {
  if (value == this.enabled)
    return;
  mx.controls.TextInput.superClass_.set__enabled.apply(this, [ value] );
  if (this.mx_controls_TextInput__disableBead == null) {
    this.mx_controls_TextInput__disableBead = new org.apache.royale.html.beads.DisableBead();
    this.addBead(this.mx_controls_TextInput__disableBead);
  }
  this.mx_controls_TextInput__disableBead.disabled = !value;
  if (value)
    this.element.removeEventListener("keypress", org.apache.royale.utils.Language.closure(this.mx_controls_TextInput_blockInput, this, 'blockInput'));
  else
    this.element.addEventListener("keypress", org.apache.royale.utils.Language.closure(this.mx_controls_TextInput_blockInput, this, 'blockInput'));
  
};


mx.controls.TextInput.prototype.get__contentBackgroundColor = function() {
  return 0xffffff;
};


mx.controls.TextInput.prototype.set__contentBackgroundColor = function(value) {
};


mx.controls.TextInput.prototype.get__borderVisible = function() {
  return true;
};


mx.controls.TextInput.prototype.set__borderVisible = function(value) {
};


mx.controls.TextInput.prototype.get__data = function() {
  return this.mx_controls_TextInput__data;
};


mx.controls.TextInput.prototype.set__data = function(value) {
  var /** @type {*} */ newText;
  this.mx_controls_TextInput__data = value;
  if (this.mx_controls_TextInput__listData) {
    newText = this.mx_controls_TextInput__listData.label;
  } else if (this.mx_controls_TextInput__data != null) {
    if (org.apache.royale.utils.Language.is(this.mx_controls_TextInput__data, String))
      newText = String(this.mx_controls_TextInput__data);
    else
      newText = this.mx_controls_TextInput__data.toString();
  }
  if (newText !== undefined && !this.mx_controls_TextInput_textSet) {
    this.text = org.apache.royale.utils.Language.string(newText);
    this.mx_controls_TextInput_textSet = false;
  }
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.DATA_CHANGE));
};


mx.controls.TextInput.prototype.get__displayAsPassword = function() {
  return this.mx_controls_TextInput__displayAsPassword;
};


mx.controls.TextInput.prototype.set__displayAsPassword = function(value) {
  if (value == this.mx_controls_TextInput__displayAsPassword)
    return;
  this.mx_controls_TextInput__displayAsPassword = value;
  if (this.mx_controls_TextInput__displayAsPassword && this.mx_controls_TextInput__passwordBead == null) {
    this.mx_controls_TextInput__passwordBead = new org.apache.royale.html.accessories.PasswordInputBead();
    this.addBead(this.mx_controls_TextInput__passwordBead);
  } else if (!this.mx_controls_TextInput__displayAsPassword && this.mx_controls_TextInput__passwordBead != null) {
    this.removeBead(this.mx_controls_TextInput__passwordBead);
    this.mx_controls_TextInput__passwordBead = null;
  }
  this.dispatchEvent(new org.apache.royale.events.Event("displayAsPasswordChanged"));
};


mx.controls.TextInput.prototype.get__editable = function() {
  return this.mx_controls_TextInput__editable;
};


mx.controls.TextInput.prototype.set__editable = function(value) {
  this.mx_controls_TextInput__editable = value;
  if (value == false) {
    org.apache.royale.utils.Language.as(this.element, HTMLInputElement).readOnly = true;
  } else {
    org.apache.royale.utils.Language.as(this.element, HTMLInputElement).readOnly = value;
  }
};


mx.controls.TextInput.prototype.get__horizontalScrollPosition = function() {
  return this.mx_controls_TextInput__horizontalScrollPosition;
};


mx.controls.TextInput.prototype.set__horizontalScrollPosition = function(value) {
  if (value == this.mx_controls_TextInput__horizontalScrollPosition)
    return;
  this.mx_controls_TextInput__horizontalScrollPosition = value;
  this.mx_controls_TextInput_horizontalScrollPositionChanged = true;
  this.invalidateProperties();
  this.dispatchEvent(new org.apache.royale.events.Event("horizontalScrollPositionChanged"));
};


mx.controls.TextInput.prototype.get__htmlText = function() {
  
  return org.apache.royale.utils.Language.as(this.element, HTMLInputElement).value;
};


mx.controls.TextInput.prototype.set__htmlText = function(value) {
  
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).value = value;
  this.dispatchEvent(new org.apache.royale.events.Event('textChange'));
};


mx.controls.TextInput.prototype.get__mx_controls_TextInput_isHTML = function() {
  return this.mx_controls_TextInput_explicitHTMLText != null;
};


mx.controls.TextInput.prototype.get__length = function() {
  return (this.text != null ? this.text.length : -1) >> 0;
};


mx.controls.TextInput.prototype.get__listData = function() {
  return this.mx_controls_TextInput__listData;
};


mx.controls.TextInput.prototype.set__listData = function(value) {
  this.mx_controls_TextInput__listData = value;
};


mx.controls.TextInput.prototype.get__maxChars = function() {
  return this.mx_controls_TextInput__maxChars;
};


mx.controls.TextInput.prototype.set__maxChars = function(value) {
  if (value == this.mx_controls_TextInput__maxChars)
    return;
  this.mx_controls_TextInput__maxChars = value;
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).maxLength = value;
};


mx.controls.TextInput.prototype.get__maxHorizontalScrollPosition = function() {
  return 0;
};


mx.controls.TextInput.prototype.get__parentDrawsFocus = function() {
  return this.mx_controls_TextInput__parentDrawsFocus;
};


mx.controls.TextInput.prototype.set__parentDrawsFocus = function(value) {
  this.mx_controls_TextInput__parentDrawsFocus = value;
};


mx.controls.TextInput.prototype.get__restrict = function() {
  if (!this.mx_controls_TextInput_restrictBead)
    return null;
  return this.mx_controls_TextInput_restrictBead.restrict;
};


mx.controls.TextInput.prototype.set__restrict = function(value) {
  if (!this.mx_controls_TextInput_restrictBead) {
    this.mx_controls_TextInput_restrictBead = new org.apache.royale.html.accessories.RestrictTextInputBead();
    this.addBead(this.mx_controls_TextInput_restrictBead);
  }
  this.mx_controls_TextInput_restrictBead.restrict = value;
};


mx.controls.TextInput.prototype.get__selectable = function() {
  return this.mx_controls_TextInput__selectable;
};


mx.controls.TextInput.prototype.set__selectable = function(value) {
  if (this.mx_controls_TextInput__selectable == value)
    return;
  this.mx_controls_TextInput__selectable = value;
  this.mx_controls_TextInput_selectableChanged = true;
  this.invalidateProperties();
};


mx.controls.TextInput.prototype.get__selectionBeginIndex = function() {
  this.mx_controls_TextInput__selectionBeginIndex = (org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionStart) >> 0;
  return this.mx_controls_TextInput__selectionBeginIndex;
};


mx.controls.TextInput.prototype.set__selectionBeginIndex = function(value) {
  this.mx_controls_TextInput__selectionBeginIndex = value;
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionStart = value;
};


mx.controls.TextInput.prototype.get__selectionEndIndex = function() {
  this.mx_controls_TextInput__selectionEndIndex = (org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionEnd) >> 0;
  return this.mx_controls_TextInput__selectionEndIndex;
};


mx.controls.TextInput.prototype.set__selectionEndIndex = function(value) {
  this.mx_controls_TextInput__selectionEndIndex = value;
  this.mx_controls_TextInput_selectionChanged = true;
  this.invalidateProperties();
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionEnd = value;
};


mx.controls.TextInput.prototype.get__text = function() {
  
  return this.element.value;
};


mx.controls.TextInput.prototype.set__text = function(value) {
  
  this.mx_controls_TextInput__selectionBeginIndex = (org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionStart) >> 0;
  this.mx_controls_TextInput__selectionEndIndex = (org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionEnd) >> 0;
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).value = value;
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionStart = this.mx_controls_TextInput__selectionBeginIndex;
  org.apache.royale.utils.Language.as(this.element, HTMLInputElement).selectionEnd = this.mx_controls_TextInput__selectionEndIndex;
  this.dispatchEvent(new org.apache.royale.events.Event('textChanged'));
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.VALUE_COMMIT));
};


mx.controls.TextInput.prototype.get__selectionActivePosition = function() {
  return this.selectionEndIndex;
};


mx.controls.TextInput.prototype.get__selectionAnchorPosition = function() {
  return this.selectionBeginIndex;
};


Object.defineProperties(mx.controls.TextInput.prototype, /** @lends {mx.controls.TextInput.prototype} */ {
/**
  * @export
  * @type {boolean} */
enabled: {
get: mx.core.UIComponent.prototype.get__enabled,
set: mx.controls.TextInput.prototype.set__enabled},
/**
  * @export
  * @type {number} */
contentBackgroundColor: {
get: mx.controls.TextInput.prototype.get__contentBackgroundColor,
set: mx.controls.TextInput.prototype.set__contentBackgroundColor},
/**
  * @export
  * @type {boolean} */
borderVisible: {
get: mx.controls.TextInput.prototype.get__borderVisible,
set: mx.controls.TextInput.prototype.set__borderVisible},
/**
  * @export
  * @type {Object} */
data: {
get: mx.controls.TextInput.prototype.get__data,
set: mx.controls.TextInput.prototype.set__data},
/**
  * @export
  * @type {boolean} */
displayAsPassword: {
get: mx.controls.TextInput.prototype.get__displayAsPassword,
set: mx.controls.TextInput.prototype.set__displayAsPassword},
/**
  * @export
  * @type {boolean} */
editable: {
get: mx.controls.TextInput.prototype.get__editable,
set: mx.controls.TextInput.prototype.set__editable},
/**
  * @export
  * @type {number} */
horizontalScrollPosition: {
get: mx.controls.TextInput.prototype.get__horizontalScrollPosition,
set: mx.controls.TextInput.prototype.set__horizontalScrollPosition},
/**
  * @export
  * @type {string} */
htmlText: {
get: mx.controls.TextInput.prototype.get__htmlText,
set: mx.controls.TextInput.prototype.set__htmlText},
/**
  * @type {boolean} */
mx_controls_TextInput_isHTML: {
get: mx.controls.TextInput.prototype.get__mx_controls_TextInput_isHTML},
/**
  * @export
  * @type {number} */
length: {
get: mx.controls.TextInput.prototype.get__length},
/**
  * @export
  * @type {mx.controls.listClasses.BaseListData} */
listData: {
get: mx.controls.TextInput.prototype.get__listData,
set: mx.controls.TextInput.prototype.set__listData},
/**
  * @export
  * @type {number} */
maxChars: {
get: mx.controls.TextInput.prototype.get__maxChars,
set: mx.controls.TextInput.prototype.set__maxChars},
/**
  * @export
  * @type {number} */
maxHorizontalScrollPosition: {
get: mx.controls.TextInput.prototype.get__maxHorizontalScrollPosition},
/**
  * @export
  * @type {boolean} */
parentDrawsFocus: {
get: mx.controls.TextInput.prototype.get__parentDrawsFocus,
set: mx.controls.TextInput.prototype.set__parentDrawsFocus},
/**
  * @export
  * @type {string} */
restrict: {
get: mx.controls.TextInput.prototype.get__restrict,
set: mx.controls.TextInput.prototype.set__restrict},
/**
  * @export
  * @type {boolean} */
selectable: {
get: mx.controls.TextInput.prototype.get__selectable,
set: mx.controls.TextInput.prototype.set__selectable},
/**
  * @export
  * @type {number} */
selectionBeginIndex: {
get: mx.controls.TextInput.prototype.get__selectionBeginIndex,
set: mx.controls.TextInput.prototype.set__selectionBeginIndex},
/**
  * @export
  * @type {number} */
selectionEndIndex: {
get: mx.controls.TextInput.prototype.get__selectionEndIndex,
set: mx.controls.TextInput.prototype.set__selectionEndIndex},
/**
  * @export
  * @type {string} */
text: {
get: mx.controls.TextInput.prototype.get__text,
set: mx.controls.TextInput.prototype.set__text},
/**
  * @export
  * @type {number} */
selectionActivePosition: {
get: mx.controls.TextInput.prototype.get__selectionActivePosition},
/**
  * @export
  * @type {number} */
selectionAnchorPosition: {
get: mx.controls.TextInput.prototype.get__selectionAnchorPosition}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.TextInput.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextInput', qName: 'mx.controls.TextInput', kind: 'class' }], interfaces: [mx.core.ITextInput] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.TextInput.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'enabled': { type: 'Boolean', access: 'writeonly', declaredBy: 'mx.controls.TextInput'},
        'contentBackgroundColor': { type: 'uint', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'borderVisible': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'data': { type: 'Object', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'dataChange' } ] } ]; }},
        'displayAsPassword': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'displayAsPasswordChanged' } ] } ]; }},
        'editable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'editableChanged' } ] } ]; }},
        'horizontalScrollPosition': { type: 'Number', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'horizontalScrollPositionChanged' } ] } ]; }},
        'htmlText': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'htmlTextChanged' } ] }, { name: 'NonCommittingChangeEvent', args: [ { key: '', value: 'change' } ] } ]; }},
        'length': { type: 'int', access: 'readonly', declaredBy: 'mx.controls.TextInput'},
        'listData': { type: 'mx.controls.listClasses.BaseListData', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'dataChange' } ] } ]; }},
        'maxChars': { type: 'int', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'maxCharsChanged' } ] } ]; }},
        'maxHorizontalScrollPosition': { type: 'Number', access: 'readonly', declaredBy: 'mx.controls.TextInput'},
        'parentDrawsFocus': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'restrict': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'selectable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'selectionBeginIndex': { type: 'int', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'selectionEndIndex': { type: 'int', access: 'readwrite', declaredBy: 'mx.controls.TextInput'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.TextInput', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'selectionActivePosition': { type: 'int', access: 'readonly', declaredBy: 'mx.controls.TextInput'},
        'selectionAnchorPosition': { type: 'int', access: 'readonly', declaredBy: 'mx.controls.TextInput'}
      };
    },
    methods: function () {
      return {
        'TextInput': { type: '', declaredBy: 'mx.controls.TextInput'},
        'getExplicitOrMeasuredWidth': { type: 'Number', declaredBy: 'mx.controls.TextInput'},
        'getExplicitOrMeasuredHeight': { type: 'Number', declaredBy: 'mx.controls.TextInput'},
        'styleChanged': { type: 'void', declaredBy: 'mx.controls.TextInput', parameters: function () { return [ 'String', false ]; }},
        'textChangeHandler': { type: 'void', declaredBy: 'mx.controls.TextInput', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'enterEventHandler': { type: 'void', declaredBy: 'mx.controls.TextInput', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'setSelection': { type: 'void', declaredBy: 'mx.controls.TextInput', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'selectRange': { type: 'void', declaredBy: 'mx.controls.TextInput', parameters: function () { return [ 'int', false ,'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.TextInput.prototype.ROYALE_COMPILE_FLAGS = 26;
