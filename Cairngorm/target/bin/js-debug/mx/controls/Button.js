/**
 * Generated by Apache Royale Compiler from mx/controls/Button.as
 * mx.controls.Button
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.Button');
/* Royale Dependency List: mx.controls.listClasses.BaseListData,mx.events.FlexEvent,org.apache.royale.core.ITextModel,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.BrowserEvent,org.apache.royale.events.Event,org.apache.royale.html.accessories.ToolTipBead,org.apache.royale.html.beads.models.ImageAndTextModel,org.apache.royale.html.util.addElementToWrapper,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');
goog.require('mx.core.IDataRenderer');



/**
 * @constructor
 * @extends {mx.core.UIComponent}
 * @implements {mx.core.IDataRenderer}
 */
mx.controls.Button = function() {
  mx.controls.Button.base(this, 'constructor');
  this.typeNames = "Button";
};
goog.inherits(mx.controls.Button, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.Button', mx.controls.Button);


/**
 * @private
 * @type {org.apache.royale.html.accessories.ToolTipBead}
 */
mx.controls.Button.prototype.mx_controls_Button__toolTipBead;


/**
 * @private
 * @type {Object}
 */
mx.controls.Button.prototype.mx_controls_Button__data;


/**
 * @private
 * @type {mx.controls.listClasses.BaseListData}
 */
mx.controls.Button.prototype.mx_controls_Button__listData;


/**
 * @private
 * @type {boolean}
 */
mx.controls.Button.prototype.mx_controls_Button__selected = false;


/**
 * @private
 * @type {string}
 */
mx.controls.Button.prototype.mx_controls_Button__labelPlacement = "right";


/**
 * @private
 * @type {boolean}
 */
mx.controls.Button.prototype.mx_controls_Button__toggle = false;


/**
 * @royaleignorecoercion org.apache.royale.core.WrappedHTMLElement
 * @export
 * @override
 */
mx.controls.Button.prototype.createElement = function() {
  org.apache.royale.html.util.addElementToWrapper(this, 'button');
  this.element.setAttribute('type', 'button');
  return this.element;
};


/**
 * @royaleignorecoercion HTMLImageElement
 * @export
 */
mx.controls.Button.prototype.setInnerHTML = function() {
  if (this.label != null) {
    this.element.innerHTML = this.label;
  }
  if (this.icon != null) {
    this.element.style.background = "url('" + this.icon + "') no-repeat 2px center";
    var /** @type {HTMLImageElement} */ dummyImage = document.createElement('img');
    dummyImage.addEventListener("load", org.apache.royale.utils.Language.closure(this.mx_controls_Button_handleImageLoaded2, this, 'handleImageLoaded2'));
    dummyImage.src = this.icon;
  }
  this.measuredWidth = Number.NaN;
  this.measuredHeight = Number.NaN;
};


/**
 * 
 * @royaleignorecoercion HTMLImageElement
 * @private
 * @param {org.apache.royale.events.BrowserEvent} event
 */
mx.controls.Button.prototype.mx_controls_Button_handleImageLoaded2 = function(event) {
  var /** @type {HTMLImageElement} */ img = event.target;
  this.element.style["padding-left"] = String(img.naturalWidth + 4) + "px";
  this.height = Math.max(img.naturalHeight, this.element.offsetHeight);
  this.measuredWidth = Number.NaN;
  this.measuredHeight = Number.NaN;
  var /** @type {org.apache.royale.events.Event} */ newEvent = new org.apache.royale.events.Event("layoutNeeded", true);
  this.dispatchEvent(newEvent);
};


mx.controls.Button.prototype.get__locale = function() {
  return "en";
};


mx.controls.Button.prototype.set__locale = function(value) {
};


mx.controls.Button.prototype.get__textDecoration = function() {
  return "none";
};


mx.controls.Button.prototype.set__textDecoration = function(value) {
};


mx.controls.Button.prototype.get__icon = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.html.beads.models.ImageAndTextModel, true).image;
};


mx.controls.Button.prototype.set__icon = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.html.beads.models.ImageAndTextModel, true).image = value;
  this.setInnerHTML();
};


mx.controls.Button.prototype.get__disabledIcon = function() {
  return null;
};


mx.controls.Button.prototype.set__disabledIcon = function(value) {
};


mx.controls.Button.prototype.get__label = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.ITextModel, true).text;
};


mx.controls.Button.prototype.set__label = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.ITextModel, true).text = value;
  this.setInnerHTML();
};


mx.controls.Button.prototype.get__toolTip = function() {
  if (this.mx_controls_Button__toolTipBead) {
    return this.mx_controls_Button__toolTipBead.toolTip;
  }
  return null;
};


mx.controls.Button.prototype.set__toolTip = function(value) {
  mx.controls.Button.superClass_.set__toolTip.apply(this, [ value] );
  this.mx_controls_Button__toolTipBead = org.apache.royale.utils.Language.as(this.getBeadByType(org.apache.royale.html.accessories.ToolTipBead), org.apache.royale.html.accessories.ToolTipBead);
  if (this.mx_controls_Button__toolTipBead == null) {
    this.mx_controls_Button__toolTipBead = new org.apache.royale.html.accessories.ToolTipBead();
    this.addBead(this.mx_controls_Button__toolTipBead);
  }
  this.mx_controls_Button__toolTipBead.toolTip = value;
};


mx.controls.Button.prototype.get__data = function() {
  return this.mx_controls_Button__data;
};


mx.controls.Button.prototype.set__data = function(value) {
  this.mx_controls_Button__data = value;
  this.dispatchEvent(new mx.events.FlexEvent(mx.events.FlexEvent.DATA_CHANGE));
};


mx.controls.Button.prototype.get__listData = function() {
  return this.mx_controls_Button__listData;
};


mx.controls.Button.prototype.set__listData = function(value) {
  this.mx_controls_Button__listData = value;
};


mx.controls.Button.prototype.get__selected = function() {
  return this.mx_controls_Button__selected;
};


mx.controls.Button.prototype.set__selected = function(value) {
  this.mx_controls_Button__selected = value;
};


mx.controls.Button.prototype.get__labelPlacement = function() {
  return this.mx_controls_Button__labelPlacement;
};


mx.controls.Button.prototype.set__labelPlacement = function(value) {
  this.mx_controls_Button__labelPlacement = value;
  this.dispatchEvent(new org.apache.royale.events.Event("labelPlacementChanged"));
};


mx.controls.Button.prototype.get__toggle = function() {
  return this.mx_controls_Button__toggle;
};


mx.controls.Button.prototype.set__toggle = function(value) {
  this.mx_controls_Button__toggle = value;
  this.dispatchEvent(new org.apache.royale.events.Event("toggleChanged"));
};


Object.defineProperties(mx.controls.Button.prototype, /** @lends {mx.controls.Button.prototype} */ {
/**
  * @export
  * @type {string} */
locale: {
get: mx.controls.Button.prototype.get__locale,
set: mx.controls.Button.prototype.set__locale},
/**
  * @export
  * @type {string} */
textDecoration: {
get: mx.controls.Button.prototype.get__textDecoration,
set: mx.controls.Button.prototype.set__textDecoration},
/**
  * @export
  * @type {string} */
icon: {
get: mx.controls.Button.prototype.get__icon,
set: mx.controls.Button.prototype.set__icon},
/**
  * @export
  * @type {string} */
disabledIcon: {
get: mx.controls.Button.prototype.get__disabledIcon,
set: mx.controls.Button.prototype.set__disabledIcon},
/**
  * @export
  * @type {string} */
label: {
get: mx.controls.Button.prototype.get__label,
set: mx.controls.Button.prototype.set__label},
/**
  * @export
  * @type {string} */
toolTip: {
get: mx.controls.Button.prototype.get__toolTip,
set: mx.controls.Button.prototype.set__toolTip},
/**
  * @export
  * @type {Object} */
data: {
get: mx.controls.Button.prototype.get__data,
set: mx.controls.Button.prototype.set__data},
/**
  * @export
  * @type {mx.controls.listClasses.BaseListData} */
listData: {
get: mx.controls.Button.prototype.get__listData,
set: mx.controls.Button.prototype.set__listData},
/**
  * @export
  * @type {boolean} */
selected: {
get: mx.controls.Button.prototype.get__selected,
set: mx.controls.Button.prototype.set__selected},
/**
  * @export
  * @type {string} */
labelPlacement: {
get: mx.controls.Button.prototype.get__labelPlacement,
set: mx.controls.Button.prototype.set__labelPlacement},
/**
  * @export
  * @type {boolean} */
toggle: {
get: mx.controls.Button.prototype.get__toggle,
set: mx.controls.Button.prototype.set__toggle}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.Button.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Button', qName: 'mx.controls.Button', kind: 'class' }], interfaces: [mx.core.IDataRenderer] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.Button.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'locale': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'textDecoration': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'icon': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'disabledIcon': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'label': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'toolTip': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'data': { type: 'Object', access: 'readwrite', declaredBy: 'mx.controls.Button', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'dataChange' } ] } ]; }},
        'listData': { type: 'mx.controls.listClasses.BaseListData', access: 'readwrite', declaredBy: 'mx.controls.Button', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'dataChange' } ] } ]; }},
        'selected': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.Button'},
        'labelPlacement': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Button', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'labelPlacementChanged' } ] } ]; }},
        'toggle': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.Button', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'toggleChanged' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'Button': { type: '', declaredBy: 'mx.controls.Button'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.Button.prototype.ROYALE_COMPILE_FLAGS = 26;
