/**
 * Generated by Apache Royale Compiler from mx/controls/Image.as
 * mx.controls.Image
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.Image');
/* Royale Dependency List: org.apache.royale.core.IImageModel,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.BrowserEvent,org.apache.royale.events.Event,org.apache.royale.html.util.addElementToWrapper,org.apache.royale.utils.Language,XML*/

goog.require('mx.core.UIComponent');
goog.require('org.apache.royale.core.IImage');



/**
 *  Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.4
 * @constructor
 * @extends {mx.core.UIComponent}
 * @implements {org.apache.royale.core.IImage}
 */
mx.controls.Image = function() {
  mx.controls.Image.base(this, 'constructor');
};
goog.inherits(mx.controls.Image, mx.core.UIComponent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.Image', mx.controls.Image);


/**
 * @export
 * @override
 */
mx.controls.Image.prototype.addedToParent = function() {
  mx.controls.Image.superClass_.addedToParent.apply(this);
  org.apache.royale.utils.Language.trace("Image.addedToParent called: " + this.getExplicitOrMeasuredWidth() + " x " + this.getExplicitOrMeasuredHeight());
};


/**
 * @export
 * @param {string} binaryDataAsString
 */
mx.controls.Image.prototype.applyImageData = function(binaryDataAsString) {
  this.element.addEventListener("load", org.apache.royale.utils.Language.closure(this.mx_controls_Image_handleImageLoaded, this, 'handleImageLoaded'));
  org.apache.royale.utils.Language.as(this.element, HTMLImageElement).src = binaryDataAsString;
};


/**
 * @private
 * @param {org.apache.royale.events.BrowserEvent} event
 */
mx.controls.Image.prototype.mx_controls_Image_handleImageLoaded = function(event) {
  org.apache.royale.utils.Language.trace("The image src " + this.src + " is now loaded");
  org.apache.royale.utils.Language.trace("Image offset size is: " + org.apache.royale.utils.Language.as(this.element, HTMLImageElement).naturalWidth + " x " + org.apache.royale.utils.Language.as(this.element, HTMLImageElement).naturalHeight);
  this.measuredWidth = org.apache.royale.utils.Language.as(this.element, HTMLImageElement).naturalWidth;
  this.measuredHeight = org.apache.royale.utils.Language.as(this.element, HTMLImageElement).naturalHeight;
  this.setActualSize(this.getExplicitOrMeasuredWidth(), this.getExplicitOrMeasuredHeight());
  this.dispatchEvent(new org.apache.royale.events.Event("complete"));
  var /** @type {org.apache.royale.events.Event} */ newEvent = new org.apache.royale.events.Event("layoutNeeded", true);
  this.dispatchEvent(newEvent);
};


/**
 * @private
 * @type {boolean}
 */
mx.controls.Image.prototype.mx_controls_Image__scaleContent = true;


/**
 * @royaleignorecoercion org.apache.royale.core.WrappedHTMLElement
 * @export
 * @override
 */
mx.controls.Image.prototype.createElement = function() {
  org.apache.royale.html.util.addElementToWrapper(this, 'img');
  this.typeNames = 'Image';
  return this.element;
};


mx.controls.Image.prototype.get__source = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IImageModel).url;
};


mx.controls.Image.prototype.set__source = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IImageModel).url = org.apache.royale.utils.Language.as(value, String);
};


mx.controls.Image.prototype.get__src = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IImageModel).url;
};


mx.controls.Image.prototype.set__src = function(value) {
  org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IImageModel).url = value;
};


mx.controls.Image.prototype.get__imageElement = function() {
  return this.element;
};


mx.controls.Image.prototype.get__complete = function() {
  return org.apache.royale.utils.Language.as(this.element, HTMLImageElement).complete;
};


mx.controls.Image.prototype.get__scaleContent = function() {
  return this.mx_controls_Image__scaleContent;
};


mx.controls.Image.prototype.set__scaleContent = function(value) {
  if (this.mx_controls_Image__scaleContent != value) {
    this.mx_controls_Image__scaleContent = value;
  }
};


mx.controls.Image.prototype.get__verticalAlign = function() {
  return "top";
};


mx.controls.Image.prototype.set__verticalAlign = function(value) {
};


mx.controls.Image.prototype.get__horizontalAlign = function() {
  return "left";
};


mx.controls.Image.prototype.set__horizontalAlign = function(value) {
};


Object.defineProperties(mx.controls.Image.prototype, /** @lends {mx.controls.Image.prototype} */ {
/**
  * @export
  * @type {Object} */
source: {
get: mx.controls.Image.prototype.get__source,
set: mx.controls.Image.prototype.set__source},
/**
  * @export
  * @type {string} */
src: {
get: mx.controls.Image.prototype.get__src,
set: mx.controls.Image.prototype.set__src},
/**
  * @export
  * @type {Element} */
imageElement: {
get: mx.controls.Image.prototype.get__imageElement},
/**
  * @export
  * @type {boolean} */
complete: {
get: mx.controls.Image.prototype.get__complete},
/**
  * @export
  * @type {boolean} */
scaleContent: {
get: mx.controls.Image.prototype.get__scaleContent,
set: mx.controls.Image.prototype.set__scaleContent},
/**
  * @export
  * @type {string} */
verticalAlign: {
get: mx.controls.Image.prototype.get__verticalAlign,
set: mx.controls.Image.prototype.set__verticalAlign},
/**
  * @export
  * @type {string} */
horizontalAlign: {
get: mx.controls.Image.prototype.get__horizontalAlign,
set: mx.controls.Image.prototype.set__horizontalAlign}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.Image.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Image', qName: 'mx.controls.Image', kind: 'class' }], interfaces: [org.apache.royale.core.IImage] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.Image.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'source': { type: 'Object', access: 'readwrite', declaredBy: 'mx.controls.Image', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'sourceChanged' } ] } ]; }},
        'src': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Image'},
        'imageElement': { type: 'Element', access: 'readonly', declaredBy: 'mx.controls.Image'},
        'complete': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.controls.Image'},
        'scaleContent': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.controls.Image', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'scaleContentChanged' } ] } ]; }},
        'verticalAlign': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Image'},
        'horizontalAlign': { type: 'String', access: 'readwrite', declaredBy: 'mx.controls.Image'}
      };
    },
    methods: function () {
      return {
        'Image': { type: '', declaredBy: 'mx.controls.Image'},
        'addedToParent': { type: 'void', declaredBy: 'mx.controls.Image'},
        'applyImageData': { type: 'void', declaredBy: 'mx.controls.Image', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.Image.prototype.ROYALE_COMPILE_FLAGS = 26;
