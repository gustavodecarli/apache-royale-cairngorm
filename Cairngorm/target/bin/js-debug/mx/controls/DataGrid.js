/**
 * Generated by Apache Royale Compiler from mx/controls/DataGrid.as
 * mx.controls.DataGrid
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.controls.DataGrid');
/* Royale Dependency List: mx.controls.dataGridClasses.DataGridColumn,mx.core.mx_internal,org.apache.royale.core.IBead,org.apache.royale.core.IDataGridModel,org.apache.royale.core.IDataGridPresentationModel,org.apache.royale.core.ValuesManager,org.apache.royale.utils.Language,XML*/

goog.require('mx.controls.listClasses.ListBase');
goog.require('org.apache.royale.core.IDataGrid');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.controls.listClasses.ListBase}
 * @implements {org.apache.royale.core.IDataGrid}
 */
mx.controls.DataGrid = function() {
  mx.controls.DataGrid.base(this, 'constructor');
  this.typeNames = "DataGrid";
};
goog.inherits(mx.controls.DataGrid, mx.controls.listClasses.ListBase);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.controls.DataGrid', mx.controls.DataGrid);


/**
 * @private
 * @type {org.apache.royale.core.IDataGridPresentationModel}
 */
mx.controls.DataGrid.prototype.mx_controls_DataGrid__presentationModel;


mx.controls.DataGrid.prototype.get__columns = function() {
  return org.apache.royale.utils.Language.as(this.model, org.apache.royale.core.IDataGridModel, true).columns;
};


mx.controls.DataGrid.prototype.set__columns = function(value) {
  this.model.columns = value;
  var foreachiter0_target = value;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var col = foreachiter0_target[foreachiter0];
  {
    col.http_$$www_adobe_com$2006$flex$mx$internal__owner = this;
  }}
  
};


mx.controls.DataGrid.prototype.get__presentationModel = function() {
  if (this.mx_controls_DataGrid__presentationModel == null) {
    var /** @type {Object} */ c = org.apache.royale.core.ValuesManager["valuesImpl"].getValue(this, "iDataGridPresentationModel");
    if (c) {
      this.mx_controls_DataGrid__presentationModel = new c();
      this.addBead(this.mx_controls_DataGrid__presentationModel);
    }
  }
  return this.mx_controls_DataGrid__presentationModel;
};


mx.controls.DataGrid.prototype.set__presentationModel = function(value) {
  this.mx_controls_DataGrid__presentationModel = value;
};


Object.defineProperties(mx.controls.DataGrid.prototype, /** @lends {mx.controls.DataGrid.prototype} */ {
/**
  * @export
  * @type {Array} */
columns: {
get: mx.controls.DataGrid.prototype.get__columns,
set: mx.controls.DataGrid.prototype.set__columns},
/**
  * @export
  * @type {org.apache.royale.core.IBead} */
presentationModel: {
get: mx.controls.DataGrid.prototype.get__presentationModel,
set: mx.controls.DataGrid.prototype.set__presentationModel}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.controls.DataGrid.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DataGrid', qName: 'mx.controls.DataGrid', kind: 'class' }], interfaces: [org.apache.royale.core.IDataGrid] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.controls.DataGrid.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'columns': { type: 'Array', access: 'readwrite', declaredBy: 'mx.controls.DataGrid', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'columnsChanged' } ] } ]; }},
        'presentationModel': { type: 'org.apache.royale.core.IBead', access: 'readwrite', declaredBy: 'mx.controls.DataGrid'}
      };
    },
    methods: function () {
      return {
        'DataGrid': { type: '', declaredBy: 'mx.controls.DataGrid'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.controls.DataGrid.prototype.ROYALE_COMPILE_FLAGS = 26;
