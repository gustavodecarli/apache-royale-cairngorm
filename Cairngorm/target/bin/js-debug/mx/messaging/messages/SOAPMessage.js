/**
 * Generated by Apache Royale Compiler from mx/messaging/messages/SOAPMessage.as
 * mx.messaging.messages.SOAPMessage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.messages.SOAPMessage');
/* Royale Dependency List: XML*/

goog.require('mx.messaging.messages.HTTPRequestMessage');



/**
 *  Constructs an uninitialized SOAPMessage.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @constructor
 * @extends {mx.messaging.messages.HTTPRequestMessage}
 */
mx.messaging.messages.SOAPMessage = function() {
  mx.messaging.messages.SOAPMessage.base(this, 'constructor');
  this.method = "POST";
  this.contentType = mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_SOAP_XML;
};
goog.inherits(mx.messaging.messages.SOAPMessage, mx.messaging.messages.HTTPRequestMessage);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.messages.SOAPMessage', mx.messaging.messages.SOAPMessage);


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.SOAPMessage.SOAP_ACTION_HEADER = "SOAPAction";


/**
 *  Provides access to the name of the remote method/operation that
 *  will be called.
 *
 *  @asreturn Returns the name of the remote method/operation that 
 *  will be called.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @return {string}
 */
mx.messaging.messages.SOAPMessage.prototype.getSOAPAction = function() {
  return org.apache.royale.utils.Language.string((this.httpHeaders != null) ? this.httpHeaders[mx.messaging.messages.SOAPMessage.SOAP_ACTION_HEADER] : null);
};


/**
 *  @asprivate
 * @export
 * @param {string} value
 */
mx.messaging.messages.SOAPMessage.prototype.setSOAPAction = function(value) {
  if (value != null) {
    if (value.indexOf('"') < 0) {
      var /** @type {string} */ str = '"';
      str += value;
      str += '"';
      value = str.toString();
    }
    if (this.httpHeaders == null)
      this.httpHeaders = {};
    this.httpHeaders[mx.messaging.messages.SOAPMessage.SOAP_ACTION_HEADER] = value;
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.messages.SOAPMessage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SOAPMessage', qName: 'mx.messaging.messages.SOAPMessage', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.messages.SOAPMessage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'SOAPMessage': { type: '', declaredBy: 'mx.messaging.messages.SOAPMessage'},
        'getSOAPAction': { type: 'String', declaredBy: 'mx.messaging.messages.SOAPMessage'},
        'setSOAPAction': { type: 'void', declaredBy: 'mx.messaging.messages.SOAPMessage', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.messages.SOAPMessage.prototype.ROYALE_COMPILE_FLAGS = 26;
