/**
 * Generated by Apache Royale Compiler from mx/managers/PopUpManager.as
 * mx.managers.PopUpManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.managers.PopUpManager');
/* Royale Dependency List: mx.core.IFlexDisplayObject,mx.core.IUIComponent,mx.core.UIComponent,mx.managers.PopUpManagerModal,org.apache.royale.core.IChild,org.apache.royale.core.IPopUpHost,org.apache.royale.core.IPopUpHostParent,org.apache.royale.core.IUIBase,org.apache.royale.utils.UIUtils,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
mx.managers.PopUpManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.managers.PopUpManager', mx.managers.PopUpManager);


/**
 *  Creates a top-level window and places it above other windows in the
 *  z-order.
 *  It is good practice to call the <code>removePopUp()</code> method 
 *  to remove popups created by using the <code>createPopUp()</code> method.
 *
 *  If the class implements IFocusManagerContainer, the window will have its
 *  own FocusManager so that, if the user uses the TAB key to navigate between
 *  controls, only the controls in the window will be accessed.
 *
 *  <p><b>Example</b></p> 
 *
 *  <pre>pop = mx.managers.PopUpManager.createPopUp(pnl, TitleWindow, false); </pre>
 *  
 *  <p>Creates a popup window based on the TitleWindow class, using <code>pnl</code> as the MovieClip 
 *  for determining where to place the popup. It is defined to be a non-modal window 
 *  meaning that other windows can receive mouse events</p>
 *
 *  @asparam parent DisplayObject to be used for determining which SystemManager's layers
 *  to use and optionally the reference point for centering the new
 *  top level window.  It may not be the actual parent of the popup as all popups
 *  are parented by the SystemManager.
 * 
 *  @asparam className Class of object that is to be created for the popup.
 *  The class must implement IFlexDisplayObject.
 *
 *  @asparam modal If <code>true</code>, the window is modal which means that
 *  the user will not be able to interact with other popups until the window
 *  is removed.
 *
 *  @asparam childList The child list in which to add the popup.
 *  One of <code>PopUpManagerChildList.APPLICATION</code>, 
 *  <code>PopUpManagerChildList.POPUP</code>, 
 *  or <code>PopUpManagerChildList.PARENT</code> (default).
 *
 *  @asparam moduleFactory The moduleFactory where this pop-up should look for
 *  its embedded fonts and style manager.
 *
 *  @asreturn Reference to new top-level window.
 *
 *  @see PopUpManagerChildList
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} parent
 * @param {Object} className
 * @param {boolean=} modal
 * @param {string=} childList
 * @param {Object=} moduleFactory
 * @return {Object}
 */
mx.managers.PopUpManager.createPopUp = function(parent, className, modal, childList, moduleFactory) {
  modal = typeof modal !== 'undefined' ? modal : false;
  childList = typeof childList !== 'undefined' ? childList : null;
  moduleFactory = typeof moduleFactory !== 'undefined' ? moduleFactory : null;
  var /** @type {mx.core.IUIComponent} */ instance = org.apache.royale.utils.Language.as(new className(), mx.core.IUIComponent);
  mx.managers.PopUpManager.addPopUp(instance, parent, modal);
  return instance;
};


/**
 *  Pops up a top-level window.
 *  It is good practice to call <code>removePopUp()</code> to remove popups
 *  created by using the <code>addPopUp()</code> method.
 *  If the class implements IFocusManagerContainer, the window will have its
 *  own FocusManager so that, if the user uses the TAB key to navigate between
 *  controls, only the controls in the window will be accessed.
 *
 *  <p><b>Example</b></p> 
 *
 *  <pre>var tw:TitleWindow = new TitleWindow();
 *    tw.title = "My Title";
 *    mx.managers.PopUpManager.addPopUp(tw, pnl, false);</pre>
 *
 *  <p>Creates a popup window using the <code>tw</code> instance of the 
 *  TitleWindow class and <code>pnl</code> as the Sprite for determining
 *  where to place the popup.
 *  It is defined to be a non-modal window.</p>
 *  
 *  @asparam window The IFlexDisplayObject to be popped up.
 *
 *  @asparam parent DisplayObject to be used for determining which SystemManager's layers
 *  to use and optionally  the reference point for centering the new
 *  top level window.  It may not be the actual parent of the popup as all popups
 *  are parented by the SystemManager.
 *
 *  @asparam modal If <code>true</code>, the window is modal which means that
 *  the user will not be able to interact with other popups until the window
 *  is removed.
 *
 *  @asparam childList The child list in which to add the pop-up.
 *  One of <code>PopUpManagerChildList.APPLICATION</code>, 
 *  <code>PopUpManagerChildList.POPUP</code>, 
 *  or <code>PopUpManagerChildList.PARENT</code> (default).
 *
 *  @asparam moduleFactory The moduleFactory where this pop-up should look for
 *  its embedded fonts and style manager.
 * 
 *  @see PopUpManagerChildList
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IFlexDisplayObject} window
 * @param {Object} parent
 * @param {boolean=} modal
 * @param {string=} childList
 * @param {Object=} moduleFactory
 */
mx.managers.PopUpManager.addPopUp = function(window, parent, modal, childList, moduleFactory) {
  modal = typeof modal !== 'undefined' ? modal : false;
  childList = typeof childList !== 'undefined' ? childList : null;
  moduleFactory = typeof moduleFactory !== 'undefined' ? moduleFactory : null;
  var /** @type {org.apache.royale.core.IPopUpHost} */ popUpHost = org.apache.royale.utils.UIUtils.findPopUpHost(org.apache.royale.utils.Language.as(parent, org.apache.royale.core.IUIBase));
  if (modal) {
    mx.managers.PopUpManagerModal.show(org.apache.royale.utils.Language.as(popUpHost, org.apache.royale.core.IUIBase));
    mx.managers.PopUpManager.modalWindows.push(window);
  }
  if (org.apache.royale.utils.Language.is(popUpHost, mx.core.UIComponent))
    org.apache.royale.utils.Language.as(window, mx.core.UIComponent).systemManager = org.apache.royale.utils.Language.as(popUpHost, mx.core.UIComponent).systemManager;
  popUpHost.popUpParent.addElement(org.apache.royale.utils.Language.as(window, mx.core.IUIComponent));
};


/**
 *  Centers a popup window over whatever window was used in the call 
 *  to the <code>createPopUp()</code> or <code>addPopUp()</code> method.
 *
 *  <p>Note that the position of the popup window may not
 *  change immediately after this call since Flex may wait to measure and layout the
 *  popup window before centering it.</p>
 *
 *  @asparam The IFlexDisplayObject representing the popup.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IFlexDisplayObject} popUp
 */
mx.managers.PopUpManager.centerPopUp = function(popUp) {
  org.apache.royale.utils.UIUtils.center(org.apache.royale.utils.Language.as(popUp, org.apache.royale.core.IUIBase), org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(popUp.parent, org.apache.royale.core.IPopUpHostParent).popUpHost, org.apache.royale.core.IUIBase));
};


/**
 * @private
 * @type {Array}
 */
mx.managers.PopUpManager.modalWindows = [];


/**
 *  Removes a popup window popped up by 
 *  the <code>createPopUp()</code> or <code>addPopUp()</code> method.
 *  
 *  @asparam window The IFlexDisplayObject representing the popup window.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IFlexDisplayObject} popUp
 */
mx.managers.PopUpManager.removePopUp = function(popUp) {
  var /** @type {org.apache.royale.core.IUIBase} */ popUpHost = org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(popUp.parent, org.apache.royale.core.IPopUpHostParent).popUpHost, org.apache.royale.core.IUIBase);
  org.apache.royale.utils.UIUtils.removePopUp(org.apache.royale.utils.Language.as(popUp, org.apache.royale.core.IChild));
  if (mx.managers.PopUpManager.modalWindows.length > 0 && mx.managers.PopUpManager.modalWindows[mx.managers.PopUpManager.modalWindows.length - 1] == popUp)
    mx.managers.PopUpManagerModal.remove(popUpHost);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.managers.PopUpManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PopUpManager', qName: 'mx.managers.PopUpManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.managers.PopUpManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|createPopUp': { type: 'Object', declaredBy: 'mx.managers.PopUpManager', parameters: function () { return [ 'Object', false ,'Class', false ,'Boolean', true ,'String', true ,'Object', true ]; }},
        '|addPopUp': { type: 'void', declaredBy: 'mx.managers.PopUpManager', parameters: function () { return [ 'mx.core.IFlexDisplayObject', false ,'Object', false ,'Boolean', true ,'String', true ,'Object', true ]; }},
        '|centerPopUp': { type: 'void', declaredBy: 'mx.managers.PopUpManager', parameters: function () { return [ 'mx.core.IFlexDisplayObject', false ]; }},
        '|removePopUp': { type: 'void', declaredBy: 'mx.managers.PopUpManager', parameters: function () { return [ 'mx.core.IFlexDisplayObject', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.managers.PopUpManager.prototype.ROYALE_COMPILE_FLAGS = 26;
