/**
 * Generated by Apache Royale Compiler from mx/utils/Base64Decoder.as
 * mx.utils.Base64Decoder
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.utils.Base64Decoder');
/* Royale Dependency List: mx.utils.ByteArray,org.apache.royale.utils.Base64,org.apache.royale.utils.BinaryData,XML*/




/**
 * Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.4
 * @constructor
 */
mx.utils.Base64Decoder = function() {
  ;
  
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.utils.Base64Decoder', mx.utils.Base64Decoder);


/**
 * Decodes a Base64 encoded String and adds the result to an internal
 * buffer. Strings must be in ASCII format. 
 * 
 * <p>Subsequent calls to this method add on to the internal
 * buffer. After all data have been encoded, call <code>toByteArray()</code>
 * to obtain a decoded <code>flash.utils.ByteArray</code>.</p>
 * 
 * @asparam encoded The Base64 encoded String to decode.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.4
 * @export
 * @param {string} data
 * @return {string}
 */
mx.utils.Base64Decoder.prototype.decode = function(data) {
  var /** @type {org.apache.royale.utils.BinaryData} */ bytes = org.apache.royale.utils.Base64.decode(data);
  bytes.readUTFBytes((bytes.length) >>> 0);
  this.mx_utils_Base64Decoder_decodedString = bytes.readUTFBytes((bytes.length) >>> 0);
  return this.mx_utils_Base64Decoder_decodedString;
};


/**
 * @export
 * @return {mx.utils.ByteArray}
 */
mx.utils.Base64Decoder.prototype.drain = function() {
  var /** @type {mx.utils.ByteArray} */ result = new mx.utils.ByteArray();
  
  result.writeUTFBytes(this.mx_utils_Base64Decoder_decodedString);
  return result;
};


/**
 * @export
 * @return {mx.utils.ByteArray}
 */
mx.utils.Base64Decoder.prototype.flush = function() {
  return this.drain();
};


/**
 * Clears all buffers and resets the decoder to its initial state.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.4
 * @export
 */
mx.utils.Base64Decoder.prototype.reset = function() {
  this.mx_utils_Base64Decoder_decodedString = "";
  
};


/**
 * Returns the current buffer as a decoded <code>flash.utils.ByteArray</code>.
 * Note that calling this method also clears the buffer and resets the 
 * decoder to its initial state.
 * 
 * @asreturn The decoded <code>flash.utils.ByteArray</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.4
 * @export
 * @return {mx.utils.ByteArray}
 */
mx.utils.Base64Decoder.prototype.toByteArray = function() {
  var /** @type {mx.utils.ByteArray} */ result = this.flush();
  this.reset();
  return result;
};


/**
 * @private
 * @type {string}
 */
mx.utils.Base64Decoder.prototype.mx_utils_Base64Decoder_decodedString;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.utils.Base64Decoder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Base64Decoder', qName: 'mx.utils.Base64Decoder', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.utils.Base64Decoder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'Base64Decoder': { type: '', declaredBy: 'mx.utils.Base64Decoder'},
        'decode': { type: 'String', declaredBy: 'mx.utils.Base64Decoder', parameters: function () { return [ 'String', false ]; }},
        'drain': { type: 'mx.utils.ByteArray', declaredBy: 'mx.utils.Base64Decoder'},
        'flush': { type: 'mx.utils.ByteArray', declaredBy: 'mx.utils.Base64Decoder'},
        'reset': { type: 'void', declaredBy: 'mx.utils.Base64Decoder'},
        'toByteArray': { type: 'mx.utils.ByteArray', declaredBy: 'mx.utils.Base64Decoder'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.utils.Base64Decoder.prototype.ROYALE_COMPILE_FLAGS = 26;
