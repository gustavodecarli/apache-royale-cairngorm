/**
 * Generated by Apache Royale Compiler from mx/utils/XMLUtil.as
 * mx.utils.XMLUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.utils.XMLUtil');
/* Royale Dependency List: QName,XML,XMLList,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
mx.utils.XMLUtil = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.utils.XMLUtil', mx.utils.XMLUtil);


/**
 *  Returns <code>true</code> if the two QName parameters have identical
 *  <code>uri</code> and <code>localName</code> properties.
 *
 *  @asparam qname1 First QName object.
 *
 *  @asparam qname2 Second QName object.
 *
 *  @asreturn <code>true</code> if the two QName parameters have identical
 *  <code>uri</code> and <code>localName</code> properties.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname1
 * @param {QName} qname2
 * @return {boolean}
 */
mx.utils.XMLUtil.qnamesEqual = function(qname1, qname2) {
  return qname1.uri == qname2.uri && qname1.localName == qname2.localName;
};


/**
 *  Returns the concatenation of a Qname object's
 *  <code>uri</code> and <code>localName</code> properties,
 *  separated by a colon.
 *  If the object does not have a <code>uri</code> property,
 *  or the value of <code>uri</code> is the empty string,
 *  returns the <code>localName</code> property.
 *
 *  @asparam qname QName object.
 *
 *  @asreturn Concatenation of a Qname object's
 *  <code>uri</code> and <code>localName</code> properties,
 *  separated by a colon.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname
 * @return {string}
 */
mx.utils.XMLUtil.qnameToString = function(qname) {
  return qname.uri && qname.uri != "" ? qname.uri + ":" + qname.localName : qname.localName;
};


/**
 * Returns the XML value of an attribute matching the given QName
 * 
 * @asparam xml the XML object being inspected
 * @asparam attrQName the QName of the attribute to find
 * 
 * @asreturn XMLList of matching attributes or an empty list if none are found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {XML} xml
 * @param {QName} attrQName
 * @return {XMLList}
 */
mx.utils.XMLUtil.getAttributeByQName = function(xml, attrQName) {
  var /** @type {XMLList} */ attributes = xml.attribute(XML.swfCompatibleQuery(attrQName));
  var foreachiter0_target = attributes;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var attribute = foreachiter0_target[foreachiter0];
  {
    var /** @type {QName} */ thisQName = org.apache.royale.utils.Language.as(attribute.name(), QName);
    if (thisQName.uri == attrQName.uri)
      return new XMLList(attribute);
  }}
  
  return new XMLList();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.utils.XMLUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'XMLUtil', qName: 'mx.utils.XMLUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.utils.XMLUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|qnamesEqual': { type: 'Boolean', declaredBy: 'mx.utils.XMLUtil', parameters: function () { return [ 'QName', false ,'QName', false ]; }},
        '|qnameToString': { type: 'String', declaredBy: 'mx.utils.XMLUtil', parameters: function () { return [ 'QName', false ]; }},
        '|getAttributeByQName': { type: 'XMLList', declaredBy: 'mx.utils.XMLUtil', parameters: function () { return [ 'XML', false ,'QName', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.utils.XMLUtil.prototype.ROYALE_COMPILE_FLAGS = 26;
