/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/types/DataSetType.as
 * mx.rpc.soap.types.DataSetType
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.types.DataSetType');
/* Royale Dependency List: QName,XML,XMLList,mx.rpc.soap.SOAPConstants,mx.rpc.soap.SOAPDecoder,mx.rpc.soap.SOAPEncoder,mx.rpc.xml.ContentProxy,mx.rpc.xml.Schema,mx.rpc.xml.SchemaConstants,mx.rpc.xml.TypeIterator,mx.utils.object_proxy,org.apache.royale.utils.Language*/

goog.require('mx.rpc.soap.types.ICustomSOAPType');



/**
 * @constructor
 * @implements {mx.rpc.soap.types.ICustomSOAPType}
 */
mx.rpc.soap.types.DataSetType = function() {
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.types.DataSetType', mx.rpc.soap.types.DataSetType);


/**
 * @export
 * @param {mx.rpc.soap.SOAPEncoder} encoder
 * @param {XML} parent
 * @param {QName} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.DataSetType.prototype.encode = function(encoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  throw new Error("Unsupported operation - .NET DataSet diffgrams cannot be sent from client.");
};


/**
 * Decode a response part that contains a serialized DataSet.
 * 
 * @asparam SOAPDecoder the decoder instance
 * @asparam * parent object (content proxy)
 * @asparam name ignored
 * @asparam value the top level XML node. Must have two child elements, schema and diffgram.
 * @asparam restriction ignored
 * 
 * @asprivate
 * @export
 * @param {mx.rpc.soap.SOAPDecoder} decoder
 * @param {*} parent
 * @param {*} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.DataSetType.prototype.decode = function(decoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (org.apache.royale.utils.Language.is(parent, mx.rpc.xml.ContentProxy))
    org.apache.royale.utils.Language.as(parent, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__isSimple = false;
  this.mx_rpc_soap_types_DataSetType_schemaConstants = decoder.schemaConstants;
  var /** @type {XML} */ schemaXML = XML.conversion(value).elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.schemaQName)[0];
  var /** @type {XML} */ rootDataXML = XML.conversion(value).elements(mx.rpc.soap.SOAPConstants.diffgramQName)[0].elements()[0];
  var /** @type {*} */ dataSet = parent;
  var /** @type {Object} */ tableDefinitions = this.mx_rpc_soap_types_DataSetType_processTables(schemaXML);
  var /** @type {*} */ tableCollection = decoder.createContent();
  if (org.apache.royale.utils.Language.is(tableCollection, mx.rpc.xml.ContentProxy))
    org.apache.royale.utils.Language.as(tableCollection, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__isSimple = false;
  for (var /** @type {string} */ tblName in tableDefinitions) {
    var /** @type {*} */ tableObj = decoder.createContent();
    if (org.apache.royale.utils.Language.is(tableObj, mx.rpc.xml.ContentProxy))
      org.apache.royale.utils.Language.as(tableObj, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__isSimple = false;
    decoder.setValue(tableObj, "Columns", this.mx_rpc_soap_types_DataSetType_processColumns(decoder, tableDefinitions[tblName]));
    decoder.setValue(tableObj, "Rows", decoder.createIterableValue());
    decoder.setValue(tableCollection, tblName, tableObj);
  }
  if (rootDataXML != null) {
    var /** @type {mx.rpc.xml.Schema} */ schema = new mx.rpc.xml.Schema(schemaXML);
    decoder.schemaManager.addSchema(schema, false);
    for (tblName in tableCollection) {
      var foreachiter0_target = rootDataXML.elements(tblName);
      for (var foreachiter0 in foreachiter0_target) 
      {
      var rowXML = foreachiter0_target[foreachiter0];
      {
        var /** @type {*} */ rowObj = decoder.decode(rowXML, org.apache.royale.utils.Language.as(rowXML.name(), QName), null, tableDefinitions[tblName]);
        mx.rpc.xml.TypeIterator.push(tableCollection[tblName]["Rows"], rowObj);
      }}
      
    }
    decoder.schemaManager.releaseScope();
  }
  decoder.setValue(dataSet, "Tables", tableCollection);
};


/**
 * Parse table information out of the inline schema
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {XML} schemaXML
 * @return {Object}
 */
mx.rpc.soap.types.DataSetType.prototype.mx_rpc_soap_types_DataSetType_processTables = function(schemaXML) {
  var /** @type {XMLList} */ tblsXMLList = schemaXML.elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.elementTypeQName)[0].elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.complexTypeQName)[0].elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.choiceQName)[0].elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.elementTypeQName);
  var /** @type {Object} */ tables = {};
  var foreachiter1_target = tblsXMLList;
  for (var foreachiter1 in foreachiter1_target.elementNames()) 
  {
  var tblXML = foreachiter1_target[foreachiter1];
  
    tables[tblXML.attribute("name")] = tblXML;}
  
  return tables;
};


/**
 * Parse column definitions out of a table definition
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {mx.rpc.soap.SOAPDecoder} decoder
 * @param {XML} tableXML
 * @return {*}
 */
mx.rpc.soap.types.DataSetType.prototype.mx_rpc_soap_types_DataSetType_processColumns = function(decoder, tableXML) {
  var /** @type {XMLList} */ colsXMLList = tableXML.elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.complexTypeQName)[0].elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.sequenceQName)[0].elements(this.mx_rpc_soap_types_DataSetType_schemaConstants.elementTypeQName);
  var /** @type {*} */ columns = decoder.createIterableValue();
  var foreachiter2_target = colsXMLList;
  for (var foreachiter2 in foreachiter2_target.elementNames()) 
  {
  var colXML = foreachiter2_target[foreachiter2];
  
    mx.rpc.xml.TypeIterator.push(columns, colXML.attribute("name").toString());}
  
  return columns;
};


/**
 * @private
 * @type {mx.rpc.xml.SchemaConstants}
 */
mx.rpc.soap.types.DataSetType.prototype.mx_rpc_soap_types_DataSetType_schemaConstants;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.types.DataSetType.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DataSetType', qName: 'mx.rpc.soap.types.DataSetType', kind: 'class' }], interfaces: [mx.rpc.soap.types.ICustomSOAPType] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.types.DataSetType.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'DataSetType': { type: '', declaredBy: 'mx.rpc.soap.types.DataSetType'},
        'encode': { type: 'void', declaredBy: 'mx.rpc.soap.types.DataSetType', parameters: function () { return [ 'mx.rpc.soap.SOAPEncoder', false ,'XML', false ,'QName', false ,'*', false ,'XML', true ]; }},
        'decode': { type: 'void', declaredBy: 'mx.rpc.soap.types.DataSetType', parameters: function () { return [ 'mx.rpc.soap.SOAPDecoder', false ,'*', false ,'*', false ,'*', false ,'XML', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.types.DataSetType.prototype.ROYALE_COMPILE_FLAGS = 26;
