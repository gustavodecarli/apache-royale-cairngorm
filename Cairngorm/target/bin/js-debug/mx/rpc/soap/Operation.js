/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/Operation.as
 * mx.rpc.soap.Operation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.Operation');
/* Royale Dependency List: QName,XML,mx.core.mx_internal,mx.logging.ILogger,mx.logging.Log,mx.messaging.messages.IMessage,mx.messaging.messages.SOAPMessage,mx.netmon.NetworkMonitor,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.rpc.AbstractService,mx.rpc.AsyncToken,mx.rpc.Fault,mx.rpc.events.FaultEvent,mx.rpc.events.HeaderEvent,mx.rpc.soap.AbstractWebService,mx.rpc.soap.ISOAPDecoder,mx.rpc.soap.ISOAPEncoder,mx.rpc.soap.SOAPDecoder,mx.rpc.soap.SOAPEncoder,mx.rpc.soap.SOAPHeader,mx.rpc.soap.SOAPResult,mx.rpc.wsdl.WSDLOperation,mx.utils.XMLUtil,org.apache.royale.utils.Language*/
goog.provide('mx.rpc.soap.Operation.OperationPendingCall');

goog.require('mx.rpc.AbstractOperation');



/**
 * Creates a new Operation. This is usually done directly by the MXML
 * compiler or automatically by the WebService when an unknown operation
 * has been accessed. It is not recommended that a developer use this
 * constructor directly.
 *
 * @asparam webService The web service upon which this Operation is invoked.
 *
 * @asparam name The name of this Operation.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.AbstractOperation}
 * @param {mx.rpc.AbstractService=} webService
 * @param {string=} name
 */
mx.rpc.soap.Operation = function(webService, name) {
  webService = typeof webService !== 'undefined' ? webService : null;
  name = typeof name !== 'undefined' ? name : null;
  
  this.mx_rpc_soap_Operation_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.rpc.soap.Operation.base(this, 'constructor', webService, name);
  this.mx_rpc_soap_Operation__resultFormat = "object";
  this.mx_rpc_soap_Operation__headerFormat = "e4x";
  this.mx_rpc_soap_Operation__headers = [];
  this.mx_rpc_soap_Operation_log = mx.logging.Log.getLogger("mx.rpc.soap.Operation");
  if (webService) {
    this.mx_rpc_soap_Operation_webService = org.apache.royale.utils.Language.as(webService, mx.rpc.soap.AbstractWebService, true);
    this.mx_rpc_soap_Operation_log.info("Creating SOAP Operation for {0}", name);
  }
  this.mx_rpc_soap_Operation_timeout = -1;
};
goog.inherits(mx.rpc.soap.Operation, mx.rpc.AbstractOperation);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.Operation', mx.rpc.soap.Operation);


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_resourceManager;


/**
 * @private
 * @type {Object}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__httpHeaders;


/**
 * @private
 * @type {Function}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__xmlSpecialCharsFilter;


/**
 * @type {boolean}
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__handleAxisSession;


/**
 * Adds a header that is applied only to this Operation. The header can be
 * provided in a pre-encoded form as an XML instance, or as a SOAPHeader
 * instance which leaves the encoding up to the internal SOAP encoder.
 * @asparam header The SOAP header to add to this Operation.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} header
 */
mx.rpc.soap.Operation.prototype.addHeader = function(header) {
  this.mx_rpc_soap_Operation__headers.push(header);
};


/**
 * Adds a header that is applied only to this Operation.
 * @asparam qnameLocal the localname for the header QName
 * @asparam qnameNamespace the namespace for header QName
 * @asparam headerName Name of the header.
 * @asparam headerValue Value of the header.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} qnameLocal
 * @param {string} qnameNamespace
 * @param {string} headerName
 * @param {string} headerValue
 */
mx.rpc.soap.Operation.prototype.addSimpleHeader = function(qnameLocal, qnameNamespace, headerName, headerValue) {
  var /** @type {Object} */ obj = {};
  obj[headerName] = headerValue;
  this.addHeader(new mx.rpc.soap.SOAPHeader(new QName(qnameNamespace, qnameLocal), obj));
};


/**
 * @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.soap.Operation.prototype.cancel = function(id) {
  id = typeof id !== 'undefined' ? id : null;
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__hasPendingInvocations()) {
    if (null == id) {
      return this.mx_rpc_soap_Operation_pendingInvocations.pop().token;
    }
    for (var /** @type {number} */ i = (this.mx_rpc_soap_Operation_pendingInvocations.length - 1) >> 0; i >= 0; i--) {
      if (this.mx_rpc_soap_Operation_pendingInvocations[i].token.message != null && this.mx_rpc_soap_Operation_pendingInvocations[i].token.message.messageId == id) {
        var /** @type {mx.rpc.soap.Operation.OperationPendingCall} */ pc = this.mx_rpc_soap_Operation_pendingInvocations.splice(i, 1)[0];
        return pc.token;
      }
    }
  }
  return mx.rpc.soap.Operation.superClass_.cancel.apply(this, [ id] );
};


/**
 * Clears the headers for this individual Operation.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.rpc.soap.Operation.prototype.clearHeaders = function() {
  this.mx_rpc_soap_Operation__headers.length = 0;
};


/**
 * Returns a header if a match is found based on QName localName and URI.
 * @asparam qname QName of the SOAPHeader.
 * @asparam headerName Name of a header in the SOAPHeader content (Optional)
 * @asreturn Returns the SOAPHeader.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname
 * @param {string=} headerName
 * @return {mx.rpc.soap.SOAPHeader}
 */
mx.rpc.soap.Operation.prototype.getHeader = function(qname, headerName) {
  headerName = typeof headerName !== 'undefined' ? headerName : null;
  var /** @type {number} */ length = (this.mx_rpc_soap_Operation__headers.length) >>> 0;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {mx.rpc.soap.SOAPHeader} */ header = org.apache.royale.utils.Language.as(this.mx_rpc_soap_Operation__headers[i], mx.rpc.soap.SOAPHeader, true);
    if (mx.utils.XMLUtil.qnamesEqual(header.qname, qname)) {
      if (headerName) {
        if (header.content && header.content[headerName]) {
          return header;
        }
      } else {
        return header;
      }
    }
  }
  return null;
};


/**
 * Removes the header with the given QName from all operations.
 * @asparam qname QName of the SOAPHeader.
 * @asparam headerName Name of a header in the SOAPHeader content (Optional)
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname
 * @param {string=} headerName
 */
mx.rpc.soap.Operation.prototype.removeHeader = function(qname, headerName) {
  headerName = typeof headerName !== 'undefined' ? headerName : null;
  var /** @type {number} */ length = (this.mx_rpc_soap_Operation__headers.length) >>> 0;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {mx.rpc.soap.SOAPHeader} */ header = org.apache.royale.utils.Language.as(this.mx_rpc_soap_Operation__headers[i], mx.rpc.soap.SOAPHeader, true);
    if (mx.utils.XMLUtil.qnamesEqual(header.qname, qname)) {
      if (headerName) {
        if (header.content && header.content[headerName]) {
          this.mx_rpc_soap_Operation__headers.splice(i, 1);
          return;
        }
      } else {
        this.mx_rpc_soap_Operation__headers.splice(i, 1);
        return;
      }
    }
  }
};


/**
 * @asprivate
 * @export
 * @override
 */
mx.rpc.soap.Operation.prototype.send = function(args) {
  args = Array.prototype.slice.call(arguments, 0);
  if (this.service != null)
    this.service.initialize();
  if (this.mx_rpc_soap_Operation_webService.convertParametersHandler != null)
    args = this.mx_rpc_soap_Operation_webService.convertParametersHandler(args);
  if (this.operationManager != null)
    return this.operationManager(args);
  var /** @type {Object} */ argsToPass = null;
  if (args && args.length > 0) {
    if ((args.length == 1) && org.apache.royale.utils.Language.is(args[0], XML)) {
      argsToPass = args[0];
    } else {
      argsToPass = args;
    }
  } else if (this.arguments) {
    argsToPass = this.arguments;
  }
  var /** @type {Array} */ combinedHeaders = [];
  if (this.mx_rpc_soap_Operation__headers) {
    combinedHeaders = combinedHeaders.concat(this.mx_rpc_soap_Operation__headers);
  }
  if (this.mx_rpc_soap_Operation_webService.headers) {
    combinedHeaders = combinedHeaders.concat(this.mx_rpc_soap_Operation_webService.headers);
  }
  var /** @type {mx.messaging.messages.SOAPMessage} */ message = new mx.messaging.messages.SOAPMessage();
  var /** @type {mx.rpc.AsyncToken} */ token = new mx.rpc.AsyncToken(message);
  var /** @type {mx.rpc.soap.Operation.OperationPendingCall} */ pc = new mx.rpc.soap.Operation.OperationPendingCall(argsToPass, combinedHeaders, token);
  if (this.mx_rpc_soap_Operation_webService.ready) {
    this.http_$$www_adobe_com$2006$flex$mx$internal__invokePendingCall(pc);
  } else {
    this.mx_rpc_soap_Operation_log.debug("Queueing SOAP operation {0}", this.name);
    if (!this.mx_rpc_soap_Operation_pendingInvocations) {
      this.mx_rpc_soap_Operation_pendingInvocations = [];
    }
    this.mx_rpc_soap_Operation_pendingInvocations.push(pc);
  }
  return pc.token;
};


/**
 * @asprivate
 * @export
 * @return {boolean}
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__hasPendingInvocations = function() {
  return this.mx_rpc_soap_Operation_pendingInvocations != null && this.mx_rpc_soap_Operation_pendingInvocations.length > 0;
};


/**
 * @asprivate
 * @export
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__invokeAllPending = function() {
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__hasPendingInvocations()) {
    for (var /** @type {number} */ i = 0; i < this.mx_rpc_soap_Operation_pendingInvocations.length; ++i) {
      this.http_$$www_adobe_com$2006$flex$mx$internal__invokePendingCall(this.mx_rpc_soap_Operation_pendingInvocations[i]);
    }
    this.mx_rpc_soap_Operation_pendingInvocations = null;
  }
};


/**
 * We now SOAP encode the pending call and send the request.
 * 
 * @asprivate
 * @export
 * @param {mx.rpc.soap.Operation.OperationPendingCall} pc
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__invokePendingCall = function(pc) {
  this.mx_rpc_soap_Operation_log.debug("Invoking SOAP operation {0}", this.name);
  this.mx_rpc_soap_Operation_startTime = new Date();
  var /** @type {mx.messaging.messages.SOAPMessage} */ message = org.apache.royale.utils.Language.as(pc.token.message, mx.messaging.messages.SOAPMessage, true);
  var /** @type {XML} */ soap;
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__wsdlOperation == null) {
    this.mx_rpc_soap_Operation_log.debug("No operation found {0}", this.name);
    this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(this.createFaultEvent("Client.NoSuchMethod", "Couldn't find method '" + this.name + "' in service."));
    return;
  }
  try {
    soap = this.encoder.encodeRequest(pc.args, pc.headers);
  } catch (obj) {
    if (org.apache.royale.utils.Language.is(obj, mx.rpc.Fault)) {
      var /** @type {mx.rpc.Fault} */ fault = org.apache.royale.utils.Language.as(obj, mx.rpc.Fault);
      this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(mx.rpc.events.FaultEvent.createEvent(fault));
      return;
    } else if (org.apache.royale.utils.Language.is(obj, Error)) {
      var /** @type {Error} */ error = org.apache.royale.utils.Language.as(obj, Error);
      var /** @type {string} */ errorMsg = error.message ? error.message : "";
      var /** @type {mx.rpc.Fault} */ fault2 = new mx.rpc.Fault("EncodingError", errorMsg);
      var /** @type {mx.rpc.events.FaultEvent} */ faultEvent = mx.rpc.events.FaultEvent.createEvent(fault2);
      this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(faultEvent);
      return;
    }
    throw obj;
  }
  message.httpHeaders = this.httpHeaders;
  if (message.getSOAPAction() == null)
    message.setSOAPAction(this.http_$$www_adobe_com$2006$flex$mx$internal__wsdlOperation.soapAction);
  message.body = soap.toXMLString();
  message.url = this.endpointURI;
  if (mx.netmon.NetworkMonitor.isMonitoring()) {
    message.recordHeaders = true;
  }
  this.http_$$www_adobe_com$2006$flex$mx$internal__invoke(message, pc.token);
};


/**
 * We intercept faults as the SOAP response content may still been present
 * in the message body.
 *
 * @asprivate
 * @export
 * @override
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__processFault = function(message, token) {
  var /** @type {boolean} */ dispatchFaultEvent = true;
  if (message != null && message.body != null) {
    dispatchFaultEvent = this.http_$$www_adobe_com$2006$flex$mx$internal__processSOAP(message, token);
  }
  return dispatchFaultEvent;
};


/**
 * We decode the SOAP encoded response and update the result and response
 * headers (if any).
 * 
 * @asprivate
 * @export
 * @override
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__processResult = function(message, token) {
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__processSOAP(message, token)) {
    if (this.mx_rpc_soap_Operation_webService.convertResultHandler != null)
      this.http_$$www_adobe_com$2006$flex$mx$internal___result = this.mx_rpc_soap_Operation_webService.convertResultHandler(this.http_$$www_adobe_com$2006$flex$mx$internal___result, this);
    return true;
  }
  return false;
};


/**
 * @asprivate
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.rpc.AsyncToken} token
 * @return {boolean}
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__processSOAP = function(message, token) {
  var /** @type {Object} */ body = message.body;
  var /** @type {boolean} */ eventDispatchRequired = true;
  try {
    var /** @type {string} */ stringResult = String(body);
    this.decoder.resultFormat = this.resultFormat;
    this.decoder.headerFormat = this.headerFormat;
    this.decoder.multiplePartsFormat = this.multiplePartsFormat;
    this.decoder.forcePartArrays = this.forcePartArrays;
    var /** @type {mx.rpc.soap.SOAPResult} */ soapResult = this.decoder.decodeResponse(stringResult);
    this.http_$$www_adobe_com$2006$flex$mx$internal___result = null;
    this.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders = soapResult.headers;
    eventDispatchRequired = this.processHeaders(this.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders, token, message);
    if (soapResult.isFault) {
      var /** @type {Array} */ faults = org.apache.royale.utils.Language.as(soapResult.result, Array);
      var foreachiter0_target = faults;
      for (var foreachiter0 in foreachiter0_target) 
      {
      var soapFault = foreachiter0_target[foreachiter0];
      {
        soapFault.content = body;
        this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(mx.rpc.events.FaultEvent.createEvent(soapFault, token, message));
      }}
      
      eventDispatchRequired = false;
    }
    if (eventDispatchRequired)
      this.http_$$www_adobe_com$2006$flex$mx$internal___result = soapResult.result;
  } catch (obj) {
    if (org.apache.royale.utils.Language.is(obj, mx.rpc.Fault)) {
      var /** @type {mx.rpc.Fault} */ fault = org.apache.royale.utils.Language.as(obj, mx.rpc.Fault);
      fault.content = body;
      this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(mx.rpc.events.FaultEvent.createEvent(fault, token, message));
      eventDispatchRequired = false;
    } else if (org.apache.royale.utils.Language.is(obj, Error)) {
      var /** @type {Error} */ error = org.apache.royale.utils.Language.as(obj, Error);
      var /** @type {string} */ errorMsg = error.message != null ? error.message : "";
      var /** @type {mx.rpc.Fault} */ fault2 = new mx.rpc.Fault("DecodingError", errorMsg);
      fault2.content = body;
      var /** @type {mx.rpc.events.FaultEvent} */ faultEvent = mx.rpc.events.FaultEvent.createEvent(fault2, token, message);
      this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(faultEvent);
      eventDispatchRequired = false;
    }
    else
      throw obj;
  }
  return eventDispatchRequired;
};


/**
 * Checks SOAP response headers and enforces any mustUnderstand attributes
 * by checking that a listener exists for the "header" event. If we're
 * honoring Axis sessions then we also look out for for the sessionID
 * header and add it to the Operation's corresponding service for
 * subsequent invocations. Finally, the header is dispatched as a
 * HeaderEvent. If no problems are encountered the method simply returns
 * true.
 * 
 * @asprivate
 * @export
 * @param {Array} responseHeaders
 * @param {mx.rpc.AsyncToken} token
 * @param {mx.messaging.messages.IMessage} message
 * @return {boolean}
 */
mx.rpc.soap.Operation.prototype.processHeaders = function(responseHeaders, token, message) {
  if (responseHeaders != null) {
    for (var /** @type {number} */ i = 0; i < responseHeaders.length; i++) {
      var /** @type {Object} */ header = responseHeaders[i];
      var /** @type {boolean} */ mustUnderstand;
      var /** @type {QName} */ headerQName;
      var /** @type {Object} */ headerContent;
      if (org.apache.royale.utils.Language.is(header, XML)) {
        var /** @type {XML} */ headerXML = org.apache.royale.utils.Language.as(header, XML);
        mustUnderstand = headerXML.attribute('mustUnderstand') == "1" ? true : false;
        headerQName = org.apache.royale.utils.Language.as(headerXML.name(), QName);
        if (headerXML.hasComplexContent())
          headerContent = headerXML.elements();
        else
          headerContent = headerXML.text();
      } else if (org.apache.royale.utils.Language.is(header, mx.rpc.soap.SOAPHeader)) {
        mustUnderstand = !!(header.mustUnderstand);
        headerQName = header.qname;
        headerContent = header.content;
      }
      if (headerQName != null) {
        if (mustUnderstand == true) {
          if (!this.hasEventListener(mx.rpc.events.HeaderEvent.HEADER) && !this.service.hasEventListener(mx.rpc.events.HeaderEvent.HEADER)) {
            var /** @type {string} */ msg = this.mx_rpc_soap_Operation_resourceManager.getString("rpc", "noListenerForHeader", [headerQName]);
            var /** @type {mx.rpc.Fault} */ fault = new mx.rpc.Fault("Client.MustUnderstand", msg);
            var /** @type {mx.rpc.events.FaultEvent} */ faultEvent = mx.rpc.events.FaultEvent.createEvent(fault, token, message);
            this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(faultEvent);
            return false;
          }
        }
        if (this.http_$$www_adobe_com$2006$flex$mx$internal__handleAxisSession) {
          if (headerQName != null && headerQName.localName == "sessionID" && headerQName.uri == "http://xml.apache.org/axis/session") {
            var /** @type {mx.rpc.soap.SOAPHeader} */ newHeader = new mx.rpc.soap.SOAPHeader(headerQName, headerContent);
            this.mx_rpc_soap_Operation_webService.addHeader(newHeader);
          }
        }
        var /** @type {mx.rpc.events.HeaderEvent} */ headerEvent = mx.rpc.events.HeaderEvent.createEvent(header, token, message);
        this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(headerEvent);
      }
    }
  }
  return true;
};


/**
 * @asprivate
 * @export
 * @override
 */
mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setService = function(value) {
  mx.rpc.soap.Operation.superClass_.http_$$www_adobe_com$2006$flex$mx$internal__setService.apply(this, [ value] );
  this.mx_rpc_soap_Operation_webService = org.apache.royale.utils.Language.as(value, mx.rpc.soap.AbstractWebService, true);
};


/**
 * @asprivate
 * @export
 * @param {string=} faultCode
 * @param {string=} faultString
 * @param {string=} faultDetail
 * @return {mx.rpc.events.FaultEvent}
 */
mx.rpc.soap.Operation.prototype.createFaultEvent = function(faultCode, faultString, faultDetail) {
  faultCode = typeof faultCode !== 'undefined' ? faultCode : null;
  faultString = typeof faultString !== 'undefined' ? faultString : null;
  faultDetail = typeof faultDetail !== 'undefined' ? faultDetail : null;
  var /** @type {mx.rpc.Fault} */ fault = new mx.rpc.Fault(faultCode, faultString, faultDetail);
  var /** @type {mx.rpc.events.FaultEvent} */ faultEvent = mx.rpc.events.FaultEvent.createEvent(fault);
  return faultEvent;
};


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__endpointURI;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__forcePartArrays = false;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__headerFormat;


/**
 * @private
 * @type {Array}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__headers;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__resultFormat;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__makeObjectsBindableSet;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__multiplePartsFormat;


/**
 * @private
 * @type {mx.rpc.soap.ISOAPDecoder}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__decoder;


/**
 * @private
 * @type {mx.rpc.soap.ISOAPEncoder}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__encoder;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation__ignoreWhitespace = true;


/**
 * @private
 * @type {mx.logging.ILogger}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_log;


/**
 * @private
 * @type {Array}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_pendingInvocations;


/**
 * @private
 * @type {Date}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_startTime;


/**
 * @private
 * @type {number}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_timeout = 0;


/**
 * @private
 * @type {mx.rpc.soap.AbstractWebService}
 */
mx.rpc.soap.Operation.prototype.mx_rpc_soap_Operation_webService;


/**
 * @export
 * @type {mx.rpc.wsdl.WSDLOperation}
 */
mx.rpc.soap.Operation.prototype._wsdlOperation;


mx.rpc.soap.Operation.prototype.get__decoder = function() {
  if (this.mx_rpc_soap_Operation__decoder == null) {
    this.mx_rpc_soap_Operation__decoder = new mx.rpc.soap.SOAPDecoder();
    this.mx_rpc_soap_Operation__decoder.makeObjectsBindable = this.makeObjectsBindable;
    this.mx_rpc_soap_Operation__decoder.ignoreWhitespace = this.ignoreWhitespace;
  }
  if (this.mx_rpc_soap_Operation__decoder.wsdlOperation == null)
    this.mx_rpc_soap_Operation__decoder.wsdlOperation = this.http_$$www_adobe_com$2006$flex$mx$internal__wsdlOperation;
  return this.mx_rpc_soap_Operation__decoder;
};


mx.rpc.soap.Operation.prototype.set__decoder = function(value) {
  this.mx_rpc_soap_Operation__decoder = value;
};


mx.rpc.soap.Operation.prototype.get__encoder = function() {
  if (this.mx_rpc_soap_Operation__encoder == null) {
    this.mx_rpc_soap_Operation__encoder = new mx.rpc.soap.SOAPEncoder();
    this.mx_rpc_soap_Operation__encoder.ignoreWhitespace = this.ignoreWhitespace;
  }
  if (this.mx_rpc_soap_Operation__encoder.wsdlOperation == null)
    this.mx_rpc_soap_Operation__encoder.wsdlOperation = this.http_$$www_adobe_com$2006$flex$mx$internal__wsdlOperation;
  this.mx_rpc_soap_Operation__encoder.xmlSpecialCharsFilter = this.xmlSpecialCharsFilter;
  return this.mx_rpc_soap_Operation__encoder;
};


mx.rpc.soap.Operation.prototype.set__encoder = function(value) {
  this.mx_rpc_soap_Operation__encoder = value;
};


mx.rpc.soap.Operation.prototype.get__endpointURI = function() {
  return this.mx_rpc_soap_Operation__endpointURI ? this.mx_rpc_soap_Operation__endpointURI : this.mx_rpc_soap_Operation_webService.endpointURI;
};


mx.rpc.soap.Operation.prototype.set__endpointURI = function(uri) {
  this.mx_rpc_soap_Operation__endpointURI = uri;
};


mx.rpc.soap.Operation.prototype.get__forcePartArrays = function() {
  return this.mx_rpc_soap_Operation__forcePartArrays;
};


mx.rpc.soap.Operation.prototype.set__forcePartArrays = function(value) {
  this.mx_rpc_soap_Operation__forcePartArrays = value;
};


mx.rpc.soap.Operation.prototype.get__headerFormat = function() {
  if (this.mx_rpc_soap_Operation__headerFormat == null)
    this.mx_rpc_soap_Operation__headerFormat = "e4x";
  return this.mx_rpc_soap_Operation__headerFormat;
};


mx.rpc.soap.Operation.prototype.set__headerFormat = function(hf) {
  if (hf != null)
    hf = hf.toLowerCase();
  this.mx_rpc_soap_Operation__headerFormat = hf;
};


mx.rpc.soap.Operation.prototype.get__headers = function() {
  return this.mx_rpc_soap_Operation__headers;
};


mx.rpc.soap.Operation.prototype.get__httpHeaders = function() {
  if (this.mx_rpc_soap_Operation__httpHeaders != null)
    return this.mx_rpc_soap_Operation__httpHeaders;
  return org.apache.royale.utils.Language.as(this.service, mx.rpc.soap.AbstractWebService, true).httpHeaders;
};


mx.rpc.soap.Operation.prototype.set__httpHeaders = function(value) {
  this.mx_rpc_soap_Operation__httpHeaders = value;
};


mx.rpc.soap.Operation.prototype.get__ignoreWhitespace = function() {
  return this.mx_rpc_soap_Operation__ignoreWhitespace;
};


mx.rpc.soap.Operation.prototype.set__ignoreWhitespace = function(value) {
  this.mx_rpc_soap_Operation__ignoreWhitespace = value;
  if (this.mx_rpc_soap_Operation__decoder != null)
    this.mx_rpc_soap_Operation__decoder.ignoreWhitespace = this.mx_rpc_soap_Operation__ignoreWhitespace;
  if (this.mx_rpc_soap_Operation__encoder != null)
    this.mx_rpc_soap_Operation__encoder.ignoreWhitespace = this.mx_rpc_soap_Operation__ignoreWhitespace;
};


mx.rpc.soap.Operation.prototype.get__makeObjectsBindable = function() {
  if (this.mx_rpc_soap_Operation__makeObjectsBindableSet) {
    return this.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable;
  }
  return org.apache.royale.utils.Language.as(this.service, mx.rpc.soap.AbstractWebService, true).makeObjectsBindable;
};


mx.rpc.soap.Operation.prototype.set__makeObjectsBindable = function(value) {
  this.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable = value;
  this.mx_rpc_soap_Operation__makeObjectsBindableSet = true;
  if (this.mx_rpc_soap_Operation__decoder != null)
    this.mx_rpc_soap_Operation__decoder.makeObjectsBindable = value;
};


mx.rpc.soap.Operation.prototype.get__multiplePartsFormat = function() {
  if (this.mx_rpc_soap_Operation__multiplePartsFormat == null) {
    if (this._wsdlOperation != null && this._wsdlOperation.style == "rpc")
      this.mx_rpc_soap_Operation__multiplePartsFormat = "array";
    else
      this.mx_rpc_soap_Operation__multiplePartsFormat = "object";
  }
  return this.mx_rpc_soap_Operation__multiplePartsFormat;
};


mx.rpc.soap.Operation.prototype.set__multiplePartsFormat = function(value) {
  if (value != null)
    value = value.toLowerCase();
  this.mx_rpc_soap_Operation__multiplePartsFormat = value;
};


mx.rpc.soap.Operation.prototype.get__request = function() {
  return this.arguments;
};


mx.rpc.soap.Operation.prototype.set__request = function(r) {
  this.arguments = r;
};


mx.rpc.soap.Operation.prototype.get__resultFormat = function() {
  if (this.mx_rpc_soap_Operation__resultFormat == null)
    this.mx_rpc_soap_Operation__resultFormat = "object";
  return this.mx_rpc_soap_Operation__resultFormat;
};


mx.rpc.soap.Operation.prototype.set__resultFormat = function(rf) {
  if (rf != null)
    rf = rf.toLowerCase();
  this.mx_rpc_soap_Operation__resultFormat = rf;
};


mx.rpc.soap.Operation.prototype.get__resultHeaders = function() {
  return this.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders;
};


mx.rpc.soap.Operation.prototype.get__xmlSpecialCharsFilter = function() {
  if (this.mx_rpc_soap_Operation__xmlSpecialCharsFilter != null)
    return this.mx_rpc_soap_Operation__xmlSpecialCharsFilter;
  return org.apache.royale.utils.Language.as(this.service, mx.rpc.soap.AbstractWebService, true).xmlSpecialCharsFilter;
};


mx.rpc.soap.Operation.prototype.set__xmlSpecialCharsFilter = function(func) {
  this.mx_rpc_soap_Operation__xmlSpecialCharsFilter = func;
};


mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__wsdlOperation = function() {
  return this._wsdlOperation;
};


mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__wsdlOperation = function(value) {
  this._wsdlOperation = value;
};


Object.defineProperties(mx.rpc.soap.Operation.prototype, /** @lends {mx.rpc.soap.Operation.prototype} */ {
/**
  * @export
  * @type {mx.rpc.soap.ISOAPDecoder} */
decoder: {
get: mx.rpc.soap.Operation.prototype.get__decoder,
set: mx.rpc.soap.Operation.prototype.set__decoder},
/**
  * @export
  * @type {mx.rpc.soap.ISOAPEncoder} */
encoder: {
get: mx.rpc.soap.Operation.prototype.get__encoder,
set: mx.rpc.soap.Operation.prototype.set__encoder},
/**
  * @export
  * @type {string} */
endpointURI: {
get: mx.rpc.soap.Operation.prototype.get__endpointURI,
set: mx.rpc.soap.Operation.prototype.set__endpointURI},
/**
  * @export
  * @type {boolean} */
forcePartArrays: {
get: mx.rpc.soap.Operation.prototype.get__forcePartArrays,
set: mx.rpc.soap.Operation.prototype.set__forcePartArrays},
/**
  * @export
  * @type {string} */
headerFormat: {
get: mx.rpc.soap.Operation.prototype.get__headerFormat,
set: mx.rpc.soap.Operation.prototype.set__headerFormat},
/**
  * @export
  * @type {Array} */
headers: {
get: mx.rpc.soap.Operation.prototype.get__headers},
/**
  * @export
  * @type {Object} */
httpHeaders: {
get: mx.rpc.soap.Operation.prototype.get__httpHeaders,
set: mx.rpc.soap.Operation.prototype.set__httpHeaders},
/**
  * @export
  * @type {boolean} */
ignoreWhitespace: {
get: mx.rpc.soap.Operation.prototype.get__ignoreWhitespace,
set: mx.rpc.soap.Operation.prototype.set__ignoreWhitespace},
/**
  * @export
  * @type {boolean} */
makeObjectsBindable: {
get: mx.rpc.soap.Operation.prototype.get__makeObjectsBindable,
set: mx.rpc.soap.Operation.prototype.set__makeObjectsBindable},
/**
  * @export
  * @type {string} */
multiplePartsFormat: {
get: mx.rpc.soap.Operation.prototype.get__multiplePartsFormat,
set: mx.rpc.soap.Operation.prototype.set__multiplePartsFormat},
/**
  * @export
  * @type {Object} */
request: {
get: mx.rpc.soap.Operation.prototype.get__request,
set: mx.rpc.soap.Operation.prototype.set__request},
/**
  * @export
  * @type {string} */
resultFormat: {
get: mx.rpc.soap.Operation.prototype.get__resultFormat,
set: mx.rpc.soap.Operation.prototype.set__resultFormat},
/**
  * @export
  * @type {Array} */
resultHeaders: {
get: mx.rpc.soap.Operation.prototype.get__resultHeaders},
/**
  * @export
  * @type {Function} */
xmlSpecialCharsFilter: {
get: mx.rpc.soap.Operation.prototype.get__xmlSpecialCharsFilter,
set: mx.rpc.soap.Operation.prototype.set__xmlSpecialCharsFilter},
/**
  * @export
  * @type {mx.rpc.wsdl.WSDLOperation} */
http_$$www_adobe_com$2006$flex$mx$internal__wsdlOperation: {
get: mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__wsdlOperation,
set: mx.rpc.soap.Operation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__wsdlOperation}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.Operation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Operation', qName: 'mx.rpc.soap.Operation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.Operation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::handleAxisSession': { type: 'Boolean', get_set: function (/** mx.rpc.soap.Operation */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__handleAxisSession = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__handleAxisSession;}}
      };
    },
    accessors: function () {
      return {
        'decoder': { type: 'mx.rpc.soap.ISOAPDecoder', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'encoder': { type: 'mx.rpc.soap.ISOAPEncoder', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'endpointURI': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'forcePartArrays': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'headerFormat': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'headers': { type: 'Array', access: 'readonly', declaredBy: 'mx.rpc.soap.Operation'},
        'httpHeaders': { type: 'Object', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'ignoreWhitespace': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'makeObjectsBindable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'multiplePartsFormat': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'request': { type: 'Object', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'resultFormat': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'resultHeaders': { type: 'Array', access: 'readonly', declaredBy: 'mx.rpc.soap.Operation', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'resultForBinding' } ] } ]; }},
        'xmlSpecialCharsFilter': { type: 'Function', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'},
        'http://www.adobe.com/2006/flex/mx/internal::wsdlOperation': { type: 'mx.rpc.wsdl.WSDLOperation', access: 'readwrite', declaredBy: 'mx.rpc.soap.Operation'}
      };
    },
    methods: function () {
      return {
        'Operation': { type: '', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'mx.rpc.AbstractService', true ,'String', true ]; }},
        'addHeader': { type: 'void', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'Object', false ]; }},
        'addSimpleHeader': { type: 'void', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'String', false ,'String', false ,'String', false ,'String', false ]; }},
        'cancel': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'String', true ]; }},
        'clearHeaders': { type: 'void', declaredBy: 'mx.rpc.soap.Operation'},
        'getHeader': { type: 'mx.rpc.soap.SOAPHeader', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'QName', false ,'String', true ]; }},
        'removeHeader': { type: 'void', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'QName', false ,'String', true ]; }},
        'send': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'Array', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::hasPendingInvocations': { type: 'Boolean', declaredBy: 'mx.rpc.soap.Operation'},
        'http://www.adobe.com/2006/flex/mx/internal::invokeAllPending': { type: 'void', declaredBy: 'mx.rpc.soap.Operation'},
        'http://www.adobe.com/2006/flex/mx/internal::invokePendingCall': { type: 'void', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'OperationPendingCall', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::processFault': { type: 'Boolean', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::processResult': { type: 'Boolean', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::processSOAP': { type: 'Boolean', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::setService': { type: 'void', declaredBy: 'mx.rpc.soap.Operation', parameters: function () { return [ 'mx.rpc.AbstractService', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.Operation.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 * @constructor
 * @param {*} args
 * @param {Array} headers
 * @param {mx.rpc.AsyncToken} token
 */
mx.rpc.soap.Operation.OperationPendingCall = function(args, headers, token) {
  ;
  this.args = args;
  this.headers = headers;
  this.token = token;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.Operation.OperationPendingCall', mx.rpc.soap.Operation.OperationPendingCall);


/**
 * @export
 * @type {*}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.args;


/**
 * @export
 * @type {Array}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.headers;


/**
 * @export
 * @type {mx.rpc.AsyncToken}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.token;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'OperationPendingCall', qName: 'mx.rpc.soap.Operation.OperationPendingCall', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'args': { type: '*', get_set: function f(/** mx.rpc.soap.Operation.OperationPendingCall */ inst, /** * */ v) {return v !== f ? inst.args = v : inst.args;}},
        'headers': { type: 'Array', get_set: function (/** mx.rpc.soap.Operation.OperationPendingCall */ inst, /** * */ v) {return v !== undefined ? inst.headers = v : inst.headers;}},
        'token': { type: 'mx.rpc.AsyncToken', get_set: function (/** mx.rpc.soap.Operation.OperationPendingCall */ inst, /** * */ v) {return v !== undefined ? inst.token = v : inst.token;}}
      };
    },
    methods: function () {
      return {
        'OperationPendingCall': { type: '', declaredBy: 'mx.rpc.soap.Operation.OperationPendingCall', parameters: function () { return [ '*', false ,'Array', false ,'mx.rpc.AsyncToken', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.Operation.OperationPendingCall.prototype.ROYALE_COMPILE_FLAGS = 26;
