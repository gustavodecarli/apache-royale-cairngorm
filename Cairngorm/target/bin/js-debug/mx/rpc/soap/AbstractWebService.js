/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/AbstractWebService.as
 * mx.rpc.soap.AbstractWebService
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.AbstractWebService');
/* Royale Dependency List: QName,mx.core.mx_internal,mx.logging.ILogger,mx.logging.Log,mx.messaging.ChannelSet,mx.messaging.channels.DirectHTTPChannel,mx.messaging.config.LoaderConfig,mx.rpc.Fault,mx.rpc.events.FaultEvent,mx.rpc.soap.Operation,mx.rpc.soap.SOAPHeader,mx.utils.URLUtil,mx.utils.XMLUtil,org.apache.royale.utils.Language,XML*/

goog.require('mx.rpc.AbstractService');



/**
 * Creates a new WebService.  The destination, if specified, should match an
 * entry in services-config.xml.  If unspecified, the WebService uses the
 * DefaultHTTP destination. The <code>rootURL</code> is required if you
 * intend to use a relative URL find the WSDL document for this WebService.
 *
 *  @asparam destination The destination. It should match a destination name 
 *  in the services-config.xml file.
 *
 *  @asparam rootURL The URL that the WebService should use when computing relative URLs.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.AbstractService}
 * @param {string=} destination
 * @param {string=} rootURL
 */
mx.rpc.soap.AbstractWebService = function(destination, rootURL) {
  destination = typeof destination !== 'undefined' ? destination : null;
  rootURL = typeof rootURL !== 'undefined' ? rootURL : null;
  mx.rpc.soap.AbstractWebService.base(this, 'constructor', destination);
  this.mx_rpc_soap_AbstractWebService__useProxy = false;
  this.mx_rpc_soap_AbstractWebService__headers = [];
  this.mx_rpc_soap_AbstractWebService__log = mx.logging.Log.getLogger("mx.rpc.soap.AbstractWebService");
  if (destination == null) {
    if (mx.utils.URLUtil.isHttpsURL(mx.messaging.config.LoaderConfig["url"]))
      mx.rpc.soap.AbstractWebService.superClass_.set__destination.apply(this, [ mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTPS] );
    else
      mx.rpc.soap.AbstractWebService.superClass_.set__destination.apply(this, [ mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTP] );
    this.destinationSet = false;
  } else {
    this.destinationSet = true;
  }
  this.makeObjectsBindable = true;
  this._ready = true;
};
goog.inherits(mx.rpc.soap.AbstractWebService, mx.rpc.AbstractService);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.AbstractWebService', mx.rpc.soap.AbstractWebService);


/**
 * @private
 * @type {Object}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__httpHeaders;


/**
 * @private
 * @type {Function}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__xmlSpecialCharsFilter;


/**
 * @export
 * @type {Function}
 */
mx.rpc.soap.AbstractWebService.prototype.convertParametersHandler;


/**
 * @export
 * @type {Function}
 */
mx.rpc.soap.AbstractWebService.prototype.convertResultHandler;


/**
 * Adds a header that will be applied to all operations of this web service.
 * The header can be provided in a pre-encoded form as an XML instance, or
 * as a SOAPHeader instance which leaves the encoding up to the internal
 * SOAP encoder.
 *  
 * @asparam header The SOAP header to add to all operations.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} header
 */
mx.rpc.soap.AbstractWebService.prototype.addHeader = function(header) {
  this.mx_rpc_soap_AbstractWebService__headers.push(header);
};


/**
 * Add a header that will be applied to all operations of this WebService.
 *  
 * @asparam qnameLocal The localname for the header QName.
 * @asparam qnameNamespace The namespace for the header QName.
 * @asparam headerName The name of the header.
 * @asparam headerValue The value of the header.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} qnameLocal
 * @param {string} qnameNamespace
 * @param {string} headerName
 * @param {string} headerValue
 */
mx.rpc.soap.AbstractWebService.prototype.addSimpleHeader = function(qnameLocal, qnameNamespace, headerName, headerValue) {
  var /** @type {Object} */ obj = {};
  obj[headerName] = headerValue;
  this.addHeader(new mx.rpc.soap.SOAPHeader(new QName(qnameNamespace, qnameLocal), obj));
};


/**
 * Clears the headers that applied to all operations.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.rpc.soap.AbstractWebService.prototype.clearHeaders = function() {
  this.mx_rpc_soap_AbstractWebService__headers.length = 0;
};


/**
 * Returns a header if a match is found based on QName, localName, and URI.
 *  
 * @asparam qname QName of the SOAPHeader.
 * @asparam headerName (Optional) Name of a header in the SOAPHeader content.
 *
 * @asreturn Returns a header if a match is found based on QName, localName, and URI.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname
 * @param {string=} headerName
 * @return {mx.rpc.soap.SOAPHeader}
 */
mx.rpc.soap.AbstractWebService.prototype.getHeader = function(qname, headerName) {
  headerName = typeof headerName !== 'undefined' ? headerName : null;
  var /** @type {number} */ length = (this.mx_rpc_soap_AbstractWebService__headers.length) >>> 0;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {mx.rpc.soap.SOAPHeader} */ header = org.apache.royale.utils.Language.as(this.mx_rpc_soap_AbstractWebService__headers[i], mx.rpc.soap.SOAPHeader, true);
    if (mx.utils.XMLUtil.qnamesEqual(header.qname, qname)) {
      if (headerName) {
        if (header.content && header.content[headerName]) {
          return header;
        }
      } else {
        return header;
      }
    }
  }
  return null;
};


/**
 * Removes the header with the given QName from all operations.
 *  
 * @asparam qname QName of the SOAPHeader.
 * @asparam headerName (Optional) Name of a header in the SOAPHeader content.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} qname
 * @param {string=} headerName
 */
mx.rpc.soap.AbstractWebService.prototype.removeHeader = function(qname, headerName) {
  headerName = typeof headerName !== 'undefined' ? headerName : null;
  var /** @type {number} */ length = (this.mx_rpc_soap_AbstractWebService__headers.length) >>> 0;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {mx.rpc.soap.SOAPHeader} */ header = org.apache.royale.utils.Language.as(this.mx_rpc_soap_AbstractWebService__headers[i], mx.rpc.soap.SOAPHeader, true);
    if (mx.utils.XMLUtil.qnamesEqual(header.qname, qname)) {
      if (headerName) {
        if (header.content && header.content[headerName]) {
          this.mx_rpc_soap_AbstractWebService__headers.splice(i, 1);
          return;
        }
      } else {
        this.mx_rpc_soap_AbstractWebService__headers.splice(i, 1);
        return;
      }
    }
  }
};


/**
 * The username and password to authenticate a user when accessing
 * the webservice.  These will be passed as part of the HTTP Authorization
 * header from the proxy to the endpoint. If useProxy is false this property
 * will be ignored.
 *
 * @asparam remoteUsername The username to pass to the remote endpoint.
 * @asparam remotePassword The password to pass to the remote endpoint.
 * @asparam charset The character set encoding to use while encoding the
 * remote credentials. The default is null, which implies the legacy charset
 * of ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.soap.AbstractWebService.prototype.setRemoteCredentials = function(remoteUsername, remotePassword, charset) {
  charset = typeof charset !== 'undefined' ? charset : null;
  mx.rpc.soap.AbstractWebService.superClass_.setRemoteCredentials.apply(this, [ remoteUsername, remotePassword, charset] );
};


/**
 * Returns a JSESSIOND found in the URL.  This should be attached
 * to any communication back with the server where session state needs to
 * be preserved
 * @asprivate
 * @export
 * @return {string}
 */
mx.rpc.soap.AbstractWebService.http_$$www_adobe_com$2006$flex$mx$internal__findJSessionID = function() {
  var /** @type {string} */ jsessionid = null;
  var /** @type {Object} */ args = mx.messaging.config.LoaderConfig["parameters"];
  if (args) {
    var /** @type {Object} */ js = args.jsessionid;
    if (!js) {
      js = args.JSESSIONID;
      if (!js) {
        var /** @type {string} */ u = mx.messaging.config.LoaderConfig["url"];
        if (u) {
          var /** @type {number} */ ind = u.lastIndexOf(";");
          if (ind != -1) {
            var /** @type {Array} */ arr = u.substring(ind + 1).split("=");
            if (arr[0] == "jsessionid" || arr[0] == "JSESSIONID") {
              jsessionid = org.apache.royale.utils.Language.string(arr[1]);
            }
          }
        }
      } else {
        jsessionid = String(js);
      }
    } else {
      jsessionid = String(js);
    }
  }
  return jsessionid;
};


/**
 * @asprivate
 * @export
 * @return {mx.messaging.ChannelSet}
 */
mx.rpc.soap.AbstractWebService.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getDirectChannelSet = function() {
  if (mx.rpc.soap.AbstractWebService._directChannelSet == null) {
    var /** @type {mx.messaging.ChannelSet} */ dcs = new mx.messaging.ChannelSet();
    var /** @type {mx.messaging.channels.DirectHTTPChannel} */ dhc = new mx.messaging.channels.DirectHTTPChannel("direct_http_channel");
    dhc.requestTimeout = this.requestTimeout;
    dcs.addChannel(dhc);
    mx.rpc.soap.AbstractWebService._directChannelSet = dcs;
  }
  return mx.rpc.soap.AbstractWebService._directChannelSet;
};


/**
 * @asprivate
 * @export
 * @param {mx.rpc.Fault=} fault
 */
mx.rpc.soap.AbstractWebService.prototype.unEnqueueCalls = function(fault) {
  fault = typeof fault !== 'undefined' ? fault : null;
  var /** @type {mx.rpc.soap.Operation} */ op;
  for (var /** @type {string} */ opName in this.http_$$www_adobe_com$2006$flex$mx$internal___operations) {
    op = this.http_$$www_adobe_com$2006$flex$mx$internal___operations[opName];
    if (op.http_$$www_adobe_com$2006$flex$mx$internal__hasPendingInvocations()) {
      if (fault != null) {
        this.mx_rpc_soap_AbstractWebService__log.info("Faulting previously queued operation calls {0}", op.name);
        while (op.http_$$www_adobe_com$2006$flex$mx$internal__hasPendingInvocations()) {
          op.cancel();
          op.dispatchEvent(mx.rpc.events.FaultEvent.createEvent(fault));
        }
      } else {
        this.mx_rpc_soap_AbstractWebService__log.info("Invoking previously queued calls {0}", op.name);
        op.http_$$www_adobe_com$2006$flex$mx$internal__invokeAllPending();
      }
    }
  }
};


/**
 * @export
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype._endpointURI;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__description;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService_endpointOverride;


/**
 * @private
 * @type {Array}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__headers;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__makeObjectsBindable;


/**
 * @export
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype._port;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__rootURL;


/**
 * @export
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.prototype._service;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__useProxy;


/**
 * @export
 * @type {boolean}
 */
mx.rpc.soap.AbstractWebService.prototype.destinationSet;


/**
 * @export
 * @type {boolean}
 */
mx.rpc.soap.AbstractWebService.prototype._ready;


/**
 * @private
 * @type {mx.logging.ILogger}
 */
mx.rpc.soap.AbstractWebService.prototype.mx_rpc_soap_AbstractWebService__log;


/**
 * @private
 * @type {mx.messaging.ChannelSet}
 */
mx.rpc.soap.AbstractWebService._directChannelSet = null;


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTP = "DefaultHTTP";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.AbstractWebService.DEFAULT_DESTINATION_HTTPS = "DefaultHTTPS";


mx.rpc.soap.AbstractWebService.prototype.get__description = function() {
  return this.mx_rpc_soap_AbstractWebService__description;
};


mx.rpc.soap.AbstractWebService.prototype.set__description = function(value) {
  this.mx_rpc_soap_AbstractWebService__description = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__destination = function() {
  return mx.rpc.soap.AbstractWebService.superClass_.get__destination.apply(this);
};


mx.rpc.soap.AbstractWebService.prototype.set__destination = function(value) {
  mx.rpc.soap.AbstractWebService.superClass_.set__destination.apply(this, [ value] );
  this.useProxy = true;
  this.destinationSet = true;
};


mx.rpc.soap.AbstractWebService.prototype.get__endpointURI = function() {
  return this.mx_rpc_soap_AbstractWebService_endpointOverride ? this.mx_rpc_soap_AbstractWebService_endpointOverride : this._endpointURI;
};


mx.rpc.soap.AbstractWebService.prototype.set__endpointURI = function(value) {
  this.mx_rpc_soap_AbstractWebService_endpointOverride = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__headers = function() {
  return this.mx_rpc_soap_AbstractWebService__headers;
};


mx.rpc.soap.AbstractWebService.prototype.get__httpHeaders = function() {
  return this.mx_rpc_soap_AbstractWebService__httpHeaders;
};


mx.rpc.soap.AbstractWebService.prototype.set__httpHeaders = function(value) {
  this.mx_rpc_soap_AbstractWebService__httpHeaders = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__makeObjectsBindable = function() {
  return this.mx_rpc_soap_AbstractWebService__makeObjectsBindable;
};


mx.rpc.soap.AbstractWebService.prototype.set__makeObjectsBindable = function(value) {
  this.mx_rpc_soap_AbstractWebService__makeObjectsBindable = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__port = function() {
  return this._port;
};


mx.rpc.soap.AbstractWebService.prototype.set__port = function(value) {
  this._port = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__ready = function() {
  return this._ready;
};


mx.rpc.soap.AbstractWebService.prototype.get__rootURL = function() {
  if (this.mx_rpc_soap_AbstractWebService__rootURL == null) {
    this.mx_rpc_soap_AbstractWebService__rootURL = mx.messaging.config.LoaderConfig["url"];
  }
  return this.mx_rpc_soap_AbstractWebService__rootURL;
};


mx.rpc.soap.AbstractWebService.prototype.set__rootURL = function(value) {
  this.mx_rpc_soap_AbstractWebService__rootURL = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__service = function() {
  return this._service;
};


mx.rpc.soap.AbstractWebService.prototype.set__service = function(value) {
  this._service = value;
};


mx.rpc.soap.AbstractWebService.prototype.get__useProxy = function() {
  return this.mx_rpc_soap_AbstractWebService__useProxy;
};


mx.rpc.soap.AbstractWebService.prototype.set__useProxy = function(value) {
  if (value != this.mx_rpc_soap_AbstractWebService__useProxy) {
    this.mx_rpc_soap_AbstractWebService__useProxy = value;
    var /** @type {mx.messaging.ChannelSet} */ dcs = this.http_$$www_adobe_com$2006$flex$mx$internal__getDirectChannelSet();
    if (!this.useProxy) {
      if (dcs != this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.channelSet)
        this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.channelSet = dcs;
    } else {
      if (this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.channelSet == dcs)
        this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.channelSet = null;
    }
  }
};


mx.rpc.soap.AbstractWebService.prototype.get__xmlSpecialCharsFilter = function() {
  return this.mx_rpc_soap_AbstractWebService__xmlSpecialCharsFilter;
};


mx.rpc.soap.AbstractWebService.prototype.set__xmlSpecialCharsFilter = function(func) {
  this.mx_rpc_soap_AbstractWebService__xmlSpecialCharsFilter = func;
};


Object.defineProperties(mx.rpc.soap.AbstractWebService.prototype, /** @lends {mx.rpc.soap.AbstractWebService.prototype} */ {
/**
  * @export
  * @type {string} */
description: {
get: mx.rpc.soap.AbstractWebService.prototype.get__description,
set: mx.rpc.soap.AbstractWebService.prototype.set__description},
/**
  * @export
  * @type {string} */
destination: {
get: mx.rpc.soap.AbstractWebService.prototype.get__destination,
set: mx.rpc.soap.AbstractWebService.prototype.set__destination},
/**
  * @export
  * @type {string} */
endpointURI: {
get: mx.rpc.soap.AbstractWebService.prototype.get__endpointURI,
set: mx.rpc.soap.AbstractWebService.prototype.set__endpointURI},
/**
  * @export
  * @type {Array} */
headers: {
get: mx.rpc.soap.AbstractWebService.prototype.get__headers},
/**
  * @export
  * @type {Object} */
httpHeaders: {
get: mx.rpc.soap.AbstractWebService.prototype.get__httpHeaders,
set: mx.rpc.soap.AbstractWebService.prototype.set__httpHeaders},
/**
  * @export
  * @type {boolean} */
makeObjectsBindable: {
get: mx.rpc.soap.AbstractWebService.prototype.get__makeObjectsBindable,
set: mx.rpc.soap.AbstractWebService.prototype.set__makeObjectsBindable},
/**
  * @export
  * @type {string} */
port: {
get: mx.rpc.soap.AbstractWebService.prototype.get__port,
set: mx.rpc.soap.AbstractWebService.prototype.set__port},
/**
  * @export
  * @type {boolean} */
ready: {
get: mx.rpc.soap.AbstractWebService.prototype.get__ready},
/**
  * @export
  * @type {string} */
rootURL: {
get: mx.rpc.soap.AbstractWebService.prototype.get__rootURL,
set: mx.rpc.soap.AbstractWebService.prototype.set__rootURL},
/**
  * @export
  * @type {string} */
service: {
get: mx.rpc.soap.AbstractWebService.prototype.get__service,
set: mx.rpc.soap.AbstractWebService.prototype.set__service},
/**
  * @export
  * @type {boolean} */
useProxy: {
get: mx.rpc.soap.AbstractWebService.prototype.get__useProxy,
set: mx.rpc.soap.AbstractWebService.prototype.set__useProxy},
/**
  * @export
  * @type {Function} */
xmlSpecialCharsFilter: {
get: mx.rpc.soap.AbstractWebService.prototype.get__xmlSpecialCharsFilter,
set: mx.rpc.soap.AbstractWebService.prototype.set__xmlSpecialCharsFilter}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.AbstractWebService.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AbstractWebService', qName: 'mx.rpc.soap.AbstractWebService', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.AbstractWebService.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'convertParametersHandler': { type: 'Function', get_set: function (/** mx.rpc.soap.AbstractWebService */ inst, /** * */ v) {return v !== undefined ? inst.convertParametersHandler = v : inst.convertParametersHandler;}},
        'convertResultHandler': { type: 'Function', get_set: function (/** mx.rpc.soap.AbstractWebService */ inst, /** * */ v) {return v !== undefined ? inst.convertResultHandler = v : inst.convertResultHandler;}}
      };
    },
    accessors: function () {
      return {
        'description': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'destination': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'endpointURI': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'headers': { type: 'Array', access: 'readonly', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'httpHeaders': { type: 'Object', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'makeObjectsBindable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'port': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'ready': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'rootURL': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'service': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'useProxy': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'xmlSpecialCharsFilter': { type: 'Function', access: 'readwrite', declaredBy: 'mx.rpc.soap.AbstractWebService'}
      };
    },
    methods: function () {
      return {
        'AbstractWebService': { type: '', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'String', true ,'String', true ]; }},
        'addHeader': { type: 'void', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'Object', false ]; }},
        'addSimpleHeader': { type: 'void', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'String', false ,'String', false ,'String', false ,'String', false ]; }},
        'clearHeaders': { type: 'void', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'getHeader': { type: 'mx.rpc.soap.SOAPHeader', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'QName', false ,'String', true ]; }},
        'removeHeader': { type: 'void', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'QName', false ,'String', true ]; }},
        'setRemoteCredentials': { type: 'void', declaredBy: 'mx.rpc.soap.AbstractWebService', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }},
        '|http://www.adobe.com/2006/flex/mx/internal::findJSessionID': { type: 'String', declaredBy: 'mx.rpc.soap.AbstractWebService'},
        'http://www.adobe.com/2006/flex/mx/internal::getDirectChannelSet': { type: 'mx.messaging.ChannelSet', declaredBy: 'mx.rpc.soap.AbstractWebService'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.AbstractWebService.prototype.ROYALE_COMPILE_FLAGS = 26;
