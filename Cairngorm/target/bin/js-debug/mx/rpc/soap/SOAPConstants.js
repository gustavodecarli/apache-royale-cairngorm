/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/SOAPConstants.as
 * mx.rpc.soap.SOAPConstants
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.SOAPConstants');
/* Royale Dependency List: Namespace,QName,XML,mx.rpc.soap.types.ApacheDocumentType,mx.rpc.soap.types.DataSetType,mx.rpc.soap.types.ICustomSOAPType,mx.rpc.soap.types.MapType,mx.rpc.soap.types.QueryBeanType,mx.rpc.soap.types.RowSetType,mx.rpc.soap.types.SOAPArrayType,mx.utils.URLUtil,org.apache.royale.reflection.getDefinitionByName,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {Namespace=} envelopeNS
 * @param {Namespace=} encodingNS
 */
mx.rpc.soap.SOAPConstants = function(envelopeNS, encodingNS) {
  envelopeNS = typeof envelopeNS !== 'undefined' ? envelopeNS : null;
  encodingNS = typeof encodingNS !== 'undefined' ? encodingNS : null;
  ;
  if (envelopeNS == null)
    envelopeNS = new Namespace(mx.rpc.soap.SOAPConstants.SOAP_ENV_PREFIX, mx.rpc.soap.SOAPConstants.SOAP_ENVELOPE_URI);
  if (encodingNS == null)
    encodingNS = new Namespace(mx.rpc.soap.SOAPConstants.SOAP_ENC_PREFIX, mx.rpc.soap.SOAPConstants.SOAP_ENCODING_URI);
  this.mx_rpc_soap_SOAPConstants__envelopeNS = envelopeNS;
  this.mx_rpc_soap_SOAPConstants__encodingNS = encodingNS;
  this.envelopeQName = new QName(this.envelopeURI, "Envelope");
  this.headerQName = new QName(this.envelopeURI, "Header");
  this.bodyQName = new QName(this.envelopeURI, "Body");
  this.faultQName = new QName(this.envelopeURI, "Fault");
  this.actorQName = new QName(this.envelopeURI, "actor");
  this.mustUnderstandQName = new QName(this.envelopeURI, "mustUnderstand");
  this.soapencArrayQName = new QName(this.encodingURI, "Array");
  this.soapencArrayTypeQName = new QName(this.encodingURI, "arrayType");
  this.soapencRefQName = new QName(this.encodingURI, "multiRef");
  this.soapoffsetQName = new QName(this.encodingURI, "offset");
  this.soapBase64QName = new QName(this.encodingURI, "base64");
  if (!mx.rpc.soap.SOAPConstants.customTypesInitialized)
    mx.rpc.soap.SOAPConstants.initCustomSOAPTypes();
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(this.soapencArrayQName, mx.rpc.soap.types.SOAPArrayType);
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(this.soapencArrayTypeQName, mx.rpc.soap.types.SOAPArrayType);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.SOAPConstants', mx.rpc.soap.SOAPConstants);


/**
 * @export
 * @param {QName} type
 * @return {string}
 */
mx.rpc.soap.SOAPConstants.prototype.getSOAPEncodingToken = function(type) {
  return this.encodingNamespace.prefix + ":" + type.localName;
};


/**
 * @export
 * @param {XML=} xml
 * @return {mx.rpc.soap.SOAPConstants}
 */
mx.rpc.soap.SOAPConstants.getConstants = function(xml) {
  xml = typeof xml !== 'undefined' ? xml : null;
  var /** @type {Namespace} */ envelopeNS;
  var /** @type {Namespace} */ encodingNS;
  if (xml != null) {
    var /** @type {Array} */ nsArray = xml.namespaceDeclarations();
    var foreachiter0_target = nsArray;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var ns = foreachiter0_target[foreachiter0];
    {
      if (mx.utils.URLUtil.urisEqual(ns.uri, mx.rpc.soap.SOAPConstants.SOAP_ENVELOPE_URI) || mx.utils.URLUtil.urisEqual(ns.uri, mx.rpc.soap.SOAPConstants.SOAP12_ENVELOPE_URI)) {
        envelopeNS = ns;
      } else if (mx.utils.URLUtil.urisEqual(ns.uri, mx.rpc.soap.SOAPConstants.SOAP_ENCODING_URI) || mx.utils.URLUtil.urisEqual(ns.uri, mx.rpc.soap.SOAPConstants.SOAP12_ENCODING_URI)) {
        encodingNS = ns;
      }
    }}
    
  }
  if (envelopeNS == null)
    envelopeNS = new Namespace(mx.rpc.soap.SOAPConstants.SOAP_ENV_PREFIX, mx.rpc.soap.SOAPConstants.SOAP_ENVELOPE_URI);
  if (encodingNS == null)
    encodingNS = new Namespace(mx.rpc.soap.SOAPConstants.SOAP_ENC_PREFIX, mx.rpc.soap.SOAPConstants.SOAP_ENCODING_URI);
  if (mx.rpc.soap.SOAPConstants.constantsCache == null)
    mx.rpc.soap.SOAPConstants.constantsCache = {};
  var /** @type {mx.rpc.soap.SOAPConstants} */ constants = mx.rpc.soap.SOAPConstants.constantsCache[envelopeNS.uri];
  if (constants == null) {
    constants = new mx.rpc.soap.SOAPConstants(envelopeNS, encodingNS);
    mx.rpc.soap.SOAPConstants.constantsCache[envelopeNS.uri] = constants;
  }
  return constants;
};


/**
 * @export
 * @param {QName} type
 * @return {boolean}
 */
mx.rpc.soap.SOAPConstants.isSOAPEncodedType = function(type) {
  var /** @type {string} */ uri = org.apache.royale.utils.Language.string((type != null) ? type.uri : null);
  if (uri != null) {
    if (mx.utils.URLUtil.urisEqual(uri, mx.rpc.soap.SOAPConstants.SOAP_ENCODING_URI) || mx.utils.URLUtil.urisEqual(uri, mx.rpc.soap.SOAPConstants.SOAP12_ENCODING_URI)) {
      return true;
    }
  }
  return false;
};


/**
 * Looks for an ICustomSOAPType implementation for the given type. 
 * 
 * @asreturn A new instance of the ICustomSOAPType, if registered, otherwise
 * null.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} type
 * @return {mx.rpc.soap.types.ICustomSOAPType}
 */
mx.rpc.soap.SOAPConstants.getCustomSOAPType = function(type) {
  var /** @type {mx.rpc.soap.types.ICustomSOAPType} */ soapType;
  if (type != null) {
    var /** @type {string} */ key = mx.rpc.soap.SOAPConstants.getKey(type);
    var /** @type {string} */ definitionName = org.apache.royale.utils.Language.as(mx.rpc.soap.SOAPConstants.typeMap[key], String);
    if (definitionName != null) {
      try {
        var /** @type {Object} */ c = org.apache.royale.utils.Language.as(org.apache.royale.reflection.getDefinitionByName(definitionName), org.apache.royale.utils.Language.synthType('Class'));
        soapType = org.apache.royale.utils.Language.as(new c(), mx.rpc.soap.types.ICustomSOAPType);
      } catch (e) {
      }
    }
  }
  return soapType;
};


/**
 * Maps a type QName to a definition of an ISOAPType implementation.
 * The definition can be a String representation of the fully qualified
 * class name, an Object instance or the Class instance itself.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} type
 * @param {*} definition
 */
mx.rpc.soap.SOAPConstants.registerCustomSOAPType = function(type, definition) {
  var /** @type {string} */ key = mx.rpc.soap.SOAPConstants.getKey(type);
  var /** @type {string} */ definitionName;
  if (org.apache.royale.utils.Language.is(definition, String))
    definitionName = org.apache.royale.utils.Language.as(definition, String);
  else
    definitionName = org.apache.royale.reflection.getQualifiedClassName(definition);
  mx.rpc.soap.SOAPConstants.typeMap[key] = definitionName;
};


/**
 * Removes the ICustomSOAPType from the registry for the given type.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {QName} type
 */
mx.rpc.soap.SOAPConstants.unregisterCustomSOAPType = function(type) {
  if (type != null) {
    var /** @type {string} */ key = mx.rpc.soap.SOAPConstants.getKey(type);
    delete mx.rpc.soap.SOAPConstants.typeMap[key];
  }
};


/**
 * @private
 * @param {QName} type
 * @return {string}
 */
mx.rpc.soap.SOAPConstants.getKey = function(type) {
  var /** @type {string} */ key;
  if (type.uri == null || type.uri == "")
    key = type.localName;
  else
    key = type.toString();
  return key;
};


/**
 * @private
 */
mx.rpc.soap.SOAPConstants.initCustomSOAPTypes = function() {
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(mx.rpc.soap.SOAPConstants.queryBeanQName, mx.rpc.soap.types.QueryBeanType);
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(mx.rpc.soap.SOAPConstants.mapQName, mx.rpc.soap.types.MapType);
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(mx.rpc.soap.SOAPConstants.rowSetQName, mx.rpc.soap.types.RowSetType);
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(mx.rpc.soap.SOAPConstants.documentQName, mx.rpc.soap.types.ApacheDocumentType);
  mx.rpc.soap.SOAPConstants.registerCustomSOAPType(mx.rpc.soap.SOAPConstants.diffgramQName, mx.rpc.soap.types.DataSetType);
  mx.rpc.soap.SOAPConstants.customTypesInitialized = true;
};


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.envelopeQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.headerQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.bodyQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.faultQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.actorQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.mustUnderstandQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.soapencArrayQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.soapencArrayTypeQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.soapencRefQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.soapoffsetQName;


/**
 * @export
 * @type {QName}
 */
mx.rpc.soap.SOAPConstants.prototype.soapBase64QName;


/**
 * @private
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.prototype.mx_rpc_soap_SOAPConstants__contentType;


/**
 * @private
 * @type {Namespace}
 */
mx.rpc.soap.SOAPConstants.prototype.mx_rpc_soap_SOAPConstants__envelopeNS;


/**
 * @private
 * @type {Namespace}
 */
mx.rpc.soap.SOAPConstants.prototype.mx_rpc_soap_SOAPConstants__encodingNS;


/**
 * @private
 * @type {Object}
 */
mx.rpc.soap.SOAPConstants.constantsCache;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.soap.SOAPConstants.customTypesInitialized;


/**
 * @private
 * @type {Object}
 */
mx.rpc.soap.SOAPConstants.typeMap = {};


mx.rpc.soap.SOAPConstants.get__queryBeanQName = function() {
  var value = new QName(mx.rpc.soap.SOAPConstants.COLD_FUSION_URI, "QueryBean");
  Object.defineProperty(mx.rpc.soap.SOAPConstants, 'queryBeanQName', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.soap.SOAPConstants, /** @lends {mx.rpc.soap.SOAPConstants} */ {
/**
 * @export
 * @const
 * @type {QName}
 */
queryBeanQName: {
  get: mx.rpc.soap.SOAPConstants.get__queryBeanQName,
  configurable: true}});


mx.rpc.soap.SOAPConstants.get__rowSetQName = function() {
  var value = new QName(mx.rpc.soap.SOAPConstants.APACHE_SOAP_URI, "RowSet");
  Object.defineProperty(mx.rpc.soap.SOAPConstants, 'rowSetQName', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.soap.SOAPConstants, /** @lends {mx.rpc.soap.SOAPConstants} */ {
/**
 * @export
 * @const
 * @type {QName}
 */
rowSetQName: {
  get: mx.rpc.soap.SOAPConstants.get__rowSetQName,
  configurable: true}});


mx.rpc.soap.SOAPConstants.get__mapQName = function() {
  var value = new QName(mx.rpc.soap.SOAPConstants.APACHE_SOAP_URI, "Map");
  Object.defineProperty(mx.rpc.soap.SOAPConstants, 'mapQName', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.soap.SOAPConstants, /** @lends {mx.rpc.soap.SOAPConstants} */ {
/**
 * @export
 * @const
 * @type {QName}
 */
mapQName: {
  get: mx.rpc.soap.SOAPConstants.get__mapQName,
  configurable: true}});


mx.rpc.soap.SOAPConstants.get__documentQName = function() {
  var value = new QName(mx.rpc.soap.SOAPConstants.APACHE_SOAP_URI, "Document");
  Object.defineProperty(mx.rpc.soap.SOAPConstants, 'documentQName', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.soap.SOAPConstants, /** @lends {mx.rpc.soap.SOAPConstants} */ {
/**
 * @export
 * @const
 * @type {QName}
 */
documentQName: {
  get: mx.rpc.soap.SOAPConstants.get__documentQName,
  configurable: true}});


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.msdataURI = "urn:schemas-microsoft-com:xml-msdata";


mx.rpc.soap.SOAPConstants.get__diffgramQName = function() {
  var value = new QName("urn:schemas-microsoft-com:xml-diffgram-v1", "diffgram");
  Object.defineProperty(mx.rpc.soap.SOAPConstants, 'diffgramQName', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.soap.SOAPConstants, /** @lends {mx.rpc.soap.SOAPConstants} */ {
/**
 * @export
 * @const
 * @type {QName}
 */
diffgramQName: {
  get: mx.rpc.soap.SOAPConstants.get__diffgramQName,
  configurable: true}});


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP_ENVELOPE_URI = "http://schemas.xmlsoap.org/soap/envelope/";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP12_ENVELOPE_URI = "http://www.w3.org/2002/12/soap-envelope";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.XML_DECLARATION = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP_ENCODING_URI = "http://schemas.xmlsoap.org/soap/encoding/";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP12_ENCODING_URI = "http://www.w3.org/2002/12/soap-encoding";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP_CONTENT_TYPE = "text/xml; charset=utf-8";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP12_CONTENT_TYPE = "application/soap+xml; charset=utf-8";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.RPC_STYLE = "rpc";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.DOC_STYLE = "document";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.WRAPPED_STYLE = "wrapped";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.USE_ENCODED = "encoded";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.USE_LITERAL = "literal";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.DEFAULT_OPERATION_STYLE = "document";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.DEFAULT_USE = "literal";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP_ENV_PREFIX = "SOAP-ENV";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.SOAP_ENC_PREFIX = "SOAP-ENC";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.COLD_FUSION_URI = "http://rpc.xml.coldfusion";


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.soap.SOAPConstants.APACHE_SOAP_URI = "http://xml.apache.org/xml-soap";


mx.rpc.soap.SOAPConstants.prototype.get__contentType = function() {
  return this.mx_rpc_soap_SOAPConstants__contentType;
};


mx.rpc.soap.SOAPConstants.prototype.get__encodingURI = function() {
  return this.encodingNamespace.uri;
};


mx.rpc.soap.SOAPConstants.prototype.get__encodingNamespace = function() {
  return this.mx_rpc_soap_SOAPConstants__encodingNS;
};


mx.rpc.soap.SOAPConstants.prototype.get__envelopeURI = function() {
  return this.envelopeNamespace.uri;
};


mx.rpc.soap.SOAPConstants.prototype.get__envelopeNamespace = function() {
  return this.mx_rpc_soap_SOAPConstants__envelopeNS;
};


Object.defineProperties(mx.rpc.soap.SOAPConstants.prototype, /** @lends {mx.rpc.soap.SOAPConstants.prototype} */ {
/**
  * @export
  * @type {string} */
contentType: {
get: mx.rpc.soap.SOAPConstants.prototype.get__contentType},
/**
  * @export
  * @type {string} */
encodingURI: {
get: mx.rpc.soap.SOAPConstants.prototype.get__encodingURI},
/**
  * @export
  * @type {Namespace} */
encodingNamespace: {
get: mx.rpc.soap.SOAPConstants.prototype.get__encodingNamespace},
/**
  * @export
  * @type {string} */
envelopeURI: {
get: mx.rpc.soap.SOAPConstants.prototype.get__envelopeURI},
/**
  * @export
  * @type {Namespace} */
envelopeNamespace: {
get: mx.rpc.soap.SOAPConstants.prototype.get__envelopeNamespace}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.SOAPConstants.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SOAPConstants', qName: 'mx.rpc.soap.SOAPConstants', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.SOAPConstants.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'envelopeQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.envelopeQName = v : inst.envelopeQName;}},
        'headerQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.headerQName = v : inst.headerQName;}},
        'bodyQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.bodyQName = v : inst.bodyQName;}},
        'faultQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.faultQName = v : inst.faultQName;}},
        'actorQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.actorQName = v : inst.actorQName;}},
        'mustUnderstandQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.mustUnderstandQName = v : inst.mustUnderstandQName;}},
        'soapencArrayQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.soapencArrayQName = v : inst.soapencArrayQName;}},
        'soapencArrayTypeQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.soapencArrayTypeQName = v : inst.soapencArrayTypeQName;}},
        'soapencRefQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.soapencRefQName = v : inst.soapencRefQName;}},
        'soapoffsetQName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.soapoffsetQName = v : inst.soapoffsetQName;}},
        'soapBase64QName': { type: 'QName', get_set: function (/** mx.rpc.soap.SOAPConstants */ inst, /** * */ v) {return v !== undefined ? inst.soapBase64QName = v : inst.soapBase64QName;}}
      };
    },
    accessors: function () {
      return {
        'contentType': { type: 'String', access: 'readonly', declaredBy: 'mx.rpc.soap.SOAPConstants'},
        'encodingURI': { type: 'String', access: 'readonly', declaredBy: 'mx.rpc.soap.SOAPConstants'},
        'encodingNamespace': { type: 'Namespace', access: 'readonly', declaredBy: 'mx.rpc.soap.SOAPConstants'},
        'envelopeURI': { type: 'String', access: 'readonly', declaredBy: 'mx.rpc.soap.SOAPConstants'},
        'envelopeNamespace': { type: 'Namespace', access: 'readonly', declaredBy: 'mx.rpc.soap.SOAPConstants'}
      };
    },
    methods: function () {
      return {
        'SOAPConstants': { type: '', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'Namespace', true ,'Namespace', true ]; }},
        'getSOAPEncodingToken': { type: 'String', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'QName', false ]; }},
        '|getConstants': { type: 'mx.rpc.soap.SOAPConstants', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'XML', true ]; }},
        '|isSOAPEncodedType': { type: 'Boolean', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'QName', false ]; }},
        '|getCustomSOAPType': { type: 'mx.rpc.soap.types.ICustomSOAPType', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'QName', false ]; }},
        '|registerCustomSOAPType': { type: 'void', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'QName', false ,'*', false ]; }},
        '|unregisterCustomSOAPType': { type: 'void', declaredBy: 'mx.rpc.soap.SOAPConstants', parameters: function () { return [ 'QName', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.SOAPConstants.prototype.ROYALE_COMPILE_FLAGS = 26;
