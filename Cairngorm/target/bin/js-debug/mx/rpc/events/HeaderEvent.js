/**
 * Generated by Apache Royale Compiler from mx/rpc/events/HeaderEvent.as
 * mx.rpc.events.HeaderEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.events.HeaderEvent');
/* Royale Dependency List: mx.core.mx_internal,mx.messaging.messages.IMessage,mx.rpc.AsyncToken,org.apache.royale.events.IRoyaleEvent,XML*/

goog.require('mx.rpc.events.AbstractEvent');



/**
 * Creates a new HeaderEvent.
 *
 * @asparam type The event type; indicates the action that caused the event.
 * @asparam bubbles Specifies whether the event can bubble up the display list hierarchy.
 * @asparam cancelable Specifies whether the behavior associated with the event can be prevented. The dfault is <code>true</code>, but the <code>preventDefault()</code> method has no effect.
 * @asparam header Object that holds the header of the call.
 * @asparam token AsyncToken that represents the call to the method. Used in the asynchronous completion token pattern.
 * @asparam message Source Message of the header.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.events.AbstractEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {Object=} header
 * @param {mx.rpc.AsyncToken=} token
 * @param {mx.messaging.messages.IMessage=} message
 */
mx.rpc.events.HeaderEvent = function(type, bubbles, cancelable, header, token, message) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : true;
  header = typeof header !== 'undefined' ? header : null;
  token = typeof token !== 'undefined' ? token : null;
  message = typeof message !== 'undefined' ? message : null;
  mx.rpc.events.HeaderEvent.base(this, 'constructor', type, bubbles, cancelable, token, message);
  this.mx_rpc_events_HeaderEvent__header = header;
};
goog.inherits(mx.rpc.events.HeaderEvent, mx.rpc.events.AbstractEvent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.events.HeaderEvent', mx.rpc.events.HeaderEvent);


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.events.HeaderEvent.HEADER = "header";


/**
 * @private
 * @type {Object}
 */
mx.rpc.events.HeaderEvent.prototype.mx_rpc_events_HeaderEvent__header;


/**
 * Utility method to create a new HeaderEvent that doesn't bubble and is cancelable.
 *
 * @asparam header Object that holds the header of the call.
 * @asparam token AsyncToken that represents the call to the method. Used in the asynchronous completion token pattern.
 * @asparam message Source Message header.
 *
 * @asreturn Returns a new HeaderEvent that doesn't bubble and is cancelable.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} header
 * @param {mx.rpc.AsyncToken} token
 * @param {mx.messaging.messages.IMessage} message
 * @return {mx.rpc.events.HeaderEvent}
 */
mx.rpc.events.HeaderEvent.createEvent = function(header, token, message) {
  return new mx.rpc.events.HeaderEvent(mx.rpc.events.HeaderEvent.HEADER, false, true, header, token, message);
};


/**
 * @asprivate
 * @export
 * @override
 */
mx.rpc.events.HeaderEvent.prototype.cloneEvent = function() {
  return new mx.rpc.events.HeaderEvent(this.type, this.bubbles, this.cancelable, this.header, this.token, this.message);
};


/**
 * Returns a string representation of the HeaderEvent.
 *
 * @asreturn String representation of the HeaderEvent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.events.HeaderEvent.prototype.toString = function() {
  return this.formatToString("HeaderEvent", "type", "bubbles", "cancelable", "eventPhase");
};


mx.rpc.events.HeaderEvent.prototype.get__header = function() {
  return this.mx_rpc_events_HeaderEvent__header;
};


Object.defineProperties(mx.rpc.events.HeaderEvent.prototype, /** @lends {mx.rpc.events.HeaderEvent.prototype} */ {
/**
  * @export
  * @type {Object} */
header: {
get: mx.rpc.events.HeaderEvent.prototype.get__header}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.events.HeaderEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'HeaderEvent', qName: 'mx.rpc.events.HeaderEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.events.HeaderEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'header': { type: 'Object', access: 'readonly', declaredBy: 'mx.rpc.events.HeaderEvent'}
      };
    },
    methods: function () {
      return {
        'HeaderEvent': { type: '', declaredBy: 'mx.rpc.events.HeaderEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'Object', true ,'mx.rpc.AsyncToken', true ,'mx.messaging.messages.IMessage', true ]; }},
        '|createEvent': { type: 'mx.rpc.events.HeaderEvent', declaredBy: 'mx.rpc.events.HeaderEvent', parameters: function () { return [ 'Object', false ,'mx.rpc.AsyncToken', false ,'mx.messaging.messages.IMessage', false ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'mx.rpc.events.HeaderEvent'},
        'toString': { type: 'String', declaredBy: 'mx.rpc.events.HeaderEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.events.HeaderEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
