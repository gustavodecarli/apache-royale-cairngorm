/**
 * Generated by Apache Royale Compiler from mx/rpc/events/XMLLoadEvent.as
 * mx.rpc.events.XMLLoadEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.events.XMLLoadEvent');
/* Royale Dependency List: XML,org.apache.royale.events.IRoyaleEvent*/

goog.require('org.apache.royale.events.Event');



/**
 * Constructor.
 *
 * @asparam type The event type; indicates the action that triggered the event.
 *
 * @asparam bubbles Specifies whether the event can bubble up the display list hierarchy.
 *
 * @asparam cancelable Specifies whether the behavior associated with the event can be prevented.
 *
 * @asparam xml The XML document loaded.
 *
 * @asparam location The path used to load the document.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {XML=} xml
 * @param {string=} location
 */
mx.rpc.events.XMLLoadEvent = function(type, bubbles, cancelable, xml, location) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : true;
  xml = typeof xml !== 'undefined' ? xml : null;
  location = typeof location !== 'undefined' ? location : null;
  mx.rpc.events.XMLLoadEvent.base(this, 'constructor', type == null ? mx.rpc.events.XMLLoadEvent.LOAD : type, bubbles, cancelable);
  this.xml = xml;
  this.location = location;
};
goog.inherits(mx.rpc.events.XMLLoadEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.events.XMLLoadEvent', mx.rpc.events.XMLLoadEvent);


/**
 * @export
 * @type {XML}
 */
mx.rpc.events.XMLLoadEvent.prototype.xml;


/**
 * @export
 * @type {string}
 */
mx.rpc.events.XMLLoadEvent.prototype.location;


/**
 *  Returns a copy of this XMLLoadEvent object.
 *
 *  @asreturn A copy of this XMLLoadEvent object.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.events.XMLLoadEvent.prototype.cloneEvent = function() {
  return new mx.rpc.events.XMLLoadEvent(this.type, this.bubbles, this.cancelable, this.xml, this.location);
};


/**
 *  Returns a String representation of this XMLLoadEvent object.
 *
 *  @asreturn A String representation of this XMLLoadEvent object.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {string}
 */
mx.rpc.events.XMLLoadEvent.prototype.toString = function() {
  return this.formatToString("XMLLoadEvent", "location", "type", "bubbles", "cancelable", "eventPhase");
};


/**
 * @export
 * @param {string} className
 * @param {...} rest
 * @return {string}
 */
mx.rpc.events.XMLLoadEvent.prototype.formatToString = function(className, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (rest) {
    for (var /** @type {string} */ s in rest)
      className += " " + s;
  }
  return className;
};


/**
 * A helper method to create a new XMLLoadEvent.
 * @asprivate
 * @export
 * @param {XML=} xml
 * @param {string=} location
 * @return {mx.rpc.events.XMLLoadEvent}
 */
mx.rpc.events.XMLLoadEvent.createEvent = function(xml, location) {
  xml = typeof xml !== 'undefined' ? xml : null;
  location = typeof location !== 'undefined' ? location : null;
  return new mx.rpc.events.XMLLoadEvent(mx.rpc.events.XMLLoadEvent.LOAD, false, true, xml, location);
};


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.events.XMLLoadEvent.LOAD = "xmlLoad";


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.events.XMLLoadEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'XMLLoadEvent', qName: 'mx.rpc.events.XMLLoadEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.events.XMLLoadEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'xml': { type: 'XML', get_set: function (/** mx.rpc.events.XMLLoadEvent */ inst, /** * */ v) {return v !== undefined ? inst.xml = v : inst.xml;}},
        'location': { type: 'String', get_set: function (/** mx.rpc.events.XMLLoadEvent */ inst, /** * */ v) {return v !== undefined ? inst.location = v : inst.location;}}
      };
    },
    methods: function () {
      return {
        'XMLLoadEvent': { type: '', declaredBy: 'mx.rpc.events.XMLLoadEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'XML', true ,'String', true ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'mx.rpc.events.XMLLoadEvent'},
        'toString': { type: 'String', declaredBy: 'mx.rpc.events.XMLLoadEvent'},
        'formatToString': { type: 'String', declaredBy: 'mx.rpc.events.XMLLoadEvent', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        '|createEvent': { type: 'mx.rpc.events.XMLLoadEvent', declaredBy: 'mx.rpc.events.XMLLoadEvent', parameters: function () { return [ 'XML', true ,'String', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.events.XMLLoadEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
