/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/TypeIterator.as
 * mx.rpc.xml.TypeIterator
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.TypeIterator');
/* Royale Dependency List: XMLList,mx.collections.IList,mx.rpc.xml.ContentProxy,mx.utils.object_proxy,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 * @param {*} value
 */
mx.rpc.xml.TypeIterator = function(value) {
  ;
  this.mx_rpc_xml_TypeIterator__value = value;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.TypeIterator', mx.rpc.xml.TypeIterator);


/**
 * @export
 * @return {boolean}
 */
mx.rpc.xml.TypeIterator.prototype.hasNext = function() {
  if (this.mx_rpc_xml_TypeIterator__value != null) {
    return (mx.rpc.xml.TypeIterator.getLength(this.mx_rpc_xml_TypeIterator__value) > this.mx_rpc_xml_TypeIterator_counter);
  }
  return false;
};


/**
 * @export
 * @return {*}
 */
mx.rpc.xml.TypeIterator.prototype.next = function() {
  var /** @type {*} */ result;
  try {
    result = mx.rpc.xml.TypeIterator.getItemAt(this.mx_rpc_xml_TypeIterator__value, this.mx_rpc_xml_TypeIterator_counter);
  } finally {
    this.mx_rpc_xml_TypeIterator_counter++;
  }
  return result;
};


/**
 * @export
 */
mx.rpc.xml.TypeIterator.prototype.reset = function() {
  this.mx_rpc_xml_TypeIterator_counter = 0;
};


/**
 * @export
 * @param {*} value
 * @param {number} index
 * @return {*}
 */
mx.rpc.xml.TypeIterator.getItemAt = function(value, index) {
  var /** @type {*} */ result;
  if (value != null) {
    if (org.apache.royale.utils.Language.is(value, Array)) {
      var /** @type {Array} */ arrayValue = org.apache.royale.utils.Language.as(value, Array);
      result = arrayValue[index];
    } else if (org.apache.royale.utils.Language.is(value, mx.collections.IList)) {
      var /** @type {mx.collections.IList} */ listValue = org.apache.royale.utils.Language.as(value, mx.collections.IList);
      result = listValue.getItemAt((index) >> 0);
    } else if (org.apache.royale.utils.Language.is(value, XMLList)) {
      var /** @type {XMLList} */ xmlList = org.apache.royale.utils.Language.as(value, XMLList);
      result = xmlList[index];
    }
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @return {number}
 */
mx.rpc.xml.TypeIterator.getLength = function(value) {
  var /** @type {number} */ result = 0;
  //var /** @type {number} */ result = 0;
  if (value != null) {
    if (org.apache.royale.utils.Language.is(value, Array)) {
      var /** @type {Array} */ arrayValue = org.apache.royale.utils.Language.as(value, Array);
      result = (arrayValue.length) >>> 0;
    } else if (org.apache.royale.utils.Language.is(value, mx.collections.IList)) {
      var /** @type {mx.collections.IList} */ listValue = org.apache.royale.utils.Language.as(value, mx.collections.IList);
      result = (listValue.length) >>> 0;
    } else if (org.apache.royale.utils.Language.is(value, XMLList)) {
      var /** @type {XMLList} */ xmlList = org.apache.royale.utils.Language.as(value, XMLList);
      result = (xmlList.length()) >>> 0;
    }
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @return {boolean}
 */
mx.rpc.xml.TypeIterator.isIterable = function(value) {
  if (org.apache.royale.utils.Language.is(value, mx.rpc.xml.ContentProxy) && !org.apache.royale.utils.Language.as(value, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__isSimple) {
    var /** @type {*} */ complexValue = org.apache.royale.utils.Language.as(value, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__content;
    if (mx.rpc.xml.TypeIterator.isIterable(complexValue)) {
      value = complexValue;
    }
  }
  if (org.apache.royale.utils.Language.is(value, Array) || org.apache.royale.utils.Language.is(value, mx.collections.IList) || org.apache.royale.utils.Language.is(value, XMLList))
    return true;
  return false;
};


/**
 * @export
 * @param {*} parent
 * @param {*} value
 * @return {number}
 */
mx.rpc.xml.TypeIterator.push = function(parent, value) {
  var /** @type {number} */ result = 0;
  //var /** @type {number} */ result = 0;
  if (parent != null) {
    if (org.apache.royale.utils.Language.is(parent, mx.rpc.xml.ContentProxy) && !org.apache.royale.utils.Language.as(parent, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__isSimple) {
      var /** @type {*} */ complexParent = org.apache.royale.utils.Language.as(parent, mx.rpc.xml.ContentProxy, true).http_$$www_adobe_com$2006$actionscript$flash$objectproxy__content;
      if (mx.rpc.xml.TypeIterator.isIterable(complexParent)) {
        parent = complexParent;
      }
    }
    if (org.apache.royale.utils.Language.is(parent, Array)) {
      var /** @type {Array} */ arrayValue = org.apache.royale.utils.Language.as(parent, Array);
      result = (arrayValue.push(value)) >>> 0;
    } else if (org.apache.royale.utils.Language.is(parent, mx.collections.IList)) {
      var /** @type {mx.collections.IList} */ listValue = org.apache.royale.utils.Language.as(parent, mx.collections.IList);
      listValue.addItem(value);
      result = (listValue.length) >>> 0;
    } else if (org.apache.royale.utils.Language.is(parent, XMLList)) {
      var /** @type {XMLList} */ xmlList = org.apache.royale.utils.Language.as(parent, XMLList);
      xmlList = xmlList.plus(value);
      result = (xmlList.length()) >>> 0;
    }
  }
  return result;
};


/**
 * @private
 * @type {*}
 */
mx.rpc.xml.TypeIterator.prototype.mx_rpc_xml_TypeIterator__value;


/**
 * @private
 * @type {number}
 */
mx.rpc.xml.TypeIterator.prototype.mx_rpc_xml_TypeIterator_counter = 0;


mx.rpc.xml.TypeIterator.prototype.get__length = function() {
  return mx.rpc.xml.TypeIterator.getLength(this.mx_rpc_xml_TypeIterator__value);
};


mx.rpc.xml.TypeIterator.prototype.get__value = function() {
  return this.mx_rpc_xml_TypeIterator__value;
};


Object.defineProperties(mx.rpc.xml.TypeIterator.prototype, /** @lends {mx.rpc.xml.TypeIterator.prototype} */ {
/**
  * @export
  * @type {number} */
length: {
get: mx.rpc.xml.TypeIterator.prototype.get__length},
/**
  * @export
  * @type {*} */
value: {
get: mx.rpc.xml.TypeIterator.prototype.get__value}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.TypeIterator.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TypeIterator', qName: 'mx.rpc.xml.TypeIterator', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.TypeIterator.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'length': { type: 'uint', access: 'readonly', declaredBy: 'mx.rpc.xml.TypeIterator'},
        'value': { type: '*', access: 'readonly', declaredBy: 'mx.rpc.xml.TypeIterator'}
      };
    },
    methods: function () {
      return {
        'TypeIterator': { type: '', declaredBy: 'mx.rpc.xml.TypeIterator', parameters: function () { return [ '*', false ]; }},
        'hasNext': { type: 'Boolean', declaredBy: 'mx.rpc.xml.TypeIterator'},
        'next': { type: '*', declaredBy: 'mx.rpc.xml.TypeIterator'},
        'reset': { type: 'void', declaredBy: 'mx.rpc.xml.TypeIterator'},
        '|getItemAt': { type: '*', declaredBy: 'mx.rpc.xml.TypeIterator', parameters: function () { return [ '*', false ,'uint', false ]; }},
        '|getLength': { type: 'uint', declaredBy: 'mx.rpc.xml.TypeIterator', parameters: function () { return [ '*', false ]; }},
        '|isIterable': { type: 'Boolean', declaredBy: 'mx.rpc.xml.TypeIterator', parameters: function () { return [ '*', false ]; }},
        '|push': { type: 'uint', declaredBy: 'mx.rpc.xml.TypeIterator', parameters: function () { return [ '*', false ,'*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.TypeIterator.prototype.ROYALE_COMPILE_FLAGS = 26;
