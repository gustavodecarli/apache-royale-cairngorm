/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/SimpleXMLDecoder.as
 * mx.rpc.xml.SimpleXMLDecoder
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.SimpleXMLDecoder');
/* Royale Dependency List: XML,XMLList,mx.collections.ArrayCollection,mx.rpc.xml.ComplexString,mx.utils.ObjectProxy,org.apache.royale.utils.Language*/




/**
 *  @asprivate
 *  Constructor.
 * @constructor
 * @param {boolean=} makeObjectsBindable
 */
mx.rpc.xml.SimpleXMLDecoder = function(makeObjectsBindable) {
  makeObjectsBindable = typeof makeObjectsBindable !== 'undefined' ? makeObjectsBindable : false;
  ;
  this.mx_rpc_xml_SimpleXMLDecoder_makeObjectsBindable = makeObjectsBindable;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.SimpleXMLDecoder', mx.rpc.xml.SimpleXMLDecoder);


/**
 *  @asprivate
 * @export
 * @param {string} val
 * @return {Object}
 */
mx.rpc.xml.SimpleXMLDecoder.simpleType = function(val) {
  var /** @type {Object} */ result = val;
  if (val != null) {
    if (org.apache.royale.utils.Language.is(val, String) && String(val) == "") {
      result = val.toString();
    } else if (isNaN(Number(val)) || (val.charAt(0) == '0') || ((val.charAt(0) == '-') && (val.charAt(1) == '0')) || val.charAt(val.length - 1) == 'E') {
      var /** @type {string} */ valStr = val.toString();
      var /** @type {string} */ valStrLC = valStr.toLowerCase();
      if (valStrLC == "true")
        result = true;
      else if (valStrLC == "false")
        result = false;
      else
        result = valStr;
    } else {
      result = Number(val);
    }
  }
  return result;
};


/**
 *  Converts a tree of XMLNodes into a tree of ActionScript Objects.
 *
 *  @asparam dataNode An XMLNode to be converted into a tree of ActionScript Objects.
 *
 *  @asreturn A tree of ActionScript Objects.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {XML} dataNode
 * @return {Object}
 */
mx.rpc.xml.SimpleXMLDecoder.prototype.decodeXML = function(dataNode) {
  var /** @type {Object} */ result;
  var /** @type {boolean} */ isSimpleType = false;
  if (dataNode == null)
    return null;
  var /** @type {XMLList} */ children = dataNode.children();
  if (children.length() == 1 && children[0].nodeKind() == 'text') {
    isSimpleType = true;
    result = mx.rpc.xml.SimpleXMLDecoder.simpleType(children[0].toString());
  } else if (children.length() > 0) {
    result = {};
    if (this.mx_rpc_xml_SimpleXMLDecoder_makeObjectsBindable)
      result = new mx.utils.ObjectProxy(result);
    for (var /** @type {number} */ i = 0; i < children.length(); i++) {
      var /** @type {XML} */ partNode = children[i];
      if (partNode.nodeKind() != 'element') {
        continue;
      }
      var /** @type {string} */ partName = mx.rpc.xml.SimpleXMLDecoder.getLocalName(partNode);
      var /** @type {Object} */ partObj = this.decodeXML(partNode);
      var /** @type {Object} */ existing = result[partName];
      if (existing != null) {
        if (org.apache.royale.utils.Language.is(existing, Array)) {
          existing.push(partObj);
        } else if (org.apache.royale.utils.Language.is(existing, mx.collections.ArrayCollection)) {
          existing.source.push(partObj);
        } else {
          existing = [existing];
          existing.push(partObj);
          if (this.mx_rpc_xml_SimpleXMLDecoder_makeObjectsBindable)
            existing = new mx.collections.ArrayCollection(org.apache.royale.utils.Language.as(existing, Array));
          result[partName] = existing;
        }
      } else {
        result[partName] = partObj;
      }
    }
  }
  var /** @type {XMLList} */ attributes = dataNode.attributes();
  var foreachiter0_target = attributes;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var attribute = foreachiter0_target[foreachiter0];
  {
    if (result == null) {
      result = {};
      if (this.mx_rpc_xml_SimpleXMLDecoder_makeObjectsBindable)
        result = new mx.utils.ObjectProxy(result);
    }
    if (isSimpleType && !org.apache.royale.utils.Language.is(result, mx.rpc.xml.ComplexString)) {
      result = new mx.rpc.xml.ComplexString(result.toString());
      isSimpleType = false;
    }
    result[attribute.localName()] = mx.rpc.xml.SimpleXMLDecoder.simpleType(attribute.toString());
  }}
  
  return result;
};


/**
 * Returns the local name of an XMLNode.
 *
 *  @asparam xmlNode The XMLNode.
 *
 * @asreturn The local name of an XMLNode.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {XML} xml
 * @return {string}
 */
mx.rpc.xml.SimpleXMLDecoder.getLocalName = function(xml) {
  var /** @type {string} */ name = xml.localName().toString();
  return name;
};


/**
 * @private
 * @type {boolean}
 */
mx.rpc.xml.SimpleXMLDecoder.prototype.mx_rpc_xml_SimpleXMLDecoder_makeObjectsBindable;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.SimpleXMLDecoder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SimpleXMLDecoder', qName: 'mx.rpc.xml.SimpleXMLDecoder', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.SimpleXMLDecoder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|simpleType': { type: 'Object', declaredBy: 'mx.rpc.xml.SimpleXMLDecoder', parameters: function () { return [ 'String', false ]; }},
        'SimpleXMLDecoder': { type: '', declaredBy: 'mx.rpc.xml.SimpleXMLDecoder', parameters: function () { return [ 'Boolean', true ]; }},
        'decodeXML': { type: 'Object', declaredBy: 'mx.rpc.xml.SimpleXMLDecoder', parameters: function () { return [ 'XML', false ]; }},
        '|getLocalName': { type: 'String', declaredBy: 'mx.rpc.xml.SimpleXMLDecoder', parameters: function () { return [ 'XML', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.SimpleXMLDecoder.prototype.ROYALE_COMPILE_FLAGS = 26;
