/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/XMLLoader.as
 * mx.rpc.xml.XMLLoader
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.XMLLoader');
/* Royale Dependency List: XML,mx.core.mx_internal,mx.rpc.AsyncToken,mx.rpc.events.FaultEvent,mx.rpc.events.ResultEvent,mx.rpc.events.XMLLoadEvent,mx.rpc.http.HTTPService,mx.utils.URLUtil,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @param {mx.rpc.http.HTTPService=} httpService
 */
mx.rpc.xml.XMLLoader = function(httpService) {
  httpService = typeof httpService !== 'undefined' ? httpService : null;
  mx.rpc.xml.XMLLoader.base(this, 'constructor');
  this.initializeService(httpService);
};
goog.inherits(mx.rpc.xml.XMLLoader, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.XMLLoader', mx.rpc.xml.XMLLoader);


/**
 * Asynchronously loads an XML document for the given URL.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} url
 */
mx.rpc.xml.XMLLoader.prototype.load = function(url) {
  url = this.getQualifiedLocation(url);
  this.internalLoad(url);
};


/**
 * @export
 * @param {mx.rpc.http.HTTPService=} httpService
 */
mx.rpc.xml.XMLLoader.prototype.initializeService = function(httpService) {
  httpService = typeof httpService !== 'undefined' ? httpService : null;
  this.loader = new mx.rpc.http.HTTPService();
  if (httpService != null) {
    this.loader.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest = httpService.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest;
    if (httpService.destination != null)
      this.loader.destination = httpService.destination;
    this.loader.useProxy = httpService.useProxy;
    this.loader.rootURL = httpService.rootURL;
    this.loader.headers = httpService.headers;
  }
  this.loader.addEventListener(mx.rpc.events.ResultEvent.RESULT, org.apache.royale.utils.Language.closure(this.resultHandler, this, 'resultHandler'));
  this.loader.addEventListener(mx.rpc.events.FaultEvent.FAULT, org.apache.royale.utils.Language.closure(this.faultHandler, this, 'faultHandler'));
  this.loader.resultFormat = mx.rpc.http.HTTPService.RESULT_FORMAT_E4X;
};


/**
 * @export
 * @param {string} location
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.xml.XMLLoader.prototype.internalLoad = function(location) {
  this.loadsOutstanding++;
  this.loader.url = location;
  var /** @type {mx.rpc.AsyncToken} */ token = this.loader.send();
  if (token != null)
    token.location = location;
  return token;
};


/**
 * @export
 * @param {string} location
 * @param {string=} parentLocation
 * @return {string}
 */
mx.rpc.xml.XMLLoader.prototype.getQualifiedLocation = function(location, parentLocation) {
  parentLocation = typeof parentLocation !== 'undefined' ? parentLocation : null;
  if (parentLocation != null)
    location = mx.utils.URLUtil.getFullURL(parentLocation, location);
  else
    location = mx.utils.URLUtil.getFullURL(this.loader.rootURL, location);
  return location;
};


/**
 * If a fault occured trying to load the XML document, a FaultEvent
 * is simply redispatched.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.events.FaultEvent} event
 */
mx.rpc.xml.XMLLoader.prototype.faultHandler = function(event) {
  this.loadsOutstanding--;
  this.dispatchEvent(event);
};


/**
 * Dispatches an XMLLoadEvent with the XML formatted result
 * and location (if known).
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.events.ResultEvent} event
 */
mx.rpc.xml.XMLLoader.prototype.resultHandler = function(event) {
  this.loadsOutstanding--;
  var /** @type {XML} */ xml = XML.conversion(event.result);
  var /** @type {mx.rpc.AsyncToken} */ token = event.token;
  var /** @type {string} */ location = org.apache.royale.utils.Language.string(token == null ? null : token.location);
  var /** @type {mx.rpc.events.XMLLoadEvent} */ xmlLoadEvent = mx.rpc.events.XMLLoadEvent.createEvent(xml, location);
  this.dispatchEvent(xmlLoadEvent);
};


/**
 * @export
 * @type {mx.rpc.http.HTTPService}
 */
mx.rpc.xml.XMLLoader.prototype.loader;


/**
 * @export
 * @type {number}
 */
mx.rpc.xml.XMLLoader.prototype.loadsOutstanding = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.XMLLoader.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'XMLLoader', qName: 'mx.rpc.xml.XMLLoader', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.XMLLoader.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'loadsOutstanding': { type: 'int', get_set: function (/** mx.rpc.xml.XMLLoader */ inst, /** * */ v) {return v !== undefined ? inst.loadsOutstanding = v : inst.loadsOutstanding;}}
      };
    },
    methods: function () {
      return {
        'XMLLoader': { type: '', declaredBy: 'mx.rpc.xml.XMLLoader', parameters: function () { return [ 'mx.rpc.http.HTTPService', true ]; }},
        'load': { type: 'void', declaredBy: 'mx.rpc.xml.XMLLoader', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.XMLLoader.prototype.ROYALE_COMPILE_FLAGS = 26;
