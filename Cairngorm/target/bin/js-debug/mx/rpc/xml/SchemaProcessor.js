/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/SchemaProcessor.as
 * mx.rpc.xml.SchemaProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.SchemaProcessor');
/* Royale Dependency List: QName,XML,XMLList,mx.rpc.xml.SchemaConstants,mx.rpc.xml.SchemaManager,mx.rpc.xml.TypeIterator,mx.utils.URLUtil,mx.utils.object_proxy*/




/**
 * @constructor
 */
mx.rpc.xml.SchemaProcessor = function() {
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.SchemaProcessor', mx.rpc.xml.SchemaProcessor);


/**
 * Clears the state in preparation for a fresh schema processing operation.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.rpc.xml.SchemaProcessor.prototype.reset = function() {
  this.schemaManager.reset();
};


/**
 * @asprivate
 * @export
 * @param {QName} type
 * @return {boolean}
 */
mx.rpc.xml.SchemaProcessor.prototype.isBuiltInType = function(type) {
  var /** @type {string} */ uri = org.apache.royale.utils.Language.string((type != null) ? type.uri : null);
  if (uri != null) {
    if (mx.utils.URLUtil.urisEqual(uri, mx.rpc.xml.SchemaConstants.XSD_URI_1999) || mx.utils.URLUtil.urisEqual(uri, mx.rpc.xml.SchemaConstants.XSD_URI_2000) || mx.utils.URLUtil.urisEqual(uri, mx.rpc.xml.SchemaConstants.XSD_URI_2001)) {
      return true;
    }
  }
  return false;
};


/**
 * Determines the length of a given value to check minOccurs/maxOccurs
 * ranges. If value is an Array, the count of the elements is returned
 * as the length otherwise the length is considered to be 1.
 * 
 * @asprivate
 * @export
 * @param {*} value
 * @return {number}
 */
mx.rpc.xml.SchemaProcessor.prototype.getValueOccurence = function(value) {
  var /** @type {number} */ result = 1;
  if (value != null && mx.rpc.xml.TypeIterator.isIterable(value)) {
    result = mx.rpc.xml.TypeIterator.getLength(value);
  } else if (value === undefined) {
    result = 0;
  }
  return result;
};


/**
 * A utility method to determine whether an attribute actually exists
 * on a given node.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} name
 * @param {XML} node
 * @return {string}
 */
mx.rpc.xml.SchemaProcessor.prototype.getAttributeFromNode = function(name, node) {
  var /** @type {string} */ value;
  if (node != null) {
    var /** @type {XMLList} */ attribute = node.attribute(name);
    if (attribute.length() > 0)
      value = org.apache.royale.utils.Language.string(attribute[0]);
  }
  return value;
};


/**
 * @export
 * @param {XML} node
 * @param {...} types
 * @return {XML}
 */
mx.rpc.xml.SchemaProcessor.prototype.getSingleElementFromNode = function(node, types) {
  types = Array.prototype.slice.call(arguments, 1);
  var /** @type {XMLList} */ elements = node.elements();
  var foreachiter0_target = elements;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var element = foreachiter0_target[foreachiter0];
  {
    if (types != null && types.length > 0) {
      var foreachiter1_target = types;
      for (var foreachiter1 in foreachiter1_target) 
      {
      var type = foreachiter1_target[foreachiter1];
      {
        if (QName.equality(element.name(),type)) {
          return element;
        }
      }}
      
    } else {
      return element;
    }
  }}
  
  return null;
};


/**
 * Looks for a maxOccurs constraint on the given definition. The default
 * is 1. The constraint value "unbounded" is interpreted as
 * <code>uint.MAX_VALUE</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {XML} definition
 * @return {number}
 */
mx.rpc.xml.SchemaProcessor.prototype.getMaxOccurs = function(definition) {
  var /** @type {number} */ maxOccurs = 1;
  var /** @type {string} */ attributeValue = this.getAttributeFromNode("maxOccurs", definition);
  if (attributeValue != null)
    maxOccurs = ((attributeValue == "unbounded") ? 4294967295 : parseInt(attributeValue, undefined)) >>> 0;
  return maxOccurs;
};


/**
 * Looks for a minOccurs constraint on the given definition. The default
 * is 1.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {XML} definition
 * @return {number}
 */
mx.rpc.xml.SchemaProcessor.prototype.getMinOccurs = function(definition) {
  var /** @type {number} */ minOccurs = 1;
  var /** @type {string} */ attributeValue = this.getAttributeFromNode("minOccurs", definition);
  if (attributeValue != null)
    minOccurs = (parseInt(attributeValue, undefined)) >>> 0;
  return minOccurs;
};


/**
 * @export
 * @type {boolean}
 */
mx.rpc.xml.SchemaProcessor.prototype.strictOccurenceBounds = false;


/**
 * @private
 * @type {mx.rpc.xml.SchemaManager}
 */
mx.rpc.xml.SchemaProcessor.prototype.mx_rpc_xml_SchemaProcessor__schemaManager;


mx.rpc.xml.SchemaProcessor.prototype.get__schemaManager = function() {
  if (this.mx_rpc_xml_SchemaProcessor__schemaManager == null)
    this.mx_rpc_xml_SchemaProcessor__schemaManager = new mx.rpc.xml.SchemaManager();
  return this.mx_rpc_xml_SchemaProcessor__schemaManager;
};


mx.rpc.xml.SchemaProcessor.prototype.set__schemaManager = function(manager) {
  this.mx_rpc_xml_SchemaProcessor__schemaManager = manager;
};


mx.rpc.xml.SchemaProcessor.prototype.get__constants = function() {
  return this.schemaManager.schemaConstants;
};


Object.defineProperties(mx.rpc.xml.SchemaProcessor.prototype, /** @lends {mx.rpc.xml.SchemaProcessor.prototype} */ {
/**
  * @export
  * @type {mx.rpc.xml.SchemaManager} */
schemaManager: {
get: mx.rpc.xml.SchemaProcessor.prototype.get__schemaManager,
set: mx.rpc.xml.SchemaProcessor.prototype.set__schemaManager},
/**
  * @type {mx.rpc.xml.SchemaConstants} */
constants: {
get: mx.rpc.xml.SchemaProcessor.prototype.get__constants}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.SchemaProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SchemaProcessor', qName: 'mx.rpc.xml.SchemaProcessor', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.SchemaProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'schemaManager': { type: 'mx.rpc.xml.SchemaManager', access: 'readwrite', declaredBy: 'mx.rpc.xml.SchemaProcessor'}
      };
    },
    methods: function () {
      return {
        'SchemaProcessor': { type: '', declaredBy: 'mx.rpc.xml.SchemaProcessor'},
        'reset': { type: 'void', declaredBy: 'mx.rpc.xml.SchemaProcessor'},
        'isBuiltInType': { type: 'Boolean', declaredBy: 'mx.rpc.xml.SchemaProcessor', parameters: function () { return [ 'QName', false ]; }},
        'getValueOccurence': { type: 'uint', declaredBy: 'mx.rpc.xml.SchemaProcessor', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaProcessor.prototype.ROYALE_COMPILE_FLAGS = 26;
