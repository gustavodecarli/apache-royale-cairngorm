/**
 * Generated by Apache Royale Compiler from mx/events/KeyboardEvent.as
 * mx.events.KeyboardEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.events.KeyboardEvent');
/* Royale Dependency List: XML*/

goog.require('org.apache.royale.events.KeyboardEvent');



/**
 *  Constructor.
 *
 *  @asparam type The event type; indicates the action that caused the event.
 *
 *  @asparam bubbles Specifies whether the event can bubble
 *  up the display list hierarchy.
 *
 *  @asparam cancelable Specifies whether the behavior
 *  associated with the event can be prevented.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @constructor
 * @extends {org.apache.royale.events.KeyboardEvent}
 * @param {string} type
 * @param {string} key
 * @param {string} code
 * @param {boolean=} shiftKey
 * @param {boolean=} altKey
 * @param {boolean=} ctrlKey
 * @param {boolean=} metaKey
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 */
mx.events.KeyboardEvent = function(type, key, code, shiftKey, altKey, ctrlKey, metaKey, bubbles, cancelable) {
  shiftKey = typeof shiftKey !== 'undefined' ? shiftKey : false;
  altKey = typeof altKey !== 'undefined' ? altKey : false;
  ctrlKey = typeof ctrlKey !== 'undefined' ? ctrlKey : false;
  metaKey = typeof metaKey !== 'undefined' ? metaKey : false;
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  mx.events.KeyboardEvent.base(this, 'constructor', type, key, code, shiftKey, altKey, ctrlKey, metaKey, bubbles, cancelable);
};
goog.inherits(mx.events.KeyboardEvent, org.apache.royale.events.KeyboardEvent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.events.KeyboardEvent', mx.events.KeyboardEvent);


/**
 * @private
 * @param {number} s
 * @return {number}
 */
mx.events.KeyboardEvent.platformConstant = function(s) {
  return s;
};


/**
 * @private
 * @param {string} s
 * @return {string}
 */
mx.events.KeyboardEvent.platformConstant1 = function(s) {
  return s.toLowerCase();
};


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.HOME;


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.BACKSPACE;


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.LEFT;


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.RIGHT;


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.DELETE;


/**
 * @export
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.END;


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.KeyboardEvent.KEY_DOWN = "keyDown";


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.KeyboardEvent.KEY_UP = "keyUp";


mx.events.KeyboardEvent.prototype.get__keyCode = function() {
  return (this.nativeEvent["keyCode"]) >>> 0;
};


mx.events.KeyboardEvent.prototype.set__keyCode = function(val) {
};


mx.events.KeyboardEvent.prototype.get__KEY_DOWN = function() {
  return "keyDown";
};


mx.events.KeyboardEvent.prototype.set__KEY_DOWN = function(val) {
};


Object.defineProperties(mx.events.KeyboardEvent.prototype, /** @lends {mx.events.KeyboardEvent.prototype} */ {
/**
  * @export
  * @type {number} */
keyCode: {
get: mx.events.KeyboardEvent.prototype.get__keyCode,
set: mx.events.KeyboardEvent.prototype.set__keyCode},
/**
  * @export
  * @type {string} */
KEY_DOWN: {
get: mx.events.KeyboardEvent.prototype.get__KEY_DOWN,
set: mx.events.KeyboardEvent.prototype.set__KEY_DOWN}}
);


mx.events.KeyboardEvent.get__capsLock = function() {
  return true;
};


Object.defineProperties(mx.events.KeyboardEvent, /** @lends {mx.events.KeyboardEvent} */ {
/**
  * @export
  * @type {boolean} */
capsLock: {
get: mx.events.KeyboardEvent.get__capsLock}}
);

mx.events.KeyboardEvent.HOME = mx.events.KeyboardEvent.platformConstant(36);
mx.events.KeyboardEvent.BACKSPACE = mx.events.KeyboardEvent.platformConstant(8);
mx.events.KeyboardEvent.LEFT = mx.events.KeyboardEvent.platformConstant(37);
mx.events.KeyboardEvent.RIGHT = mx.events.KeyboardEvent.platformConstant(39);
mx.events.KeyboardEvent.DELETE = mx.events.KeyboardEvent.platformConstant(46);
mx.events.KeyboardEvent.END = mx.events.KeyboardEvent.platformConstant(35);




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.events.KeyboardEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'KeyboardEvent', qName: 'mx.events.KeyboardEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.events.KeyboardEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'keyCode': { type: 'uint', access: 'readwrite', declaredBy: 'mx.events.KeyboardEvent'},
        'KEY_DOWN': { type: 'String', access: 'readwrite', declaredBy: 'mx.events.KeyboardEvent'},
        '|capsLock': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.events.KeyboardEvent'}
      };
    },
    methods: function () {
      return {
        'KeyboardEvent': { type: '', declaredBy: 'mx.events.KeyboardEvent', parameters: function () { return [ 'String', false ,'String', false ,'String', false ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.events.KeyboardEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
