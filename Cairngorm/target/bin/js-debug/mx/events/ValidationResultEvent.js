/**
 * Generated by Apache Royale Compiler from mx/events/ValidationResultEvent.as
 * mx.events.ValidationResultEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.events.ValidationResultEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent,XML*/

goog.require('org.apache.royale.events.Event');



/**
 *  Constructor.
 *
 *  @asparam type The event type; indicates the action that caused the event.
 *
 *  @asparam bubbles Specifies whether the event can bubble up the 
 *  display list hierarchy.
 *
 *  @asparam cancelable Specifies whether the behavior associated with the event can be prevented.
 *
 *  @asparam field The name of the field that failed validation and triggered the event.
 *
 *  @asparam results An array of ValidationResult objects, one per validated field. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {string=} field
 * @param {Array=} results
 */
mx.events.ValidationResultEvent = function(type, bubbles, cancelable, field, results) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  field = typeof field !== 'undefined' ? field : null;
  results = typeof results !== 'undefined' ? results : null;
  mx.events.ValidationResultEvent.base(this, 'constructor', type, bubbles, cancelable);
  this.field = field;
  this.results = results;
};
goog.inherits(mx.events.ValidationResultEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.events.ValidationResultEvent', mx.events.ValidationResultEvent);


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.ValidationResultEvent.INVALID = "invalid";


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.ValidationResultEvent.VALID = "valid";


/**
 * @export
 * @type {string}
 */
mx.events.ValidationResultEvent.prototype.field;


/**
 * @export
 * @type {Array}
 */
mx.events.ValidationResultEvent.prototype.results;


/**
 *  @asprivate
 * @export
 * @override
 */
mx.events.ValidationResultEvent.prototype.cloneEvent = function() {
  return new mx.events.ValidationResultEvent(this.type, this.bubbles, this.cancelable, this.field, this.results);
};


mx.events.ValidationResultEvent.prototype.get__message = function() {
  var /** @type {number} */ n = 0;
  var /** @type {string} */ msg = "";
  //var /** @type {number} */ n = 0;
  if (this.results)
    n = (this.results.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; ++i) {
    if (this.results[i].isError) {
      msg += msg == "" ? "" : "\n";
      msg += org.apache.royale.utils.Language.string(this.results[i].errorMessage);
    }
  }
  return msg;
};


Object.defineProperties(mx.events.ValidationResultEvent.prototype, /** @lends {mx.events.ValidationResultEvent.prototype} */ {
/**
  * @export
  * @type {string} */
message: {
get: mx.events.ValidationResultEvent.prototype.get__message}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.events.ValidationResultEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ValidationResultEvent', qName: 'mx.events.ValidationResultEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.events.ValidationResultEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'field': { type: 'String', get_set: function (/** mx.events.ValidationResultEvent */ inst, /** * */ v) {return v !== undefined ? inst.field = v : inst.field;}},
        'results': { type: 'Array', get_set: function (/** mx.events.ValidationResultEvent */ inst, /** * */ v) {return v !== undefined ? inst.results = v : inst.results;}}
      };
    },
    accessors: function () {
      return {
        'message': { type: 'String', access: 'readonly', declaredBy: 'mx.events.ValidationResultEvent'}
      };
    },
    methods: function () {
      return {
        'ValidationResultEvent': { type: '', declaredBy: 'mx.events.ValidationResultEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'String', true ,'Array', true ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'mx.events.ValidationResultEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.events.ValidationResultEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
