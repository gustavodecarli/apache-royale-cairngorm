/**
 * Generated by Apache Royale Compiler from mx/core/ILayoutElement.as
 * mx.core.ILayoutElement
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.core.ILayoutElement');
/* Royale Dependency List: XML*/

goog.require('org.apache.royale.events.IEventDispatcher');



/**
 * @interface
 * @extends {org.apache.royale.events.IEventDispatcher}
 */
mx.core.ILayoutElement = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.core.ILayoutElement', mx.core.ILayoutElement);
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.left;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.right;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.top;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.bottom;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.horizontalCenter;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.verticalCenter;
/**  * @type {Object}
 */mx.core.ILayoutElement.prototype.baseline;
/**  * @type {number}
 */mx.core.ILayoutElement.prototype.baselinePosition;
/**  * @type {number}
 */mx.core.ILayoutElement.prototype.percentWidth;
/**  * @type {number}
 */mx.core.ILayoutElement.prototype.percentHeight;
/**  * @type {boolean}
 */mx.core.ILayoutElement.prototype.includeInLayout;
/**
 *  Returns the element's preferred width.   
 * 
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is <code>true</code>,
 *  the method returns the element's bounding box width.  
 *  The bounding box is in the element's parent
 *  coordinate space and is calculated from  the element's preferred size and
 *  layout transform matrix.
 *
 *  @asreturn Returns the element's preferred width.  Preferred width is
 *  usually based on the default element size and any explicit overrides.
 *  For UIComponent this is the same value as returned by 
 *  the <code>getExplicitOrMeasuredWidth()</code> method.
 * 
 *  @see #getPreferredBoundsHeight()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getPreferredBoundsWidth = function(postLayoutTransform) {
};
/**
 *  Returns the element's preferred height.  
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is <code>true</code>,
 *  the method returns the element's bounding box height.  
 *  The bounding box is in the element's parent
 *  coordinate space and is calculated from  the element's preferred size and
 *  layout transform matrix.
 *
 *  @asreturn Returns the element's preferred height.  Preferred height is
 *  usually based on the default element size and any explicit overrides.
 *  For UIComponent this is the same value as returned by 
 *  the <code>getExplicitOrMeasuredHeight()</code> method.
 *
 *  @see #getPreferredBoundsWidth()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getPreferredBoundsHeight = function(postLayoutTransform) {
};
/**
 *  Returns the element's minimum width.
 * 
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is <code>true</code>,
 *  the method returns the element's bounding box width. 
 *  The bounding box is in the element's parent
 *  coordinate space and is calculated from the element's minimum size and
 *  layout transform matrix.
 *
 *  @asreturn The element's maximum width.
 *
 *  @see #getMinBoundsHeight()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getMinBoundsWidth = function(postLayoutTransform) {
};
/**
 *  Returns the element's minimum height.
 * 
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is <code>true</code>,
 *  the method returns the element's bounding box height. 
 *  The bounding box is in the element's parent
 *  coordinate space and is calculated from the element's minimum size and
 *  layout transform matrix.
 *
 *  @asreturn The element's maximum height.
 *
 *  @see #getMinBoundsWidth()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getMinBoundsHeight = function(postLayoutTransform) {
};
/**
 *  Returns the element's maximum width.
 * 
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  the element's bounding box width. The bounding box is in the element's parent
 *  coordinate space and is calculated from the element's maximum size and
 *  layout transform matrix.
 *
 *  @asreturn The element's maximum width.
 *
 *  @see #getMaxBoundsHeight()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getMaxBoundsWidth = function(postLayoutTransform) {
};
/**
 *  Returns the element's maximum height.
 * 
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  the element's bounding box height. The bounding box is in the element's parent
 *  coordinate space and is calculated from the element's maximum size and
 *  layout transform matrix.
 *
 *  @asreturn The element's maximum height.
 *
 *  @see #getMaxBoundsWidth()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getMaxBoundsHeight = function(postLayoutTransform) {
};
/**
 *  Returns the x coordinate of the element's bounds at the specified element size.
 * 
 *  <p>This method is typically used by layouts during a call to the 
 *  <code>measure()</code> method to predict what
 *  the element position will be, if the element is resized to particular dimensions.</p>
 * 
 *  @asparam width The element's bounds width, or NaN to use the preferred width.
 *  @asparam height The element's bounds height, or NaN to use the preferred height.
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  x coordinate of the element's bounding box top-left corner.
 *  The bounding box is in element's parent coordinate space and is calculated
 *  from the specified bounds size, layout position and layout transform matrix.
 *
 *  @asreturn The x coordinate of the element's bounds at the specified element size.
 *
 *  @see #setLayoutBoundsSize()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {number} width
 * @param {number} height
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getBoundsXAtSize = function(width, height, postLayoutTransform) {
};
/**
 *  Returns the y coordinate of the element's bounds at the specified element size.
 * 
 *  This method is typically used by layouts during a call to 
 *  the <code>measure()</code> to predict what
 *  the element position will be, if the element is resized to particular dimensions.
 * 
 *  @asparam width The element's bounds width, or NaN to use the preferred width.
 *  @asparam height The element's bounds height, or NaN to use the preferred height.
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  the y coordinate of the element's bounding box top-left corner.
 *  The bounding box is in element's parent coordinate space and is calculated
 *  from the specified bounds size, layout position and layout transform matrix.
 *  
 *  @asreturn The y coordinate of the element's bounds at the specified element size.
 *
 *  @see #setLayoutBoundsSize()
 *  @see #getLayoutBoundsY()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {number} width
 * @param {number} height
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getBoundsYAtSize = function(width, height, postLayoutTransform) {
};
/**
 *  Returns the element's layout width. This is the size that the element uses
 *  to draw on screen.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  the element's bounding box width. The bounding box is in element's parent
 *  coordinate space and is calculated from the element's layout size and
 *  layout transform matrix.
 *  
 *  @asreturn The element's layout width.
 *
 *  @see #getLayoutBoundsHeight()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getLayoutBoundsWidth = function(postLayoutTransform) {
};
/**
 *  Returns the element's layout height. This is the size that the element uses
 *  to draw on screen.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  the element's bounding box width. The bounding box is in the element's parent
 *  coordinate space and is calculated from the element's layout size and
 *  layout transform matrix.
 *  
 *  @asreturn The element's layout height.
 *
 *  @see #getLayoutBoundsWidth()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getLayoutBoundsHeight = function(postLayoutTransform) {
};
/**
 *  Returns the x coordinate that the element uses to draw on screen.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  x coordinate of the element's bounding box top-left corner.
 *  The bounding box is in the element's parent coordinate space and is calculated
 *  from the element's layout size, layout position and layout transform matrix.
 * 
 *  @asreturn The x coordinate that the element uses to draw on screen.
 * 
 *  @see #getLayoutBoundsY()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getLayoutBoundsX = function(postLayoutTransform) {
};
/**
 *  Returns the y coordinate that the element uses to draw on screen.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the method returns
 *  y coordinate of the element's bounding box top-left corner.
 *  The bounding box is in the element's parent coordinate space and is calculated
 *  from the element's layout size, layout position, and layout transform matrix.
 * 
 *  @asreturn The y coordinate that the element uses to draw on screen.
 * 
 *  @see #getLayoutBoundsX()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {boolean=} postLayoutTransform
 * @return {number}
 */
mx.core.ILayoutElement.prototype.getLayoutBoundsY = function(postLayoutTransform) {
};
/**
 *  Sets the coordinates that the element uses to draw on screen.
 *
 *  <p>Note that calls to the <code>setLayoutBoundSize()</code> method can affect the layout position, so 
 *  call <code>setLayoutBoundPosition()</code> after calling <code>setLayoutBoundSize()</code>.</p>
 *
 *  @asparam x The x-coordinate of the top-left corner of the bounding box. 
 *
 *  @asparam y The y-coordinate of the top-left corner of the bounding box.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is <code>true</code>, 
 *  the element is positioned in such a way that the top-left corner of its bounding box is (x, y).
 *  The bounding box is in the element's parent coordinate space and is calculated
 *  from the element's layout size, layout position and layout transform matrix.
 *
 *  @see #setLayoutBoundsSize()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {number} x
 * @param {number} y
 * @param {boolean=} postLayoutTransform
 */
mx.core.ILayoutElement.prototype.setLayoutBoundsPosition = function(x, y, postLayoutTransform) {
};
/**
 *  Sets the layout size of the element.  
 *  This is the size that the element uses to draw on screen.
 *  
 *  <p>If the <code>width</code> and/or <code>height</code> parameters are left unspecified (NaN),
 *  Flex sets the element's layout size to its preferred width and/or preferred height.</p>
 * 
 *  <p>Note that calls to the <code>setLayoutBoundSize()</code> method can affect the layout position, so 
 *  call <code>setLayoutBoundPosition()</code> after calling <code>setLayoutBoundSize()</code>.</p>
 *
 *  @asparam width The element's layout width.
 *
 *  @asparam height The element's layout height.
 *
 *  @asparam postLayoutTransform When <code>postLayoutTransform</code> is true, the specified sizes
 *  are those of the element's bounding box.
 *  The bounding box is in the element's parent coordinate space and is calculated
 *  from the element's layout size, layout position, and layout transform matrix.
 * 
 *  @see #setLayoutBoundsPosition()
 *  @see #getLayoutMatrix()
 *  @see #getLayoutMatrix3D()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4
 * @export
 * @param {number} width
 * @param {number} height
 * @param {boolean=} postLayoutTransform
 */
mx.core.ILayoutElement.prototype.setLayoutBoundsSize = function(width, height, postLayoutTransform) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.core.ILayoutElement.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ILayoutElement', qName: 'mx.core.ILayoutElement', kind: 'interface' }], interfaces: [org.apache.royale.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.core.ILayoutElement.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'left': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'right': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'top': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'bottom': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'horizontalCenter': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'verticalCenter': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'baseline': { type: 'Object', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'baselinePosition': { type: 'Number', access: 'readonly', declaredBy: 'mx.core.ILayoutElement'},
        'percentWidth': { type: 'Number', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'percentHeight': { type: 'Number', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'},
        'includeInLayout': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.core.ILayoutElement'}
      };
    },
    methods: function () {
      return {
        'getPreferredBoundsWidth': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getPreferredBoundsHeight': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getMinBoundsWidth': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getMinBoundsHeight': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getMaxBoundsWidth': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getMaxBoundsHeight': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getBoundsXAtSize': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }},
        'getBoundsYAtSize': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }},
        'getLayoutBoundsWidth': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getLayoutBoundsHeight': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getLayoutBoundsX': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'getLayoutBoundsY': { type: 'Number', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Boolean', true ]; }},
        'setLayoutBoundsPosition': { type: 'void', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }},
        'setLayoutBoundsSize': { type: 'void', declaredBy: 'mx.core.ILayoutElement', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.core.ILayoutElement.prototype.ROYALE_COMPILE_FLAGS = 26;
