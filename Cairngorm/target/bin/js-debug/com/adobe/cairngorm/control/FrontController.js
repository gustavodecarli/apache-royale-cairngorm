/**
 * Generated by Apache Royale Compiler from com/adobe/cairngorm/control/FrontController.as
 * com.adobe.cairngorm.control.FrontController
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.adobe.cairngorm.control.FrontController');
/* Royale Dependency List: com.adobe.cairngorm.CairngormError,com.adobe.cairngorm.CairngormMessageCodes,com.adobe.cairngorm.commands.ICommand,com.adobe.cairngorm.control.CairngormEvent,com.adobe.cairngorm.control.CairngormEventDispatcher,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.describeType,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
com.adobe.cairngorm.control.FrontController = function() {

this.commands = {};
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('com.adobe.cairngorm.control.FrontController', com.adobe.cairngorm.control.FrontController);


/**
 * @protected
 * @type {Object}
 */
com.adobe.cairngorm.control.FrontController.prototype.commands = null;


/**
 * @private
 * @type {string}
 */
com.adobe.cairngorm.control.FrontController.ICommandQName = null;


/**
 * Registers a ICommand class with the Front Controller, against an event name
 * and listens for events with that name.
 *
 * <p>When an event is broadcast that matches commandName,
 * the ICommand class referred to by commandRef receives control of the
 * application, by having its execute() method invoked.</p>
 *
 * @asparam commandName The name of the event that will be broadcast by the
 * when a particular user gesture occurs, eg "login"
 *
 * @asparam commandRef An ICommand Class reference upon which execute()
 * can be called when the Front Controller hears an event broadcast with
 * commandName. Typically, this argument is passed as "LoginCommand" 
 * or similar.
 * 
 * @asparam useWeakReference A Boolean indicating whether the controller
 * should added as a weak reference to the CairngormEventDispatcher,
 * meaning it will eligibile for garbage collection if it is unloaded from 
 * the main application. Defaults to true.
 * @export
 * @param {string} commandName
 * @param {Object} commandRef
 */
com.adobe.cairngorm.control.FrontController.prototype.addCommand = function(commandName, commandRef) {
  if (commandName == null)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_NAME_NULL);
  if (commandRef == null)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_REF_NULL);
  if (this.commands[commandName] != null)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_ALREADY_REGISTERED, commandName);
  if (this.com_adobe_cairngorm_control_FrontController_implementsICommand(commandRef) == false)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_SHOULD_IMPLEMENT_ICOMMAND, commandRef);
  this.commands[commandName] = commandRef;
  com.adobe.cairngorm.control.CairngormEventDispatcher.getInstance().addEventListener(commandName, org.apache.royale.utils.Language.closure(this.executeCommand, this, 'executeCommand'), false);
};


/**
 * Deregisters an ICommand class with the given event name from the Front Controller 
 *
 * @asparam commandName The name of the event that will be broadcast by the
 * when a particular user gesture occurs, eg "login"
 *
 * @export
 * @param {string} commandName
 */
com.adobe.cairngorm.control.FrontController.prototype.removeCommand = function(commandName) {
  if (commandName === null)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_NAME_NULL, commandName);
  if (this.commands[commandName] === undefined)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_NOT_REGISTERED, commandName);
  com.adobe.cairngorm.control.CairngormEventDispatcher.getInstance().removeEventListener(commandName, org.apache.royale.utils.Language.closure(this.executeCommand, this, 'executeCommand'));
  this.commands[commandName] = undefined;
  delete this.commands[commandName];
};


/**
 * Executes the command
 * @protected
 * @param {com.adobe.cairngorm.control.CairngormEvent} event
 */
com.adobe.cairngorm.control.FrontController.prototype.executeCommand = function(event) {
  var /** @type {Object} */ commandToInitialise = this.getCommand(event.type);
  var /** @type {com.adobe.cairngorm.commands.ICommand} */ commandToExecute = /* implicit cast */ org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.resolveUncertain(new commandToInitialise()), com.adobe.cairngorm.commands.ICommand, true);
  commandToExecute.execute(event);
};


/**
 * Returns the command class registered with the command name. 
 * @protected
 * @param {string} commandName
 * @return {Object}
 */
com.adobe.cairngorm.control.FrontController.prototype.getCommand = function(commandName) {
  var /** @type {Object} */ command = /* implicit cast */ org.apache.royale.utils.Language.as(this.commands[commandName], org.apache.royale.utils.Language.synthType('Class'), true);
  if (command == null)
    throw new com.adobe.cairngorm.CairngormError(com.adobe.cairngorm.CairngormMessageCodes.COMMAND_NOT_FOUND, commandName);
  return command;
};


/**
 * Returns true or false to indicate whether the commandRef implements
 * the ICommand interface
 *
 * @royaleignorecoercion org.apache.royale.reflection.TypeDefinition
 * @private
 * @param {Object} commandRef
 * @return {boolean}
 */
com.adobe.cairngorm.control.FrontController.prototype.com_adobe_cairngorm_control_FrontController_implementsICommand = function(commandRef) {
  var /** @type {Object} */ classDescription = org.apache.royale.reflection.describeType(commandRef);
  var /** @type {Array} */ interfaces = classDescription.interfaces;
  var /** @type {boolean} */ doesImplement = false;
  if (interfaces && interfaces.length) {
    var /** @type {string} */ iCommandQName = com.adobe.cairngorm.control.FrontController.ICommandQName || (com.adobe.cairngorm.control.FrontController.ICommandQName = org.apache.royale.reflection.getQualifiedClassName(com.adobe.cairngorm.commands.ICommand));
    var /** @type {number} */ l = (interfaces.length) >>> 0;
    for (var /** @type {number} */ i = 0; i < l; i++) {
      var /** @type {Object} */ interfaceDef = interfaces[i];
      if (interfaceDef.qualifiedName == iCommandQName) {
        doesImplement = true;
        break;
      }
    }
  }
  return doesImplement;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.adobe.cairngorm.control.FrontController.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FrontController', qName: 'com.adobe.cairngorm.control.FrontController', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.adobe.cairngorm.control.FrontController.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'addCommand': { type: 'void', declaredBy: 'com.adobe.cairngorm.control.FrontController', parameters: function () { return [ 'String', false ,'Class', false ]; }},
        'removeCommand': { type: 'void', declaredBy: 'com.adobe.cairngorm.control.FrontController', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.adobe.cairngorm.control.FrontController.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.adobe.cairngorm.control.FrontController.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.adobe.cairngorm.control.FrontController);

//# sourceMappingURL=./FrontController.js.map
