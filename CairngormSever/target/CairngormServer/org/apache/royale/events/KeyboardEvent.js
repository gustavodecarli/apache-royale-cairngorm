/**
 * Generated by Apache Royale Compiler from org/apache/royale/events/KeyboardEvent.as
 * org.apache.royale.events.KeyboardEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.KeyboardEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent,org.apache.royale.events.getTargetWrapper*/
/* Royale Static Dependency List: org.apache.royale.core.ElementWrapper,org.apache.royale.events.utils.KeyboardEventConverter*/

goog.require('org.apache.royale.core.ElementWrapper');
goog.require('org.apache.royale.events.Event');
goog.require('org.apache.royale.events.utils.KeyboardEventConverter');
goog.require('org.apache.royale.core.IBead');
goog.require('org.apache.royale.core.IStrand');
goog.require('org.apache.royale.core.WrappedHTMLElement');
goog.require('org.apache.royale.events.BrowserEvent');
goog.require('org.apache.royale.events.ElementEvents');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.events.utils.EventUtils');
goog.require('org.apache.royale.utils.Language');
goog.require('org.apache.royale.events.utils.KeyConverter');
goog.require('org.apache.royale.events.IBrowserEvent');



/**
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @implements {org.apache.royale.events.IBrowserEvent}
 * @param {string} type
 * @param {string} key
 * @param {string} code
 * @param {boolean=} shiftKey
 * @param {boolean=} altKey
 * @param {boolean=} ctrlKey
 * @param {boolean=} metaKey
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 */
org.apache.royale.events.KeyboardEvent = function(type, key, code, shiftKey, altKey, ctrlKey, metaKey, bubbles, cancelable) {
  shiftKey = typeof shiftKey !== 'undefined' ? shiftKey : false;
  altKey = typeof altKey !== 'undefined' ? altKey : false;
  ctrlKey = typeof ctrlKey !== 'undefined' ? ctrlKey : false;
  metaKey = typeof metaKey !== 'undefined' ? metaKey : false;
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  org.apache.royale.events.KeyboardEvent.base(this, 'constructor', type, bubbles = false, cancelable);
  this.org_apache_royale_events_KeyboardEvent__key = key;
  this.org_apache_royale_events_KeyboardEvent__code = code;
  this.org_apache_royale_events_KeyboardEvent__shiftKey = shiftKey;
  this.org_apache_royale_events_KeyboardEvent__altKey = altKey;
  this.org_apache_royale_events_KeyboardEvent__ctrlKey = ctrlKey;
  this.org_apache_royale_events_KeyboardEvent__metaKey = metaKey;
};
goog.inherits(org.apache.royale.events.KeyboardEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.events.KeyboardEvent', org.apache.royale.events.KeyboardEvent);


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.KEY_DOWN = "keydown";


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.KEY_UP = "keyup";


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_UP = 38;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_DOWN = 40;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_LEFT = 37;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_RIGHT = 39;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_PAGEUP = 33;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_PAGEDOWN = 34;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_HOME = 36;


/**
 * @export
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.KEYCODE_END = 35;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent_wrappedEvent;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype.nativeEvent;


/**
 * @export
 * @param {goog.events.BrowserEvent} event
 */
org.apache.royale.events.KeyboardEvent.prototype.wrapEvent = function(event) {
  this.org_apache_royale_events_KeyboardEvent_wrappedEvent = event;
  this.nativeEvent = event.getBrowserEvent();
};


/**
 * @private
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__target;


/**
 * @private
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__key;


/**
 * @private
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__code;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__altKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__ctrlKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__metaKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__shiftKey;


/**
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.stopImmediatePropagation = function() {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent) {
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.stopPropagation();
    this.nativeEvent.stopImmediatePropagation();
  }
};


/**
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.stopPropagation = function() {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.stopPropagation();
};


/**
 * Whether the default action has been prevented.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.preventDefault = function() {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.preventDefault(); else {
    org.apache.royale.events.KeyboardEvent.superClass_.preventDefault.apply(this);
    this.org_apache_royale_events_KeyboardEvent__defaultPrevented = true;
  }
};


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype.org_apache_royale_events_KeyboardEvent__defaultPrevented;


/**
 * Create a copy/clone of the KeyboardEvent object.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.events.KeyboardEvent(this.type, this.key, this.code, this.shiftKey, this.altKey, this.ctrlKey, this.metaKey, this.bubbles, this.cancelable);
};


/**
 * @export
 * @return {boolean}
 */
org.apache.royale.events.KeyboardEvent.setupConverter = function() {
  org.apache.royale.core.ElementWrapper.converterMap["KeyboardEvent"] = org.apache.royale.events.utils.KeyboardEventConverter;
  return true;
};


/**
 * @export
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.initialized;


org.apache.royale.events.KeyboardEvent.prototype.get__target = function() {
  return this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? org.apache.royale.events.getTargetWrapper(this.org_apache_royale_events_KeyboardEvent_wrappedEvent.target) : this.org_apache_royale_events_KeyboardEvent__target;
};


org.apache.royale.events.KeyboardEvent.prototype.set__target = function(value) {
  this.org_apache_royale_events_KeyboardEvent__target = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__currentTarget = function() {
  return this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? org.apache.royale.events.getTargetWrapper(this.org_apache_royale_events_KeyboardEvent_wrappedEvent.currentTarget) : this.org_apache_royale_events_KeyboardEvent__target;
};


org.apache.royale.events.KeyboardEvent.prototype.set__currentTarget = function(value) {
  this.org_apache_royale_events_KeyboardEvent__target = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__key = function() {
  return this.org_apache_royale_events_KeyboardEvent__key;
};


org.apache.royale.events.KeyboardEvent.prototype.set__key = function(value) {
  this.org_apache_royale_events_KeyboardEvent__key = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__code = function() {
  return this.org_apache_royale_events_KeyboardEvent__code;
};


org.apache.royale.events.KeyboardEvent.prototype.set__code = function(value) {
  this.org_apache_royale_events_KeyboardEvent__code = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__altKey = function() {
  return !!(this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? this.org_apache_royale_events_KeyboardEvent_wrappedEvent.altKey : this.org_apache_royale_events_KeyboardEvent__altKey);
};


org.apache.royale.events.KeyboardEvent.prototype.set__altKey = function(value) {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.altKey = value;
  else
    this.org_apache_royale_events_KeyboardEvent__altKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__ctrlKey = function() {
  return !!(this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? this.org_apache_royale_events_KeyboardEvent_wrappedEvent.ctrlKey : this.org_apache_royale_events_KeyboardEvent__ctrlKey);
};


org.apache.royale.events.KeyboardEvent.prototype.set__ctrlKey = function(value) {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.ctrlKey = value;
  else
    this.org_apache_royale_events_KeyboardEvent__ctrlKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__metaKey = function() {
  return !!(this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? this.org_apache_royale_events_KeyboardEvent_wrappedEvent.metaKey : this.org_apache_royale_events_KeyboardEvent__metaKey);
};


org.apache.royale.events.KeyboardEvent.prototype.set__metaKey = function(value) {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.metaKey = value;
  else
    this.org_apache_royale_events_KeyboardEvent__metaKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__shiftKey = function() {
  return !!(this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? this.org_apache_royale_events_KeyboardEvent_wrappedEvent.shiftKey : this.org_apache_royale_events_KeyboardEvent__shiftKey);
};


org.apache.royale.events.KeyboardEvent.prototype.set__shiftKey = function(value) {
  if (this.org_apache_royale_events_KeyboardEvent_wrappedEvent)
    this.org_apache_royale_events_KeyboardEvent_wrappedEvent.shiftKey = value;
  else
    this.org_apache_royale_events_KeyboardEvent__shiftKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__modifierKey = function() {
  return this.shiftKey || this.ctrlKey || this.metaKey;
};


org.apache.royale.events.KeyboardEvent.prototype.get__defaultPrevented = function() {
  return !!(this.org_apache_royale_events_KeyboardEvent_wrappedEvent ? this.org_apache_royale_events_KeyboardEvent_wrappedEvent.defaultPrevented : this.org_apache_royale_events_KeyboardEvent__defaultPrevented);
};


org.apache.royale.events.KeyboardEvent.prototype.set__defaultPrevented = function(value) {
  this.org_apache_royale_events_KeyboardEvent__defaultPrevented = value;
};


Object.defineProperties(org.apache.royale.events.KeyboardEvent.prototype, /** @lends {org.apache.royale.events.KeyboardEvent.prototype} */ {
/**
  * @export
  * @type {Object} */
target: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__target,
set: org.apache.royale.events.KeyboardEvent.prototype.set__target},
/**
  * @export
  * @type {Object} */
currentTarget: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__currentTarget,
set: org.apache.royale.events.KeyboardEvent.prototype.set__currentTarget},
/**
  * @export
  * @type {string} */
key: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__key,
set: org.apache.royale.events.KeyboardEvent.prototype.set__key},
/**
  * @export
  * @type {string} */
code: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__code,
set: org.apache.royale.events.KeyboardEvent.prototype.set__code},
/**
  * @export
  * @type {boolean} */
altKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__altKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__altKey},
/**
  * @export
  * @type {boolean} */
ctrlKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__ctrlKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__ctrlKey},
/**
  * @export
  * @type {boolean} */
metaKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__metaKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__metaKey},
/**
  * @export
  * @type {boolean} */
shiftKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__shiftKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__shiftKey},
/**
  * @export
  * @type {boolean} */
modifierKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__modifierKey},
/**
  * @export
  * @type {boolean} */
defaultPrevented: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__defaultPrevented,
set: org.apache.royale.events.KeyboardEvent.prototype.set__defaultPrevented}}
);

org.apache.royale.events.KeyboardEvent.initialized = org.apache.royale.events.KeyboardEvent.setupConverter();




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.KeyboardEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'KeyboardEvent', qName: 'org.apache.royale.events.KeyboardEvent', kind: 'class' }], interfaces: [org.apache.royale.events.IBrowserEvent] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.KeyboardEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'nativeEvent': { type: 'Object', get_set: function (/** org.apache.royale.events.KeyboardEvent */ inst, /** * */ v) {return v !== undefined ? inst.nativeEvent = v : inst.nativeEvent;}},
        '|initialized': { type: 'Boolean', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.events.KeyboardEvent.initialized = v : org.apache.royale.events.KeyboardEvent.initialized;}}
      };
    },
    accessors: function () {
      return {
        'target': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'currentTarget': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'key': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'code': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'altKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'ctrlKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'metaKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'shiftKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'modifierKey': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'defaultPrevented': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'}
      };
    },
    methods: function () {
      return {
        'wrapEvent': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent', parameters: function () { return [ 'goog.events.BrowserEvent', false ]; }},
        'KeyboardEvent': { type: '', declaredBy: 'org.apache.royale.events.KeyboardEvent', parameters: function () { return [ 'String', false ,'String', false ,'String', false ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ]; }},
        'stopImmediatePropagation': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'stopPropagation': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'preventDefault': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        '|setupConverter': { type: 'Boolean', declaredBy: 'org.apache.royale.events.KeyboardEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.events.KeyboardEvent.prototype.ROYALE_COMPILE_FLAGS = 10;
