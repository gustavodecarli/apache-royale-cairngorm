/**
 * Generated by Apache Royale Compiler from mx/styles/IStyleManager.as
 * mx.styles.IStyleManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.styles.IStyleManager');
/* Royale Dependency List: mx.styles.CSSStyleDeclaration,XML*/




/**
 * @interface
 */
mx.styles.IStyleManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.styles.IStyleManager', mx.styles.IStyleManager);
/**
 *  Gets the CSSStyleDeclaration object that stores the rules
 *  for the specified CSS selector.
 *
 *  <p>If the <code>selector</code> parameter starts with a period (.),
 *  the returned CSSStyleDeclaration is a class selector and applies only to those instances
 *  whose <code>styleName</code> property specifies that selector
 *  (not including the period).
 *  For example, the class selector <code>".bigMargins"</code>
 *  applies to any UIComponent whose <code>styleName</code>
 *  is <code>"bigMargins"</code>.</p>
 *
 *  <p>If the <code>selector</code> parameter does not start with a period,
 *  the returned CSSStyleDeclaration is a type selector and applies to all instances
 *  of that type.
 *  For example, the type selector <code>"Button"</code>
 *  applies to all instances of Button and its subclasses.</p>
 *
 *  <p>The <code>global</code> selector is similar to a type selector
 *  and does not start with a period.</p>
 *
 *  @asparam selector The name of the CSS selector.
 *
 *  @asreturn The style declaration whose name matches the <code>selector</code> property.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} selector
 * @return {mx.styles.CSSStyleDeclaration}
 */
mx.styles.IStyleManager.prototype.getStyleDeclaration = function(selector) {
};
/**
 *  Sets the CSSStyleDeclaration object that stores the rules
 *  for the specified CSS selector.
 *
 *  <p>If the <code>selector</code> parameter starts with a period (.),
 *  the specified selector is a "class selector" and applies only to those instances
 *  whose <code>styleName</code> property specifies that selector
 *  (not including the period).
 *  For example, the class selector <code>".bigMargins"</code>
 *  applies to any UIComponent whose <code>styleName</code>
 *  is <code>"bigMargins"</code>.</p>
 *
 *  <p>If the <code>selector</code> parameter does not start with a period,
 *  the specified selector is a "type selector" and applies to all instances
 *  of that type.
 *  For example, the type selector <code>"Button"</code>
 *  applies to all instances of Button and its subclasses.</p>
 *
 *  <p>The <code>global</code> selector is similar to a type selector
 *  and does not start with a period.</p>
 *
 *  @asparam selector The name of the CSS selector.
 *  @asparam styleDeclaration The new style declaration.
 *  @asparam update Set to <code>true</code> to force an immediate update of the styles; internally, Flex
 *  calls the <code>styleChanged()</code> method of UIComponent.
 *  Set to <code>false</code> to avoid an immediate update of the styles in the application.
 * 
 *  <p>The styles will be updated the next time one of the following methods is called with
 *  the <code>update</code> property set to <code>true</code>:
 *  <ul>
 *   <li><code>clearStyleDeclaration()</code></li>
 *   <li><code>loadStyleDeclarations()</code></li>
 *   <li><code>setStyleDeclaration()</code></li>
 *   <li><code>unloadStyleDeclarations()</code></li>
 *  </ul>
 *  </p>
 * 
 *  <p>Typically, if you call the one of these methods multiple times, 
 *  you set this property to <code>true</code> only on the last call,
 *  so that Flex does not call the <code>styleChanged()</code> method multiple times.</p>
 * 
 *  <p>If you call the <code>getStyle()</code> method, Flex returns the style value 
 *  that was last applied to the UIComponent through a call to the <code>styleChanged()</code> method. 
 *  The component's appearance might not reflect the value returned by the <code>getStyle()</code> method. This occurs
 *  because one of these style declaration methods might not yet have been called with the 
 *  <code>update</code> property set to <code>true</code>.</p>
 *  
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} selector
 * @param {mx.styles.CSSStyleDeclaration} styleDeclaration
 * @param {boolean} update
 */
mx.styles.IStyleManager.prototype.setStyleDeclaration = function(selector, styleDeclaration, update) {
};
/**
 *  Determines if a specified parameter is a valid style property. For example:
 *
 *  <pre>
 *  trace(StyleManager.isValidStyleValue(myButton.getStyle("color")).toString());
 *  </pre>
 *
 *  <p>This can be useful because some styles can be set to values
 *  such as 0, <code>NaN</code>,
 *  the empty String (<code>""</code>), or <code>null</code>, which can
 *  cause an <code>if (value)</code> test to fail.</p>
 *
 *  @asparam value The style property to test.
 *
 *  @asreturn If you pass the value returned by a <code>getStyle()</code> method call
 *  to this method, it returns <code>true</code> if the style
 *  was set and <code>false</code> if it was not set.
 *
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @return {boolean}
 */
mx.styles.IStyleManager.prototype.isValidStyleValue = function(value) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.styles.IStyleManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IStyleManager', qName: 'mx.styles.IStyleManager', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.styles.IStyleManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'getStyleDeclaration': { type: 'mx.styles.CSSStyleDeclaration', declaredBy: 'mx.styles.IStyleManager', parameters: function () { return [ 'String', false ]; }},
        'setStyleDeclaration': { type: 'void', declaredBy: 'mx.styles.IStyleManager', parameters: function () { return [ 'String', false ,'mx.styles.CSSStyleDeclaration', false ,'Boolean', false ]; }},
        'isValidStyleValue': { type: 'Boolean', declaredBy: 'mx.styles.IStyleManager', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.styles.IStyleManager.prototype.ROYALE_COMPILE_FLAGS = 26;
