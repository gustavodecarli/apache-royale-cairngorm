/**
 * Generated by Apache Royale Compiler from mx/messaging/channels/DirectHTTPChannel.as
 * mx.messaging.channels.DirectHTTPChannel
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.channels.DirectHTTPChannel');
/* Royale Dependency List: XML,mx.core.mx_internal,mx.events.ErrorEvent,mx.events.HTTPStatusEvent,mx.events.IOErrorEvent,mx.events.SecurityErrorEvent,mx.messaging.MessageAgent,mx.messaging.channels.URLVariables,mx.messaging.errors.ChannelError,mx.messaging.errors.InvalidChannelError,mx.messaging.errors.MessageSerializationError,mx.messaging.messages.AbstractMessage,mx.messaging.messages.AcknowledgeMessage,mx.messaging.messages.ErrorMessage,mx.messaging.messages.HTTPRequestMessage,mx.messaging.messages.IMessage,mx.netmon.NetworkMonitor,mx.resources.IResourceManager,mx.resources.ResourceManager,org.apache.royale.events.Event,org.apache.royale.net.URLLoader,org.apache.royale.net.URLRequest,org.apache.royale.net.URLRequestHeader,org.apache.royale.utils.Language*/
goog.provide('mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder');

goog.require('mx.messaging.Channel');
goog.require('mx.messaging.MessageResponder');



/**
 *  Constructs an instance of a DirectHTTPChannel.
 *  The parameters are not used.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @constructor
 * @extends {mx.messaging.Channel}
 * @param {string} id
 * @param {string=} uri
 */
mx.messaging.channels.DirectHTTPChannel = function(id, uri) {
  uri = typeof uri !== 'undefined' ? uri : "";
  
  this.mx_messaging_channels_DirectHTTPChannel_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.messaging.channels.DirectHTTPChannel.base(this, 'constructor', id, uri);
  if (uri.length > 0) {
    var /** @type {string} */ message = this.mx_messaging_channels_DirectHTTPChannel_resourceManager.getString("messaging", "noURIAllowed");
    throw new mx.messaging.errors.InvalidChannelError(message);
  }
  this.http_$$www_adobe_com$2006$flex$mx$internal__clientId = ("DirectHTTPChannel" + mx.messaging.channels.DirectHTTPChannel.clientCounter++);
};
goog.inherits(mx.messaging.channels.DirectHTTPChannel, mx.messaging.Channel);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.channels.DirectHTTPChannel', mx.messaging.channels.DirectHTTPChannel);


/**
 * @type {string}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.http_$$www_adobe_com$2006$flex$mx$internal__clientId;


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.mx_messaging_channels_DirectHTTPChannel_resourceManager;


/**
 *  Returns the appropriate MessageResponder for the Channel.
 *
 *  @asparam agent The MessageAgent sending the message.
 * 
 *  @asparam message The IMessage to send.
 * 
 *  @asreturn The MessageResponder to handle the send result or fault.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @override
 */
mx.messaging.channels.DirectHTTPChannel.prototype.getMessageResponder = function(agent, message) {
  return new mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder(agent, message, this, new org.apache.royale.net.URLLoader());
};


/**
 *  Because this channel doesn't participate in hunting we will always assume
 *  that we have connected.
 *
 *  @asprivate
 * @export
 * @override
 */
mx.messaging.channels.DirectHTTPChannel.prototype.internalConnect = function() {
  this.connectSuccess();
};


/**
 * @export
 * @override
 */
mx.messaging.channels.DirectHTTPChannel.prototype.internalSend = function(msgResp) {
  var /** @type {mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder} */ httpMsgResp = org.apache.royale.utils.Language.as(msgResp, mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder, true);
  var /** @type {org.apache.royale.net.URLRequest} */ urlRequest;
  try {
    urlRequest = this.http_$$www_adobe_com$2006$flex$mx$internal__createURLRequest(httpMsgResp.message);
  } catch (e) {
    httpMsgResp.agent.fault(e.fault, httpMsgResp.message);
    return;
  }
  var /** @type {org.apache.royale.net.URLLoader} */ urlLoader = httpMsgResp.urlLoader;
  urlLoader.addEventListener(mx.events.ErrorEvent.ERROR, org.apache.royale.utils.Language.closure(httpMsgResp.errorHandler, httpMsgResp, 'errorHandler'));
  urlLoader.addEventListener(mx.events.IOErrorEvent.IO_ERROR, org.apache.royale.utils.Language.closure(httpMsgResp.errorHandler, httpMsgResp, 'errorHandler'));
  urlLoader.addEventListener(mx.events.SecurityErrorEvent.SECURITY_ERROR, org.apache.royale.utils.Language.closure(httpMsgResp.securityErrorHandler, httpMsgResp, 'securityErrorHandler'));
  urlLoader.addEventListener(org.apache.royale.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(httpMsgResp.completeHandler, httpMsgResp, 'completeHandler'));
  urlLoader.addEventListener(mx.events.HTTPStatusEvent.HTTP_STATUS, org.apache.royale.utils.Language.closure(httpMsgResp.httpStatusHandler, httpMsgResp, 'httpStatusHandler'));
  urlLoader.load(urlRequest);
};


/**
 * @asprivate
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @return {org.apache.royale.net.URLRequest}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.http_$$www_adobe_com$2006$flex$mx$internal__createURLRequest = function(message) {
  var /** @type {mx.messaging.messages.HTTPRequestMessage} */ httpMsg = org.apache.royale.utils.Language.as(message, mx.messaging.messages.HTTPRequestMessage, true);
  var /** @type {org.apache.royale.net.URLRequest} */ result = new org.apache.royale.net.URLRequest();
  var /** @type {string} */ url = httpMsg.url;
  var /** @type {string} */ params = null;
  if ("idleTimeout" in result && this.requestTimeout > 0)
    result["idleTimeout"] = this.requestTimeout * 1000;
  result.contentType = httpMsg.contentType;
  var /** @type {boolean} */ contentTypeIsXML = result.contentType == mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_XML || result.contentType == mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_SOAP_XML;
  var /** @type {Object} */ headers = httpMsg.httpHeaders;
  if (headers) {
    var /** @type {Array} */ requestHeaders = [];
    var /** @type {org.apache.royale.net.URLRequestHeader} */ header;
    for (var /** @type {string} */ h in headers) {
      header = new org.apache.royale.net.URLRequestHeader(h, headers[h]);
      requestHeaders.push(header);
    }
    result.requestHeaders = requestHeaders;
  }
  if (!contentTypeIsXML) {
    
    var /** @type {mx.messaging.channels.URLVariables} */ urlVariables = new mx.messaging.channels.URLVariables();
    var /** @type {Object} */ body = httpMsg.body;
    for (var /** @type {string} */ p in body)
      urlVariables[p] = httpMsg.body[p];
    params = urlVariables.toString();
  }
  if (httpMsg.method == mx.messaging.messages.HTTPRequestMessage.POST_METHOD || contentTypeIsXML) {
    result.method = "POST";
    if (result.contentType == mx.messaging.messages.HTTPRequestMessage.CONTENT_TYPE_FORM)
      result.data = params; else {
      if (httpMsg.body != null && org.apache.royale.utils.Language.is(httpMsg.body, XML))
        result.data = XML.conversion(httpMsg.body).toXMLString();
      else
        result.data = httpMsg.body;
    }
  } else {
    if (params && params != "") {
      url += (url.indexOf("?") > -1) ? '&' : '?';
      url += params;
    }
  }
  result.url = url;
  if (mx.netmon.NetworkMonitor.isMonitoring()) {
  }{}
  
  return result;
};


/**
 * @export
 * @override
 */
mx.messaging.channels.DirectHTTPChannel.prototype.setCredentials = function(credentials, agent, charset) {
  agent = typeof agent !== 'undefined' ? agent : null;
  charset = typeof charset !== 'undefined' ? charset : null;
  var /** @type {string} */ message = this.mx_messaging_channels_DirectHTTPChannel_resourceManager.getString("messaging", "authenticationNotSupported");
  throw new mx.messaging.errors.ChannelError(message);
};


/**
 * @private
 * @type {number}
 */
mx.messaging.channels.DirectHTTPChannel.clientCounter = 0;


mx.messaging.channels.DirectHTTPChannel.prototype.get__connected = function() {
  return true;
};


mx.messaging.channels.DirectHTTPChannel.prototype.get__protocol = function() {
  return "http";
};


mx.messaging.channels.DirectHTTPChannel.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__realtime = function() {
  return false;
};


Object.defineProperties(mx.messaging.channels.DirectHTTPChannel.prototype, /** @lends {mx.messaging.channels.DirectHTTPChannel.prototype} */ {
/**
  * @export
  * @type {boolean} */
connected: {
get: mx.messaging.channels.DirectHTTPChannel.prototype.get__connected},
/**
  * @export
  * @type {string} */
protocol: {
get: mx.messaging.channels.DirectHTTPChannel.prototype.get__protocol},
/**
  * @export
  * @type {boolean} */
http_$$www_adobe_com$2006$flex$mx$internal__realtime: {
get: mx.messaging.channels.DirectHTTPChannel.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__realtime}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DirectHTTPChannel', qName: 'mx.messaging.channels.DirectHTTPChannel', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::clientId': { type: 'String', get_set: function (/** mx.messaging.channels.DirectHTTPChannel */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__clientId = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__clientId;}}
      };
    },
    accessors: function () {
      return {
        'connected': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.messaging.channels.DirectHTTPChannel'},
        'protocol': { type: 'String', access: 'readonly', declaredBy: 'mx.messaging.channels.DirectHTTPChannel'},
        'http://www.adobe.com/2006/flex/mx/internal::realtime': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.messaging.channels.DirectHTTPChannel'}
      };
    },
    methods: function () {
      return {
        'DirectHTTPChannel': { type: '', declaredBy: 'mx.messaging.channels.DirectHTTPChannel', parameters: function () { return [ 'String', false ,'String', true ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::createURLRequest': { type: 'org.apache.royale.net.URLRequest', declaredBy: 'mx.messaging.channels.DirectHTTPChannel', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ]; }},
        'setCredentials': { type: 'void', declaredBy: 'mx.messaging.channels.DirectHTTPChannel', parameters: function () { return [ 'String', false ,'mx.messaging.MessageAgent', true ,'String', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.channels.DirectHTTPChannel.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 *  Constructs a DirectHTTPMessageResponder.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @constructor
 * @extends {mx.messaging.MessageResponder}
 * @param {mx.messaging.MessageAgent} agent
 * @param {mx.messaging.messages.IMessage} msg
 * @param {mx.messaging.channels.DirectHTTPChannel} channel
 * @param {org.apache.royale.net.URLLoader} urlLoader
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder = function(agent, msg, channel, urlLoader) {
  
  this.DirectHTTPMessageResponder_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.base(this, 'constructor', agent, msg, channel);
  this.urlLoader = urlLoader;
  this.DirectHTTPMessageResponder_clientId = channel.http_$$www_adobe_com$2006$flex$mx$internal__clientId;
};
goog.inherits(mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder, mx.messaging.MessageResponder);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder);


/**
 * @private
 * @type {string}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.DirectHTTPMessageResponder_clientId;


/**
 * @private
 * @type {number}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.DirectHTTPMessageResponder_lastStatus = 0;


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.DirectHTTPMessageResponder_resourceManager;


/**
 * @export
 * @type {org.apache.royale.net.URLLoader}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.urlLoader;


/**
 *  @asprivate
 * @export
 * @param {org.apache.royale.events.Event} event
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.errorHandler = function(event) {
  this.status(null);
  var /** @type {mx.messaging.messages.AcknowledgeMessage} */ ack = new mx.messaging.messages.AcknowledgeMessage();
  ack.clientId = this.DirectHTTPMessageResponder_clientId;
  ack.correlationId = this.message.messageId;
  ack.headers[mx.messaging.messages.AcknowledgeMessage.ERROR_HINT_HEADER] = true;
  this.agent.acknowledge(ack, this.message);
  var /** @type {mx.messaging.messages.ErrorMessage} */ msg = new mx.messaging.messages.ErrorMessage();
  msg.clientId = this.DirectHTTPMessageResponder_clientId;
  msg.correlationId = this.message.messageId;
  msg.faultCode = "Server.Error.Request";
  msg.faultString = this.DirectHTTPMessageResponder_resourceManager.getString("messaging", "httpRequestError");
  var /** @type {string} */ details = event.toString();
  if (org.apache.royale.utils.Language.is(this.message, mx.messaging.messages.HTTPRequestMessage)) {
    details += ". URL: ";
    details += org.apache.royale.utils.Language.as(this.message, mx.messaging.messages.HTTPRequestMessage, true).url;
  }
  msg.faultDetail = this.DirectHTTPMessageResponder_resourceManager.getString("messaging", "httpRequestError.details", [details]);
  msg.rootCause = event;
  msg.body = org.apache.royale.utils.Language.as(event.target, org.apache.royale.net.URLLoader, true).data;
  msg.headers[mx.messaging.messages.AbstractMessage.STATUS_CODE_HEADER] = this.DirectHTTPMessageResponder_lastStatus;
  this.agent.fault(msg, this.message);
};


/**
 *  @asprivate
 * @export
 * @param {org.apache.royale.events.Event} event
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.securityErrorHandler = function(event) {
  this.status(null);
  var /** @type {mx.messaging.messages.AcknowledgeMessage} */ ack = new mx.messaging.messages.AcknowledgeMessage();
  ack.clientId = this.DirectHTTPMessageResponder_clientId;
  ack.correlationId = this.message.messageId;
  ack.headers[mx.messaging.messages.AcknowledgeMessage.ERROR_HINT_HEADER] = true;
  this.agent.acknowledge(ack, this.message);
  var /** @type {mx.messaging.messages.ErrorMessage} */ msg = new mx.messaging.messages.ErrorMessage();
  msg.clientId = this.DirectHTTPMessageResponder_clientId;
  msg.correlationId = this.message.messageId;
  msg.faultCode = "Channel.Security.Error";
  msg.faultString = this.DirectHTTPMessageResponder_resourceManager.getString("messaging", "securityError");
  msg.faultDetail = this.DirectHTTPMessageResponder_resourceManager.getString("messaging", "securityError.details", [this.message.destination]);
  msg.rootCause = event;
  msg.body = org.apache.royale.utils.Language.as(event.target, org.apache.royale.net.URLLoader, true).data;
  msg.headers[mx.messaging.messages.AbstractMessage.STATUS_CODE_HEADER] = this.DirectHTTPMessageResponder_lastStatus;
  this.agent.fault(msg, this.message);
};


/**
 *  @asprivate
 * @export
 * @param {org.apache.royale.events.Event} event
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.completeHandler = function(event) {
  this.result(null);
  var /** @type {mx.messaging.messages.AcknowledgeMessage} */ ack = new mx.messaging.messages.AcknowledgeMessage();
  ack.clientId = this.DirectHTTPMessageResponder_clientId;
  ack.correlationId = this.message.messageId;
  ack.body = org.apache.royale.utils.Language.as(event.target, org.apache.royale.net.URLLoader, true).data;
  ack.headers[mx.messaging.messages.AbstractMessage.STATUS_CODE_HEADER] = this.DirectHTTPMessageResponder_lastStatus;
  this.agent.acknowledge(ack, this.message);
};


/**
 *  @asprivate
 * @export
 * @param {mx.events.HTTPStatusEvent} event
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.httpStatusHandler = function(event) {
  
};


/**
 *  Handle a request timeout by closing our associated URLLoader and
 *  faulting the message to the agent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @override
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.requestTimedOut = function() {
  this.urlLoader.removeEventListener(mx.events.ErrorEvent.ERROR, org.apache.royale.utils.Language.closure(this.errorHandler, this, 'errorHandler'));
  this.urlLoader.removeEventListener(mx.events.IOErrorEvent.IO_ERROR, org.apache.royale.utils.Language.closure(this.errorHandler, this, 'errorHandler'));
  this.urlLoader.removeEventListener(mx.events.SecurityErrorEvent.SECURITY_ERROR, org.apache.royale.utils.Language.closure(this.securityErrorHandler, this, 'securityErrorHandler'));
  this.urlLoader.removeEventListener(org.apache.royale.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.completeHandler, this, 'completeHandler'));
  this.urlLoader.removeEventListener(mx.events.HTTPStatusEvent.HTTP_STATUS, org.apache.royale.utils.Language.closure(this.httpStatusHandler, this, 'httpStatusHandler'));
  this.status(null);
  var /** @type {mx.messaging.messages.AcknowledgeMessage} */ ack = new mx.messaging.messages.AcknowledgeMessage();
  ack.clientId = this.DirectHTTPMessageResponder_clientId;
  ack.correlationId = this.message.messageId;
  ack.headers[mx.messaging.messages.AcknowledgeMessage.ERROR_HINT_HEADER] = true;
  this.agent.acknowledge(ack, this.message);
  this.agent.fault(this.createRequestTimeoutErrorMessage(), this.message);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DirectHTTPMessageResponder', qName: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'urlLoader': { type: 'org.apache.royale.net.URLLoader', get_set: function (/** mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder */ inst, /** * */ v) {return v !== undefined ? inst.urlLoader = v : inst.urlLoader;}}
      };
    },
    methods: function () {
      return {
        'DirectHTTPMessageResponder': { type: '', declaredBy: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', parameters: function () { return [ 'mx.messaging.MessageAgent', false ,'mx.messaging.messages.IMessage', false ,'mx.messaging.channels.DirectHTTPChannel', false ,'org.apache.royale.net.URLLoader', false ]; }},
        'errorHandler': { type: 'void', declaredBy: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'securityErrorHandler': { type: 'void', declaredBy: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'completeHandler': { type: 'void', declaredBy: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'httpStatusHandler': { type: 'void', declaredBy: 'mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder', parameters: function () { return [ 'mx.events.HTTPStatusEvent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.channels.DirectHTTPChannel.DirectHTTPMessageResponder.prototype.ROYALE_COMPILE_FLAGS = 26;
