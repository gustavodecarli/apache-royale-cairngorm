/**
 * Generated by Apache Royale Compiler from mx/core/IUITextField.as
 * mx.core.IUITextField
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.core.IUITextField');
/* Royale Dependency List: mx.core.UITextFormat,XML*/

goog.require('mx.core.IUIComponent');



/**
 * @interface
 * @extends {mx.core.IUIComponent}
 */
mx.core.IUITextField = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.core.IUITextField', mx.core.IUITextField);
/**  * @type {string}
 */mx.core.IUITextField.prototype.htmlText;
/**  * @type {string}
 */mx.core.IUITextField.prototype.text;
/**  * @type {number}
 */mx.core.IUITextField.prototype.textWidth;
/**  * @type {number}
 */mx.core.IUITextField.prototype.textHeight;
/**  * @type {boolean}
 */mx.core.IUITextField.prototype.wordWrap;
/**
 *  @copy mx.core.UITextField#getStyle()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} styleProp
 * @return {*}
 */
mx.core.IUITextField.prototype.getStyle = function(styleProp) {
};
/**
 *  @copy mx.core.UITextField#getUITextFormat()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {mx.core.UITextFormat}
 */
mx.core.IUITextField.prototype.getUITextFormat = function() {
};
/**
 *  @copy mx.core.UITextField#setColor()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} color
 */
mx.core.IUITextField.prototype.setColor = function(color) {
};
mx.core.IUITextField.prototype.setFocus = function() {
};
/**
 *  @copy mx.core.UITextField#truncateToFit()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string=} truncationIndicator
 * @return {boolean}
 */
mx.core.IUITextField.prototype.truncateToFit = function(truncationIndicator) {
};
/**
 * @export
 * @param {mx.core.UITextFormat} format
 * @param {number=} beginIndex
 * @param {number=} endIndex
 */
mx.core.IUITextField.prototype.setTextFormat = function(format, beginIndex, endIndex) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.core.IUITextField.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IUITextField', qName: 'mx.core.IUITextField', kind: 'interface' }], interfaces: [mx.core.IUIComponent] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.core.IUITextField.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'htmlText': { type: 'String', access: 'readwrite', declaredBy: 'mx.core.IUITextField'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'mx.core.IUITextField'},
        'textWidth': { type: 'Number', access: 'readonly', declaredBy: 'mx.core.IUITextField'},
        'textHeight': { type: 'Number', access: 'readonly', declaredBy: 'mx.core.IUITextField'},
        'wordWrap': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.core.IUITextField'}
      };
    },
    methods: function () {
      return {
        'getStyle': { type: '*', declaredBy: 'mx.core.IUITextField', parameters: function () { return [ 'String', false ]; }},
        'getUITextFormat': { type: 'mx.core.UITextFormat', declaredBy: 'mx.core.IUITextField'},
        'setColor': { type: 'void', declaredBy: 'mx.core.IUITextField', parameters: function () { return [ 'uint', false ]; }},
        'setFocus': { type: 'void', declaredBy: 'mx.core.IUITextField'},
        'truncateToFit': { type: 'Boolean', declaredBy: 'mx.core.IUITextField', parameters: function () { return [ 'String', true ]; }},
        'setTextFormat': { type: 'void', declaredBy: 'mx.core.IUITextField', parameters: function () { return [ 'mx.core.UITextFormat', false ,'int', true ,'int', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.core.IUITextField.prototype.ROYALE_COMPILE_FLAGS = 26;
