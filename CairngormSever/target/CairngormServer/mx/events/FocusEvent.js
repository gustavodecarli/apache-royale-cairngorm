/**
 * Generated by Apache Royale Compiler from mx/events/FocusEvent.as
 * mx.events.FocusEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.events.FocusEvent');
/* Royale Dependency List: XML*/

goog.require('org.apache.royale.events.Event');



/**
 *  Constructor.
 *
 *  @asparam type The event type; indicates the action that caused the event.
 *
 *  @asparam bubbles Specifies whether the event can bubble
 *  up the display list hierarchy.
 *
 *  @asparam cancelable Specifies whether the behavior
 *  associated with the event can be prevented.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {Object=} relatedObject
 * @param {boolean=} shiftKey
 * @param {number=} keyCode
 * @param {string=} direction
 */
mx.events.FocusEvent = function(type, bubbles, cancelable, relatedObject, shiftKey, keyCode, direction) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  relatedObject = typeof relatedObject !== 'undefined' ? relatedObject : null;
  shiftKey = typeof shiftKey !== 'undefined' ? shiftKey : false;
  keyCode = typeof keyCode !== 'undefined' ? keyCode : 0;
  direction = typeof direction !== 'undefined' ? direction : "none";
  mx.events.FocusEvent.base(this, 'constructor', type, bubbles, cancelable);
};
goog.inherits(mx.events.FocusEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.events.FocusEvent', mx.events.FocusEvent);


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.FocusEvent.FOCUS_IN = "focusIn";


/**
 * @export
 * @const
 * @type {string}
 */
mx.events.FocusEvent.FOCUS_OUT = "focusOut";


/**
 * @private
 * @type {Object}
 */
mx.events.FocusEvent.prototype.mx_events_FocusEvent_wrappedEvent;


/**
 * @private
 * @type {Object}
 */
mx.events.FocusEvent.prototype.mx_events_FocusEvent_nativeEvent;


/**
 * @export
 * @param {goog.events.BrowserEvent} event
 */
mx.events.FocusEvent.prototype.wrapEvent = function(event) {
  this.mx_events_FocusEvent_wrappedEvent = event;
  this.mx_events_FocusEvent_nativeEvent = event.getBrowserEvent();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.events.FocusEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FocusEvent', qName: 'mx.events.FocusEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.events.FocusEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'FocusEvent': { type: '', declaredBy: 'mx.events.FocusEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'Object', true ,'Boolean', true ,'uint', true ,'String', true ]; }},
        'wrapEvent': { type: 'void', declaredBy: 'mx.events.FocusEvent', parameters: function () { return [ 'goog.events.BrowserEvent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.events.FocusEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
