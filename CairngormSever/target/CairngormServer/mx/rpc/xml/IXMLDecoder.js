/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/IXMLDecoder.as
 * mx.rpc.xml.IXMLDecoder
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.IXMLDecoder');
/* Royale Dependency List: QName,XML,mx.rpc.xml.SchemaTypeRegistry*/




/**
 * @interface
 */
mx.rpc.xml.IXMLDecoder = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.IXMLDecoder', mx.rpc.xml.IXMLDecoder);
/**  * @type {boolean}
 */mx.rpc.xml.IXMLDecoder.prototype.makeObjectsBindable;
/**  * @type {boolean}
 */mx.rpc.xml.IXMLDecoder.prototype.recordXSIType;
/**  * @type {mx.rpc.xml.SchemaTypeRegistry}
 */mx.rpc.xml.IXMLDecoder.prototype.typeRegistry;
/**
 * Decodes an XML document to an ActionScript object.
 * 
 * @asparam xml The XML instance to decode to an ActionScript object. 
 * This may be an XML instance, an XMLList of length 1 or a String that is
 * valid XML.
 *
 * @asparam name The QName of an XML Schema <code>element</code> that
 * describes how to decode the value, or the name to be used for the
 * decoded value when a type parameter is also specified.
 *
 * @asparam type The QName of an XML Schema <code>simpleType</code> or
 * <code>complexType</code> definition that describes how to decode the
 * value.
 *
 * @asparam definition If neither a top-level element nor type exists in the
 * schema to describe how to decode this value, a custom element definition
 * can be provided.
 *
 * @asreturn Returns an ActionScript object decoded from the given XML document.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} xml
 * @param {QName=} name
 * @param {QName=} type
 * @param {XML=} definition
 * @return {*}
 */
mx.rpc.xml.IXMLDecoder.prototype.decode = function(xml, name, type, definition) {
};
mx.rpc.xml.IXMLDecoder.prototype.reset = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.IXMLDecoder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IXMLDecoder', qName: 'mx.rpc.xml.IXMLDecoder', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.IXMLDecoder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'makeObjectsBindable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.xml.IXMLDecoder'},
        'recordXSIType': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.xml.IXMLDecoder'},
        'typeRegistry': { type: 'mx.rpc.xml.SchemaTypeRegistry', access: 'readwrite', declaredBy: 'mx.rpc.xml.IXMLDecoder'}
      };
    },
    methods: function () {
      return {
        'decode': { type: '*', declaredBy: 'mx.rpc.xml.IXMLDecoder', parameters: function () { return [ '*', false ,'QName', true ,'QName', true ,'XML', true ]; }},
        'reset': { type: 'void', declaredBy: 'mx.rpc.xml.IXMLDecoder'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.IXMLDecoder.prototype.ROYALE_COMPILE_FLAGS = 26;
