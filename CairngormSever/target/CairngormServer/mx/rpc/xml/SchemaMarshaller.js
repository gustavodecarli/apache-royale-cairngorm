/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/SchemaMarshaller.as
 * mx.rpc.xml.SchemaMarshaller
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.SchemaMarshaller');
/* Royale Dependency List: QName,XML,XMLList,mx.rpc.xml.SchemaConstants,mx.rpc.xml.SchemaDatatypes,mx.utils.Base64Decoder,mx.utils.Base64Encoder,mx.utils.ByteArray,mx.utils.HexDecoder,mx.utils.HexEncoder,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {mx.rpc.xml.SchemaConstants} constants
 * @param {mx.rpc.xml.SchemaDatatypes} datatypes
 */
mx.rpc.xml.SchemaMarshaller = function(constants, datatypes) {
  ;
  this.mx_rpc_xml_SchemaMarshaller_constants = constants;
  this.mx_rpc_xml_SchemaMarshaller_datatypes = datatypes;
  this.mx_rpc_xml_SchemaMarshaller_registerMarshallers();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.SchemaMarshaller', mx.rpc.xml.SchemaMarshaller);


/**
 * This function converts an ActionScript value to a String for XML
 * simple content based on a built-in XML Schema type. If a type is not
 * provided, the <code>anyType</code> is assumed.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshall = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (type == null)
    type = this.mx_rpc_xml_SchemaMarshaller_datatypes.anyTypeQName;
  var /** @type {Function} */ marshaller = this.mx_rpc_xml_SchemaMarshaller_marshallers[type.localName];
  var /** @type {*} */ result;
  if (marshaller != null)
    result = marshaller(value, type, restriction);
  else
    throw new TypeError("Cannot marshall type '" + type + "' to simple content.");
  return result;
};


/**
 * This function converts XML simple content (formatted based on a built-in
 * XML Schema type) to an ActionScript value. If a type is not provided, 
 * the <code>anyType</code> is assumed.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshall = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ rawValue;
  if (org.apache.royale.utils.Language.is(value, XML)) {
    var /** @type {XML} */ xml = org.apache.royale.utils.Language.as(value, XML);
    if (xml.nodeKind() == "element") {
      var /** @type {string} */ nilAttribute = xml.attribute(XML.swfCompatibleQuery(this.mx_rpc_xml_SchemaMarshaller_constants.nilQName)).toString();
      if (nilAttribute == "true")
        rawValue = null;
      else
        rawValue = xml.text().toString();
    } else {
      rawValue = xml.toString();
    }
  } else if (org.apache.royale.utils.Language.is(value, XMLList)) {
    var /** @type {XMLList} */ list = org.apache.royale.utils.Language.as(value, XMLList);
    rawValue = list.text().toString();
  } else if (value != null) {
    rawValue = value.toString();
  }
  if (type == null)
    type = this.mx_rpc_xml_SchemaMarshaller_datatypes.anyTypeQName;
  var /** @type {Function} */ unmarshaller = this.mx_rpc_xml_SchemaMarshaller_unmarshallers[type.localName];
  if (unmarshaller != null)
    value = unmarshaller(rawValue, type, restriction);
  else
    throw new TypeError("Cannot unmarshall type '" + type + "' from XML.");
  return value;
};


/**
 * In the case of XML Schema ur-types such as <code>anyType</code> and
 * <code>anySimpleType</code> we try to guess what the equivalent XML Schema
 * simple datatype should be based on the ActionScript type. As a last 
 * resort, the <code>string</code> datatype is used.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallAny = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value === undefined)
    return undefined;
  else if (value == null)
    return null;
  var /** @type {string} */ localName = org.apache.royale.utils.Language.string(mx.rpc.xml.SchemaMarshaller.guessSimpleType(value));
  if (type != null)
    type = new QName(type.uri, localName);
  else
    type = new QName(this.mx_rpc_xml_SchemaMarshaller_constants.xsdURI, localName);
  var /** @type {Function} */ marshaller = this.mx_rpc_xml_SchemaMarshaller_marshallers[type.localName];
  if (marshaller != null) {
    return marshaller(value, type);
  } else {
    throw new TypeError("Cannot marshall type '" + type + "' to simple content.");
  }
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallBase64Binary = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {mx.utils.ByteArray} */ ba = org.apache.royale.utils.Language.as(value, mx.utils.ByteArray);
  var /** @type {string} */ result;
  if (ba != null) {
    var /** @type {mx.utils.Base64Encoder} */ encoder = new mx.utils.Base64Encoder();
    encoder.insertNewLines = false;
    encoder.encodeBytes(ba);
    result = encoder.drain();
  } else {
    return null;
  }
  return result;
};


/**
 * The boolean schema type allows the string values 'true' or
 * '1' for true values and 'false' or '0' for false values. This
 * marshaller, by default, represents values using 'true' or false.
 * If a String value of '1' or '0' is passed, however, it is preserved.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallBoolean = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  if (value != null) {
    if (org.apache.royale.utils.Language.is(value, Boolean)) {
      result = org.apache.royale.utils.Language.as(value, Boolean) ? "true" : "false";
    } else if (org.apache.royale.utils.Language.is(value, Number)) {
      result = (value == 1) ? "true" : "false";
    } else if (org.apache.royale.utils.Language.is(value, Object)) {
      var /** @type {string} */ s = org.apache.royale.utils.Language.resolveUncertain(Object(value)).toString();
      if (s == "true" || s == "false" || s == "1" || s == "0")
        result = s;
      else
        throw new Error("String '" + value + "' is not a Boolean.");
    }
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallDatetime = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  var /** @type {Date} */ date;
  if (org.apache.royale.utils.Language.is(value, Number)) {
    date = new Date();
    date.setTime(org.apache.royale.utils.Language.as(value, Number));
    value = date;
  }
  if (org.apache.royale.utils.Language.is(value, Date)) {
    var /** @type {number} */ n;
    date = org.apache.royale.utils.Language.as(value, Date);
    result = "";
    if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.dateTimeQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.dateQName)) {
      result = result.concat(date.getUTCFullYear(), "-");
      n = date.getUTCMonth() + 1;
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n, "-");
      n = date.getUTCDate();
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n);
    }
    if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.dateTimeQName)) {
      result = result.concat("T");
    }
    if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.dateTimeQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.timeQName)) {
      n = date.getUTCHours();
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n, ":");
      n = date.getUTCMinutes();
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n, ":");
      n = date.getUTCSeconds();
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n);
      n = date.getUTCMilliseconds();
      if (n > 0) {
        result = result.concat(".");
        if (n < 10)
          result = result.concat("00");
        else if (n < 100)
          result = result.concat("0");
        result = result.concat(n);
      }
    }
    result = result.concat("Z");
  } else if (org.apache.royale.utils.Language.is(value, String)) {
    result = org.apache.royale.utils.Language.as(value, String);
  }
  return result;
};


/**
 * FIXME: Handle precision and exponent restrictions.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallDecimal = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  var /** @type {number} */ number;
  if (org.apache.royale.utils.Language.is(value, Number)) {
    number = org.apache.royale.utils.Language.as(value, Number);
  } else {
    var /** @type {string} */ str = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    number = Number(str);
  }
  result = mx.rpc.xml.SchemaMarshaller.specialNumber(number);
  if (result != null) {
    if (this.validating) {
      throw new Error("Invalid decimal value '" + value + "'.");
    } else {
      result = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    }
  } else {
    result = number.toString();
  }
  return result;
};


/**
 * FIXME: Handle precision and exponent restrictions.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallDouble = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  var /** @type {number} */ number = Number(value);
  result = mx.rpc.xml.SchemaMarshaller.specialNumber(number);
  if (result == null)
    result = number.toString();
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallDuration = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
};


/**
 * FIXME: Handle precision and exponent restrictions.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallFloat = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  var /** @type {number} */ number;
  if (org.apache.royale.utils.Language.is(value, Number)) {
    number = org.apache.royale.utils.Language.as(value, Number);
  } else {
    var /** @type {string} */ str = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    number = Number(str);
  }
  result = mx.rpc.xml.SchemaMarshaller.specialNumber(number);
  if (result == null) {
    if (this.validating) {
      if (number > 0) {
        if (number > mx.rpc.xml.SchemaMarshaller.FLOAT_MAX_VALUE)
          throw new RangeError("The value '" + value + "' is too large for a single-precision floating point value.");
        else if (number < mx.rpc.xml.SchemaMarshaller.FLOAT_MIN_VALUE)
          throw new RangeError("The value '" + value + "' is too small for a single-precision floating point value.");
      } else {
        if (-number > mx.rpc.xml.SchemaMarshaller.FLOAT_MAX_VALUE)
          throw new RangeError("The absolute value of '" + value + "' is too large for a single-precision floating point value.");
        else if (-number < mx.rpc.xml.SchemaMarshaller.FLOAT_MIN_VALUE)
          throw new RangeError("The absolute value of '" + value + "' is too small for a single-precision floating point value.");
      }
    }
    result = number.toString();
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallGregorian = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {number} */ hyphen = 0;
  var /** @type {Date} */ date;
  var /** @type {number} */ n;
  if (org.apache.royale.utils.Language.is(value, Date))
    date = org.apache.royale.utils.Language.as(value, Date);
  else if (org.apache.royale.utils.Language.is(value, Number))
    n = org.apache.royale.utils.Language.as(value, Number);
  else
    value = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  var /** @type {string} */ result = "";
  //var /** @type {number} */ hyphen = 0;
  if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearQName)) {
    var /** @type {string} */ year;
    if (org.apache.royale.utils.Language.is(value, Date)) {
      n = date.getUTCFullYear();
    } else if (org.apache.royale.utils.Language.is(value, String)) {
      year = org.apache.royale.utils.Language.as(value, String);
      hyphen = (year.indexOf("-", 1)) >> 0;
      if (hyphen > 0)
        year = year.substring(0, hyphen);
      n = parseInt(year, undefined);
    }
    if (isNaN(n) || n == 0) {
      if (this.validating) {
        throw new Error("Invalid year supplied for type " + type.localName + " in value " + value);
      } else {
        return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
      }
    } else {
      year = n.toFixed(0);
      if (year.indexOf("-") == 0) {
        while (year.length < 5)
          year = year.substring(0, 1) + "0" + year.substring(1);
      } else {
        while (year.length < 4)
          year = "0" + year;
      }
      result = result.concat(year);
    }
    if (type != this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearQName)
      result = result.concat("-");
  }
  if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthQName)) {
    if (type != this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName)
      result = result.concat("--");
    var /** @type {string} */ month;
    if (org.apache.royale.utils.Language.is(value, Date))
      n = date.getUTCMonth() + 1; else {
      month = value.toString();
      if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName)) {
        hyphen = (month.indexOf("--", 0)) >> 0;
        if (hyphen == 0)
          month = month.substring(2, 4);
        else if (this.validating)
          throw new Error("Invalid month supplied for " + type.localName + " in value " + value + ". The format must be '--MM-DD'."); else {
          return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
        }
      } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName)) {
        hyphen = (month.indexOf("-", 1)) >> 0;
        if (hyphen > 0)
          month = month.substring(hyphen + 1, hyphen + 3);
        else if (this.validating)
          throw new Error("Invalid month supplied for " + type.localName + " in value " + value + ". The format must be '--CCYY-MM'."); else {
          return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
        }
      } else {
        hyphen = (month.indexOf("--", 0)) >> 0;
        if (hyphen > 0)
          month = month.substring(2, 4);
      }
      n = parseInt(month, undefined);
    }
    if (isNaN(n) || n <= 0 || n > 12) {
      if (this.validating)
        throw new Error("Invalid month supplied for type " + type.localName + " in value " + value); else {
        return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
      }
    } else {
      n = org.apache.royale.utils.Language._int(n);
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n);
    }
    if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName)) {
      result = result.concat("-");
    }
  }
  if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName) || QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gDayQName)) {
    if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gDayQName))
      result = result.concat("---");
    if (org.apache.royale.utils.Language.is(value, Date))
      n = date.getUTCDate(); else if (org.apache.royale.utils.Language.is(value, String)) {
      var /** @type {string} */ day = org.apache.royale.utils.Language.as(value, String);
      if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName)) {
        hyphen = (day.indexOf("--", 0)) >> 0;
        if (hyphen == 0)
          day = day.substring(5, 7);
        else if (this.validating)
          throw new Error("Invalid day supplied for gMonthDay in value " + value + ". The format must be '--MM-DD'."); else {
          return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
        }
      } else {
        hyphen = (day.indexOf("---", 0)) >> 0;
        if (hyphen == 0)
          day = day.substring(3, 5);
      }
      n = parseInt(day, undefined);
    }
    if (isNaN(n) || n <= 0 || n > 31) {
      if (this.validating)
        throw new Error("Invalid day supplied for type " + type.localName + " in value " + value);
      else
        return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    } else {
      n = org.apache.royale.utils.Language._int(n);
      if (n < 10)
        result = result.concat("0");
      result = result.concat(n);
    }
  }
  return result;
};


/**
 * The schema type hexBinary represents arbitrary hex-encoded binary data.
 * Each binary octet is encoded as a character tuple consisting of two
 * hexadecimal digits (which is treated case insensitively although
 * capital letters A-F are always used on encoding). These tuples are
 * added to a String to serialize the binary data.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallHexBinary = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {mx.utils.ByteArray} */ ba = org.apache.royale.utils.Language.as(value, mx.utils.ByteArray);
  var /** @type {string} */ valueString;
  if (ba != null) {
    var /** @type {mx.utils.HexEncoder} */ encoder = new mx.utils.HexEncoder();
    encoder.encode(ba);
    valueString = encoder.drain();
  } else {
    throw new Error("Cannot marshall value as hex binary.");
  }
  return valueString;
};


/**
 * The schema type integer is dervied from the decimal type via restrictions
 * by fixing the value of fractionDigits to be 0 and disallowing the
 * trailing decimal point. The schema types long, int, short, byte are
 * derived from integer by restricting the maxInclusive and minInclusive
 * properties. Other types such as nonPositiveInteger, negativeInteger,
 * nonNegativeInteger, positiveInteger, unsignedLong, unsignedInt,
 * unsignedShort and unsignedByte are also dervied from integer through
 * similar restrictions.
 * 
 * This method first calls parses the <code>value</code> as a Number. It
 * then uses <code>Math.floor()</code> on the number to remove any fraction
 * digits and then checks that the result is within the specified
 * <code>min</code> and <code>max</code> for the type. Note that decimal
 * values are not rounded. This method handles integers longer than 32-bit
 * so ActionScript int or uint types are not used internally.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallInteger = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  var /** @type {number} */ number;
  if (org.apache.royale.utils.Language.is(value, Number))
    number = org.apache.royale.utils.Language.as(value, Number);
  else
    number = Number(mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value));
  var /** @type {number} */ min = -Number.MAX_VALUE;
  var /** @type {number} */ max = Number.MAX_VALUE;
  if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.longQName)) {
    min = mx.rpc.xml.SchemaMarshaller.LONG_MIN_VALUE;
    max = mx.rpc.xml.SchemaMarshaller.LONG_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.intQName)) {
    min = -2147483648;
    max = 2147483648;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.shortQName)) {
    min = mx.rpc.xml.SchemaMarshaller.SHORT_MIN_VALUE;
    max = mx.rpc.xml.SchemaMarshaller.SHORT_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.byteQName)) {
    min = mx.rpc.xml.SchemaMarshaller.BYTE_MIN_VALUE;
    max = mx.rpc.xml.SchemaMarshaller.BYTE_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedLongQName)) {
    min = 0;
    max = mx.rpc.xml.SchemaMarshaller.ULONG_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedIntQName)) {
    min = 0;
    max = 4294967295;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedShortQName)) {
    min = 0;
    max = mx.rpc.xml.SchemaMarshaller.USHORT_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedByteQName)) {
    min = 0;
    max = mx.rpc.xml.SchemaMarshaller.UBYTE_MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.positiveIntegerQName)) {
    min = 1;
    max = Number.MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.nonNegativeIntegerQName)) {
    min = 0;
    max = Number.MAX_VALUE;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.negativeIntegerQName)) {
    min = -Number.MAX_VALUE;
    max = -1;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.nonPositiveIntegerQName)) {
    min = -Number.MAX_VALUE;
    max = 0;
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.integerQName)) {
    min = -Number.MAX_VALUE;
    max = Number.MAX_VALUE;
  }
  var /** @type {number} */ integer = Math.floor(number);
  if (integer >= min) {
    if (integer > max) {
      if (this.validating) {
        throw new RangeError("The value '" + value + "' is too large for " + type.localName);
      } else {
        return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
      }
    }
  } else {
    if (this.validating) {
      throw new RangeError("The value '" + value + "' is too small for " + type.localName);
    } else {
      return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    }
  }
  result = integer.toString();
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.marshallString = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value != null) {
    if (org.apache.royale.utils.Language.is(value, XML) || org.apache.royale.utils.Language.is(value, XMLList)) {
      return org.apache.royale.utils.Language.string(value.toXMLString());
    } else if (org.apache.royale.utils.Language.is(value, Object)) {
      return org.apache.royale.utils.Language.resolveUncertain(Object(value)).toString();
    }
  }
  return null;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallAny = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value === undefined)
    return undefined;
  else if (value == null)
    return null;
  var /** @type {*} */ result;
  var /** @type {Function} */ unmarshaller;
  var /** @type {string} */ s = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  if (s == "") {
    unmarshaller = this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.stringQName.localName];
  } else if (isNaN(Number(s)) || (s.charAt(0) == '0') || ((s.charAt(0) == '-') && (s.charAt(1) == '0')) || s.charAt(s.length - 1) == 'E') {
    var /** @type {string} */ lowerS = s.toLowerCase();
    if (lowerS == "true" || lowerS == "false") {
      unmarshaller = this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.booleanQName.localName];
    } else {
      unmarshaller = this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.stringQName.localName];
    }
  } else {
    unmarshaller = this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.doubleQName.localName];
  }
  result = unmarshaller(value, type, restriction);
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {mx.utils.ByteArray}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallBase64Binary = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value == null)
    return null;
  var /** @type {string} */ data = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  var /** @type {mx.utils.Base64Decoder} */ decoder = new mx.utils.Base64Decoder();
  decoder.decode(data);
  return decoder.drain();
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {boolean}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallBoolean = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value == null)
    return false;
  var /** @type {string} */ bool = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value).toLowerCase();
  if (bool == "true" || bool == "1")
    return true;
  return false;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {Object}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallDate = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {number} */ index = 0;
  if (value == null)
    return null;
  var /** @type {Date} */ date;
  //var /** @type {number} */ index = 0;
  var /** @type {string} */ datePart = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  if (datePart != null) {
    index = (datePart.indexOf("-", 1)) >> 0;
    var /** @type {number} */ year = org.apache.royale.utils.Language.uint(datePart.substring(0, index++));
    var /** @type {number} */ month = org.apache.royale.utils.Language.uint(datePart.substring(index, index + 2));
    index += 3;
    var /** @type {number} */ day = org.apache.royale.utils.Language.uint(datePart.substring(index, index + 2));
    index += 2;
    if (datePart.charAt(index) == "Z") {
      date = new Date(Date.UTC(year, month - 1, day));
    } else if (datePart.length > 10) {
      date = new Date(Date.UTC(year, month - 1, day));
      var /** @type {string} */ offsetDirection = datePart.charAt(index++);
      var /** @type {number} */ hours = org.apache.royale.utils.Language._int(datePart.substring(index, index + 2));
      index += 3;
      var /** @type {number} */ minutes = org.apache.royale.utils.Language._int(datePart.substring(index, index + 2));
      var /** @type {number} */ millis = (hours * 3600000) + (minutes * 60000);
      if (offsetDirection == "+") {
        date.setTime(date.getTime() - millis);
      } else {
        date.setTime(date.getTime() + millis);
      }
    } else {
      date = new Date(year, month - 1, day);
    }
  }
  return date;
};


/**
 * Handles dateTime and time types.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {Object}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallDatetime = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {number} */ index = 0;
  var /** @type {number} */ offsetDirection = 0;
  if (value == null)
    return null;
  var /** @type {Date} */ date;
  var /** @type {string} */ rawValue = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  var /** @type {string} */ datePart;
  var /** @type {string} */ timePart;
  var /** @type {boolean} */ utc;
  var /** @type {boolean} */ offset;
  //var /** @type {number} */ index = 0;
  var /** @type {number} */ sep = (rawValue.indexOf("T")) >> 0;
  if (sep != -1) {
    datePart = rawValue.substring(0, sep);
    timePart = rawValue.substring(sep + 1);
  } else {
    timePart = rawValue;
  }
  var /** @type {number} */ hours = org.apache.royale.utils.Language._int(timePart.substring(0, 2));
  var /** @type {number} */ minutes = org.apache.royale.utils.Language._int(timePart.substring(3, 5));
  var /** @type {number} */ millisStart = (timePart.indexOf(".", 6)) >> 0;
  var /** @type {number} */ seconds = org.apache.royale.utils.Language._int(timePart.substring(6, 8));
  var /** @type {number} */ tzIndex = (timePart.indexOf("Z", 8)) >> 0;
  //var /** @type {number} */ offsetDirection = 0;
  var /** @type {number} */ offsetMillis;
  if (tzIndex == -1) {
    if ((tzIndex = (timePart.indexOf("+", 8)) >> 0) != -1)
      offsetDirection = 1;
    else if ((tzIndex = (timePart.indexOf("-", 8)) >> 0) != -1)
      offsetDirection = -1;
    if (tzIndex != -1) {
      index = (tzIndex + 1) >> 0;
      var /** @type {number} */ offsetHours = org.apache.royale.utils.Language._int(timePart.substring(index, index + 2));
      index += 3;
      var /** @type {number} */ offsetMinutes = org.apache.royale.utils.Language._int(timePart.substring(index, index + 2));
      offsetMillis = (offsetHours * 3600000) + (offsetMinutes * 60000);
      utc = true;
      offset = true;
    }
  } else {
    utc = true;
  }
  var /** @type {number} */ millis = 0;
  if (millisStart != -1) {
    var /** @type {number} */ fractionalSecond;
    if (tzIndex != -1)
      fractionalSecond = Number(timePart.substring(millisStart, tzIndex));
    else
      fractionalSecond = Number(timePart.substring(millisStart));
    millis = org.apache.royale.utils.Language._int(Math.floor(fractionalSecond * 1000));
  }
  if (datePart != null) {
    index = (datePart.indexOf("-", 1)) >> 0;
    var /** @type {number} */ year = org.apache.royale.utils.Language.uint(datePart.substring(0, index++));
    var /** @type {number} */ month = org.apache.royale.utils.Language.uint(datePart.substring(index, index + 2));
    index += 3;
    var /** @type {number} */ day = org.apache.royale.utils.Language.uint(datePart.substring(index, index + 2));
    if (utc)
      date = new Date(Date.UTC(year, month - 1, day));
    else
      date = new Date(year, month - 1, day);
  } else {
    if (utc) {
      var /** @type {Date} */ now = new Date();
      date = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
    } else {
      date = new Date();
    }
  }
  if (utc) {
    date.setUTCHours(hours, minutes, seconds, millis);
    if (offset) {
      if (offsetDirection > 0)
        date.setTime(date.getTime() - offsetMillis);
      else
        date.setTime(date.getTime() + offsetMillis);
    }
  } else {
    date.setHours(hours, minutes, seconds, millis);
  }
  return date;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {number}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallDecimal = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  return this.unmarshallDouble(value, type);
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {number}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallDouble = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {number} */ result;
  if (value != null) {
    var /** @type {string} */ s = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    if (s == "INF") {
      result = Number.POSITIVE_INFINITY;
    } else if (s == "-INF") {
      result = Number.NEGATIVE_INFINITY;
    } else {
      result = Number(s);
    }
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallDuration = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  return mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {number}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallFloat = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  return this.unmarshallDouble(value, type, restriction);
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallGregorian = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ rawValue = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
  var /** @type {*} */ result = rawValue;
  if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearQName)) {
    result = org.apache.royale.utils.Language.uint(rawValue.substring(0, 4));
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthQName)) {
    result = org.apache.royale.utils.Language.uint(rawValue.substring(2, 4));
  } else if (QName.equality(type,this.mx_rpc_xml_SchemaMarshaller_datatypes.gDayQName)) {
    result = org.apache.royale.utils.Language.uint(rawValue.substring(3, 5));
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {mx.utils.ByteArray}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallHexBinary = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  if (value != null) {
    var /** @type {string} */ data = mx.rpc.xml.SchemaMarshaller.whitespaceCollapse(value);
    var /** @type {mx.utils.HexDecoder} */ decoder = new mx.utils.HexDecoder();
    decoder.decode(data);
    return decoder.drain();
  }
  return null;
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {number}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallInteger = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  return parseInt(value, undefined);
};


/**
 * @export
 * @param {*} value
 * @param {QName=} type
 * @param {XML=} restriction
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.prototype.unmarshallString = function(value, type, restriction) {
  type = typeof type !== 'undefined' ? type : null;
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {string} */ result;
  if (value != null) {
    result = value.toString();
  }
  return result;
};


/**
 * @export
 * @param {*} value
 * @return {*}
 */
mx.rpc.xml.SchemaMarshaller.guessSimpleType = function(value) {
  var /** @type {string} */ localName = "string";
  if (org.apache.royale.utils.Language.is(value, org.apache.royale.utils.Language.synthType('uint'))) {
    localName = "unsignedInt";
  } else if (org.apache.royale.utils.Language.is(value, org.apache.royale.utils.Language.synthType('int'))) {
    localName = "int";
  } else if (org.apache.royale.utils.Language.is(value, Number)) {
    localName = "double";
  } else if (org.apache.royale.utils.Language.is(value, Boolean)) {
    localName = "boolean";
  } else if (org.apache.royale.utils.Language.is(value, String)) {
    localName = "string";
  } else if (org.apache.royale.utils.Language.is(value, mx.utils.ByteArray)) {
    if (mx.rpc.xml.SchemaMarshaller.byteArrayAsBase64Binary)
      localName = "base64Binary";
    else
      localName = "hexBinary";
  } else if (org.apache.royale.utils.Language.is(value, Date)) {
    localName = "dateTime";
  }
  return localName;
};


/**
 * @private
 * @param {number} value
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.specialNumber = function(value) {
  if (value == Number.NEGATIVE_INFINITY)
    return "-INF";
  else if (value == Number.POSITIVE_INFINITY)
    return "INF";
  else if (isNaN(value))
    return "NaN";
  else
    return null;
};


/**
 * For simple types with the whitespace restriction <code>collapse</code>
 * all occurrences of #x9 (tab), #xA (line feed) and #xD (carriage return)
 * are replaced with #x20 (space), then consecutive spaces are collapsed
 * to a single space, then finally the leading and trailing spaces are
 * trimmed.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {*} value
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.whitespaceCollapse = function(value) {
  if (value == null)
    return null;
  var /** @type {string} */ s = value.toString();
  s = s.replace(mx.rpc.xml.SchemaMarshaller.whitespaceCollapsePattern, " ");
  s = s.replace(mx.rpc.xml.SchemaMarshaller.whitespaceTrimPattern, "");
  return s;
};


/**
 * For simple types with the whitespace restriction <code>replace</code>
 * all occurrences of #x9 (tab), #xA (line feed) and #xD (carriage return)
 * are replaced with #x20 (space).
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {*} value
 * @return {string}
 */
mx.rpc.xml.SchemaMarshaller.whitespaceReplace = function(value) {
  if (value == null)
    return null;
  var /** @type {string} */ s = value.toString();
  s = s.replace(mx.rpc.xml.SchemaMarshaller.whitespaceReplacePattern, " ");
  return s;
};


/**
 * @private
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller_registerMarshallers = function() {
  this.mx_rpc_xml_SchemaMarshaller_marshallers = {};
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.booleanQName.localName] = org.apache.royale.utils.Language.closure(this.marshallBoolean, this, 'marshallBoolean');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyTypeQName.localName] = org.apache.royale.utils.Language.closure(this.marshallAny, this, 'marshallAny');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anySimpleTypeQName.localName] = org.apache.royale.utils.Language.closure(this.marshallAny, this, 'marshallAny');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyAtomicTypeQName.localName] = org.apache.royale.utils.Language.closure(this.marshallAny, this, 'marshallAny');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.stringQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.booleanQName.localName] = org.apache.royale.utils.Language.closure(this.marshallBoolean, this, 'marshallBoolean');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.decimalQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDecimal, this, 'marshallDecimal');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.precisionDecimal.localName] = org.apache.royale.utils.Language.closure(this.marshallDecimal, this, 'marshallDecimal');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.floatQName.localName] = org.apache.royale.utils.Language.closure(this.marshallFloat, this, 'marshallFloat');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.doubleQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDouble, this, 'marshallDouble');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.durationQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDuration, this, 'marshallDuration');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dateTimeQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.timeQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dateQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName.localName] = org.apache.royale.utils.Language.closure(this.marshallGregorian, this, 'marshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearQName.localName] = org.apache.royale.utils.Language.closure(this.marshallGregorian, this, 'marshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName.localName] = org.apache.royale.utils.Language.closure(this.marshallGregorian, this, 'marshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gDayQName.localName] = org.apache.royale.utils.Language.closure(this.marshallGregorian, this, 'marshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthQName.localName] = org.apache.royale.utils.Language.closure(this.marshallGregorian, this, 'marshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.hexBinaryQName.localName] = org.apache.royale.utils.Language.closure(this.marshallHexBinary, this, 'marshallHexBinary');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.base64BinaryQName.localName] = org.apache.royale.utils.Language.closure(this.marshallBase64Binary, this, 'marshallBase64Binary');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyURIQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.QNameQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NOTATIONQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.normalizedStringQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.tokenQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.languageQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NMTOKENQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NMTOKENSQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NameQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NCNameQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDQName.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDREF.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDREFS.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.ENTITY.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.ENTITIES.localName] = org.apache.royale.utils.Language.closure(this.marshallString, this, 'marshallString');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.integerQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.nonPositiveIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.negativeIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.longQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.intQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.shortQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.byteQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.nonNegativeIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedLongQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedIntQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedShortQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedByteQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.positiveIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.marshallInteger, this, 'marshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.yearMonthDurationQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dayTimeDurationQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  if (this.mx_rpc_xml_SchemaMarshaller_datatypes.timeInstantQName != null)
    this.mx_rpc_xml_SchemaMarshaller_marshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.timeInstantQName.localName] = org.apache.royale.utils.Language.closure(this.marshallDatetime, this, 'marshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers = {};
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.booleanQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallBoolean, this, 'unmarshallBoolean');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyTypeQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallAny, this, 'unmarshallAny');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anySimpleTypeQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallAny, this, 'unmarshallAny');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyAtomicTypeQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallAny, this, 'unmarshallAny');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.stringQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.booleanQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallBoolean, this, 'unmarshallBoolean');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.decimalQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDecimal, this, 'unmarshallDecimal');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.precisionDecimal.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDecimal, this, 'unmarshallDecimal');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.floatQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallFloat, this, 'unmarshallFloat');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.doubleQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDouble, this, 'unmarshallDouble');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.durationQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDuration, this, 'unmarshallDuration');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dateTimeQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDatetime, this, 'unmarshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.timeQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDatetime, this, 'unmarshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dateQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDate, this, 'unmarshallDate');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearMonthQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallGregorian, this, 'unmarshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gYearQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallGregorian, this, 'unmarshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthDayQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallGregorian, this, 'unmarshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gDayQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallGregorian, this, 'unmarshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.gMonthQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallGregorian, this, 'unmarshallGregorian');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.hexBinaryQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallHexBinary, this, 'unmarshallHexBinary');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.base64BinaryQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallBase64Binary, this, 'unmarshallBase64Binary');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.anyURIQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.QNameQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NOTATIONQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.normalizedStringQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.tokenQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.languageQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NMTOKENQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NMTOKENSQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NameQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.NCNameQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDREF.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.IDREFS.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.ENTITY.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.ENTITIES.localName] = org.apache.royale.utils.Language.closure(this.unmarshallString, this, 'unmarshallString');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.integerQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.nonPositiveIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.negativeIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.longQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.intQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.shortQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.byteQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.nonNegativeIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedLongQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedIntQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedShortQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.unsignedByteQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.positiveIntegerQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallInteger, this, 'unmarshallInteger');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.yearMonthDurationQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDatetime, this, 'unmarshallDatetime');
  this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.dayTimeDurationQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDatetime, this, 'unmarshallDatetime');
  if (this.mx_rpc_xml_SchemaMarshaller_datatypes.timeInstantQName != null)
    this.mx_rpc_xml_SchemaMarshaller_unmarshallers[this.mx_rpc_xml_SchemaMarshaller_datatypes.timeInstantQName.localName] = org.apache.royale.utils.Language.closure(this.unmarshallDatetime, this, 'unmarshallDatetime');
};


/**
 * @export
 * @type {boolean}
 */
mx.rpc.xml.SchemaMarshaller.byteArrayAsBase64Binary = true;


/**
 * @export
 * @type {RegExp}
 */
mx.rpc.xml.SchemaMarshaller.whitespaceReplacePattern = new RegExp("[\t\r\n]", "g");


/**
 * @export
 * @type {RegExp}
 */
mx.rpc.xml.SchemaMarshaller.whitespaceCollapsePattern = new RegExp("[ \t\r\n]+", "g");


/**
 * @export
 * @type {RegExp}
 */
mx.rpc.xml.SchemaMarshaller.whitespaceTrimPattern = new RegExp("^[ ]+|[ ]+$", "g");


mx.rpc.xml.SchemaMarshaller.get__FLOAT_MAX_VALUE = function() {
  var value = (Math.pow(2, 24) - 1) * Math.pow(2, 104);
  Object.defineProperty(mx.rpc.xml.SchemaMarshaller, 'FLOAT_MAX_VALUE', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.xml.SchemaMarshaller, /** @lends {mx.rpc.xml.SchemaMarshaller} */ {
/**
 * @export
 * @const
 * @type {number}
 */
FLOAT_MAX_VALUE: {
  get: mx.rpc.xml.SchemaMarshaller.get__FLOAT_MAX_VALUE,
  configurable: true}});


mx.rpc.xml.SchemaMarshaller.get__FLOAT_MIN_VALUE = function() {
  var value = Math.pow(2, -149);
  Object.defineProperty(mx.rpc.xml.SchemaMarshaller, 'FLOAT_MIN_VALUE', { value: value, writable: false });
  return value;
};
Object.defineProperties(mx.rpc.xml.SchemaMarshaller, /** @lends {mx.rpc.xml.SchemaMarshaller} */ {
/**
 * @export
 * @const
 * @type {number}
 */
FLOAT_MIN_VALUE: {
  get: mx.rpc.xml.SchemaMarshaller.get__FLOAT_MIN_VALUE,
  configurable: true}});


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.LONG_MAX_VALUE = 9223372036854775807;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.LONG_MIN_VALUE = -9223372036854775808;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.SHORT_MAX_VALUE = 32767;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.SHORT_MIN_VALUE = -32768;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.BYTE_MAX_VALUE = 127;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.BYTE_MIN_VALUE = -128;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.ULONG_MAX_VALUE = 18446744073709551615;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.USHORT_MAX_VALUE = 65535;


/**
 * @export
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.UBYTE_MAX_VALUE = 255;


/**
 * @private
 * @type {Object}
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller_marshallers;


/**
 * @private
 * @type {Object}
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller_unmarshallers;


/**
 * @private
 * @type {mx.rpc.xml.SchemaConstants}
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller_constants;


/**
 * @private
 * @type {mx.rpc.xml.SchemaDatatypes}
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller_datatypes;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.xml.SchemaMarshaller.prototype.mx_rpc_xml_SchemaMarshaller__validating;


mx.rpc.xml.SchemaMarshaller.prototype.get__validating = function() {
  return this.mx_rpc_xml_SchemaMarshaller__validating;
};


mx.rpc.xml.SchemaMarshaller.prototype.set__validating = function(value) {
  this.mx_rpc_xml_SchemaMarshaller__validating = value;
};


Object.defineProperties(mx.rpc.xml.SchemaMarshaller.prototype, /** @lends {mx.rpc.xml.SchemaMarshaller.prototype} */ {
/**
  * @export
  * @type {boolean} */
validating: {
get: mx.rpc.xml.SchemaMarshaller.prototype.get__validating,
set: mx.rpc.xml.SchemaMarshaller.prototype.set__validating}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.SchemaMarshaller.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SchemaMarshaller', qName: 'mx.rpc.xml.SchemaMarshaller', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.SchemaMarshaller.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|byteArrayAsBase64Binary': { type: 'Boolean', get_set: function (/** * */ v) {return v !== undefined ? mx.rpc.xml.SchemaMarshaller.byteArrayAsBase64Binary = v : mx.rpc.xml.SchemaMarshaller.byteArrayAsBase64Binary;}},
        '|whitespaceReplacePattern': { type: 'RegExp', get_set: function (/** * */ v) {return v !== undefined ? mx.rpc.xml.SchemaMarshaller.whitespaceReplacePattern = v : mx.rpc.xml.SchemaMarshaller.whitespaceReplacePattern;}},
        '|whitespaceCollapsePattern': { type: 'RegExp', get_set: function (/** * */ v) {return v !== undefined ? mx.rpc.xml.SchemaMarshaller.whitespaceCollapsePattern = v : mx.rpc.xml.SchemaMarshaller.whitespaceCollapsePattern;}},
        '|whitespaceTrimPattern': { type: 'RegExp', get_set: function (/** * */ v) {return v !== undefined ? mx.rpc.xml.SchemaMarshaller.whitespaceTrimPattern = v : mx.rpc.xml.SchemaMarshaller.whitespaceTrimPattern;}}
      };
    },
    accessors: function () {
      return {
        'validating': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.xml.SchemaMarshaller'}
      };
    },
    methods: function () {
      return {
        'SchemaMarshaller': { type: '', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ 'mx.rpc.xml.SchemaConstants', false ,'mx.rpc.xml.SchemaDatatypes', false ]; }},
        'marshall': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshall': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallAny': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallBase64Binary': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallBoolean': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallDatetime': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallDecimal': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallDouble': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallDuration': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallFloat': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallGregorian': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallHexBinary': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallInteger': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'marshallString': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallAny': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallBase64Binary': { type: 'mx.utils.ByteArray', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallBoolean': { type: 'Boolean', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallDate': { type: 'Object', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallDatetime': { type: 'Object', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallDecimal': { type: 'Number', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallDouble': { type: 'Number', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallDuration': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallFloat': { type: 'Number', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallGregorian': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallHexBinary': { type: 'mx.utils.ByteArray', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallInteger': { type: 'Number', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        'unmarshallString': { type: 'String', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ,'QName', true ,'XML', true ]; }},
        '|guessSimpleType': { type: '*', declaredBy: 'mx.rpc.xml.SchemaMarshaller', parameters: function () { return [ '*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.SchemaMarshaller.prototype.ROYALE_COMPILE_FLAGS = 26;
