/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/IXMLEncoder.as
 * mx.rpc.xml.IXMLEncoder
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.IXMLEncoder');
/* Royale Dependency List: QName,XML,XMLList*/




/**
 * @interface
 */
mx.rpc.xml.IXMLEncoder = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.IXMLEncoder', mx.rpc.xml.IXMLEncoder);
/**
 * Encodes an ActionScript value as XML.
 * 
 * @asparam value The ActionScript value to encode as XML.
 *
 * @asparam name The QName of an XML Schema <code>element</code> that
 * describes how to encode the value, or the name to be used for the
 * encoded XML node when a type parameter is also specified.
 *
 * @asparam type The QName of an XML Schema <code>simpleType</code> or
 * <code>complexType</code> definition that describes how to encode the
 * value.
 *
 * @asparam definition If neither a top-level element nor type exists in the
 * schema to describe how to encode this value, a custom element definition
 * can be provided.
 *
 * @asreturn Returns an XML encoding of the given ActionScript value.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {*} value
 * @param {QName=} name
 * @param {QName=} type
 * @param {XML=} definition
 * @return {XMLList}
 */
mx.rpc.xml.IXMLEncoder.prototype.encode = function(value, name, type, definition) {
};
mx.rpc.xml.IXMLEncoder.prototype.reset = function() {
};
/**  * @type {Function}
 */mx.rpc.xml.IXMLEncoder.prototype.xmlSpecialCharsFilter;
/**  * @type {boolean}
 */mx.rpc.xml.IXMLEncoder.prototype.strictNillability;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.IXMLEncoder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IXMLEncoder', qName: 'mx.rpc.xml.IXMLEncoder', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.IXMLEncoder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'xmlSpecialCharsFilter': { type: 'Function', access: 'readwrite', declaredBy: 'mx.rpc.xml.IXMLEncoder'},
        'strictNillability': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.xml.IXMLEncoder'}
      };
    },
    methods: function () {
      return {
        'encode': { type: 'XMLList', declaredBy: 'mx.rpc.xml.IXMLEncoder', parameters: function () { return [ '*', false ,'QName', true ,'QName', true ,'XML', true ]; }},
        'reset': { type: 'void', declaredBy: 'mx.rpc.xml.IXMLEncoder'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.IXMLEncoder.prototype.ROYALE_COMPILE_FLAGS = 26;
