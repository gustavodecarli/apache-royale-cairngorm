/**
 * Generated by Apache Royale Compiler from mx/rpc/xml/Schema.as
 * mx.rpc.xml.Schema
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.xml.Schema');
/* Royale Dependency List: Namespace,QName,XML,XMLList,mx.rpc.xml.QualifiedResourceManager,mx.rpc.xml.SchemaConstants,mx.rpc.xml.SchemaDatatypes,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {XML=} xml
 */
mx.rpc.xml.Schema = function(xml) {
  xml = typeof xml !== 'undefined' ? xml : null;
  ;
  this.xml = xml;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.xml.Schema', mx.rpc.xml.Schema);


/**
 * @export
 * @type {string}
 */
mx.rpc.xml.Schema.prototype.attributeFormDefault = "unqualified";


/**
 * @export
 * @type {string}
 */
mx.rpc.xml.Schema.prototype.blockDefault;


/**
 * @export
 * @type {string}
 */
mx.rpc.xml.Schema.prototype.elementFormDefault = "unqualified";


/**
 * @export
 * @type {string}
 */
mx.rpc.xml.Schema.prototype.finalDefault;


/**
 * @export
 * @param {Namespace} targetNamespace
 * @param {mx.rpc.xml.Schema} schema
 */
mx.rpc.xml.Schema.prototype.addImport = function(targetNamespace, schema) {
  if (this.mx_rpc_xml_Schema_importsManager == null)
    this.mx_rpc_xml_Schema_importsManager = new mx.rpc.xml.QualifiedResourceManager();
  this.mx_rpc_xml_Schema_importsManager.addResource(targetNamespace, schema);
};


/**
 * @export
 * @param {XMLList} fragment
 */
mx.rpc.xml.Schema.prototype.addInclude = function(fragment) {
  this.xml.appendChild(fragment);
};


/**
 * @export
 * @param {QName} definitionName
 * @param {...} componentTypes
 * @return {Object}
 */
mx.rpc.xml.Schema.prototype.getNamedDefinition = function(definitionName, componentTypes) {
  componentTypes = Array.prototype.slice.call(arguments, 1);
  var /** @type {string} */ uri = definitionName.uri;
  var /** @type {Array} */ schemas = [this];
  if (this.mx_rpc_xml_Schema_importsManager != null) {
    var /** @type {Array} */ imports = this.mx_rpc_xml_Schema_importsManager.getResourcesForURI(uri);
    if (imports != null) {
      schemas = schemas.concat(imports);
    }
  }
  for (var /** @type {number} */ s = 0; s < schemas.length; s++) {
    var /** @type {mx.rpc.xml.Schema} */ schema = org.apache.royale.utils.Language.as(schemas[s], mx.rpc.xml.Schema);
    var /** @type {Namespace} */ currentTargetNamespace = schema.targetNamespace;
    var /** @type {XML} */ schemaXML = schema.xml;
    var /** @type {mx.rpc.xml.SchemaConstants} */ constants = schema.schemaConstants;
    for (var /** @type {number} */ t = 0; t < componentTypes.length; t++) {
      var /** @type {QName} */ componentType = org.apache.royale.utils.Language.as(componentTypes[t], QName);
      if (schema.elementFormDefault == "qualified" && QName.equality(componentType,this.schemaConstants.elementTypeQName)) {
        if (uri != null && uri != "") {
          if (currentTargetNamespace == null || currentTargetNamespace.uri != uri)
            continue;
        }
      }
      if (schema.attributeFormDefault == "qualified" && QName.equality(componentType,this.schemaConstants.attributeQName)) {
        if (uri != null && uri != "") {
          if (currentTargetNamespace == null || currentTargetNamespace.uri != uri)
            continue;
        }
      }
      if (componentType != this.schemaConstants.elementTypeQName && componentType != this.schemaConstants.attributeQName && currentTargetNamespace.uri != definitionName.uri)
        continue;
      var /** @type {QName} */ localComponentType = new QName(constants.xsdURI, componentType.localName);
      var /** @type {XML} */ definition = schemaXML.child(localComponentType).filter(function(/** @type {XML} */ node){return (node.attribute('name') == definitionName.localName)})[0];
      if (definition != null) {
        return {definition:definition, schema:schema};
      }
    }
  }
  return null;
};


/**
 * @private
 * @type {mx.rpc.xml.QualifiedResourceManager}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema_importsManager;


/**
 * @private
 * @type {Object}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema__namespaces;


/**
 * @private
 * @type {mx.rpc.xml.SchemaConstants}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema__schemaConstants;


/**
 * @private
 * @type {mx.rpc.xml.SchemaDatatypes}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema__schemaDatatypes;


/**
 * @private
 * @type {Namespace}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema__targetNamespace;


/**
 * @private
 * @type {XML}
 */
mx.rpc.xml.Schema.prototype.mx_rpc_xml_Schema__xml;


mx.rpc.xml.Schema.prototype.get__namespaces = function() {
  if (this.mx_rpc_xml_Schema__namespaces == null)
    this.mx_rpc_xml_Schema__namespaces = {};
  return this.mx_rpc_xml_Schema__namespaces;
};


mx.rpc.xml.Schema.prototype.set__namespaces = function(value) {
  this.mx_rpc_xml_Schema__namespaces = value;
};


mx.rpc.xml.Schema.prototype.get__targetNamespace = function() {
  return this.mx_rpc_xml_Schema__targetNamespace;
};


mx.rpc.xml.Schema.prototype.set__targetNamespace = function(tns) {
  this.mx_rpc_xml_Schema__targetNamespace = tns;
};


mx.rpc.xml.Schema.prototype.get__schemaConstants = function() {
  if (this.mx_rpc_xml_Schema__schemaConstants == null) {
    this.mx_rpc_xml_Schema__schemaConstants = mx.rpc.xml.SchemaConstants.getConstants(this.mx_rpc_xml_Schema__xml);
  }
  return this.mx_rpc_xml_Schema__schemaConstants;
};


mx.rpc.xml.Schema.prototype.get__schemaDatatypes = function() {
  if (this.mx_rpc_xml_Schema__schemaDatatypes == null) {
    this.mx_rpc_xml_Schema__schemaDatatypes = mx.rpc.xml.SchemaDatatypes.getConstants(this.schemaConstants.xsdURI);
  }
  return this.mx_rpc_xml_Schema__schemaDatatypes;
};


mx.rpc.xml.Schema.prototype.get__xml = function() {
  return this.mx_rpc_xml_Schema__xml;
};


mx.rpc.xml.Schema.prototype.set__xml = function(value) {
  this.mx_rpc_xml_Schema__xml = value;
  if (this.mx_rpc_xml_Schema__xml != null) {
    var /** @type {string} */ tns = this.mx_rpc_xml_Schema__xml.attribute('targetNamespace').toString();
    this.mx_rpc_xml_Schema__targetNamespace = new Namespace(tns);
    this.attributeFormDefault = this.mx_rpc_xml_Schema__xml.attribute('attributeFormDefault').toString();
    if (this.attributeFormDefault == "")
      this.attributeFormDefault = "unqualified";
    this.blockDefault = this.mx_rpc_xml_Schema__xml.attribute('blockDefault').toString();
    this.elementFormDefault = this.mx_rpc_xml_Schema__xml.attribute('elementFormDefault').toString();
    if (this.elementFormDefault == "")
      this.elementFormDefault = "unqualified";
    this.finalDefault = this.mx_rpc_xml_Schema__xml.attribute('finalDefault').toString();
    this.namespaces = {};
    var /** @type {Array} */ nsArray = this.mx_rpc_xml_Schema__xml.inScopeNamespaces();
    var foreachiter0_target = nsArray;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var ns = foreachiter0_target[foreachiter0];
    {
      this.namespaces[ns.prefix] = ns;
    }}
    
    this.mx_rpc_xml_Schema__schemaConstants = mx.rpc.xml.SchemaConstants.getConstants(this.mx_rpc_xml_Schema__xml);
    this.mx_rpc_xml_Schema__schemaDatatypes = mx.rpc.xml.SchemaDatatypes.getConstants(this.mx_rpc_xml_Schema__schemaConstants.xsdURI);
  } else {
    this.mx_rpc_xml_Schema__schemaConstants = null;
    this.mx_rpc_xml_Schema__schemaDatatypes = null;
  }
};


Object.defineProperties(mx.rpc.xml.Schema.prototype, /** @lends {mx.rpc.xml.Schema.prototype} */ {
/**
  * @export
  * @type {Object} */
namespaces: {
get: mx.rpc.xml.Schema.prototype.get__namespaces,
set: mx.rpc.xml.Schema.prototype.set__namespaces},
/**
  * @export
  * @type {Namespace} */
targetNamespace: {
get: mx.rpc.xml.Schema.prototype.get__targetNamespace,
set: mx.rpc.xml.Schema.prototype.set__targetNamespace},
/**
  * @export
  * @type {mx.rpc.xml.SchemaConstants} */
schemaConstants: {
get: mx.rpc.xml.Schema.prototype.get__schemaConstants},
/**
  * @export
  * @type {mx.rpc.xml.SchemaDatatypes} */
schemaDatatypes: {
get: mx.rpc.xml.Schema.prototype.get__schemaDatatypes},
/**
  * @export
  * @type {XML} */
xml: {
get: mx.rpc.xml.Schema.prototype.get__xml,
set: mx.rpc.xml.Schema.prototype.set__xml}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.xml.Schema.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Schema', qName: 'mx.rpc.xml.Schema', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.xml.Schema.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'attributeFormDefault': { type: 'String', get_set: function (/** mx.rpc.xml.Schema */ inst, /** * */ v) {return v !== undefined ? inst.attributeFormDefault = v : inst.attributeFormDefault;}},
        'blockDefault': { type: 'String', get_set: function (/** mx.rpc.xml.Schema */ inst, /** * */ v) {return v !== undefined ? inst.blockDefault = v : inst.blockDefault;}},
        'elementFormDefault': { type: 'String', get_set: function (/** mx.rpc.xml.Schema */ inst, /** * */ v) {return v !== undefined ? inst.elementFormDefault = v : inst.elementFormDefault;}},
        'finalDefault': { type: 'String', get_set: function (/** mx.rpc.xml.Schema */ inst, /** * */ v) {return v !== undefined ? inst.finalDefault = v : inst.finalDefault;}}
      };
    },
    accessors: function () {
      return {
        'namespaces': { type: 'Object', access: 'readwrite', declaredBy: 'mx.rpc.xml.Schema'},
        'targetNamespace': { type: 'Namespace', access: 'readwrite', declaredBy: 'mx.rpc.xml.Schema'},
        'schemaConstants': { type: 'mx.rpc.xml.SchemaConstants', access: 'readonly', declaredBy: 'mx.rpc.xml.Schema'},
        'schemaDatatypes': { type: 'mx.rpc.xml.SchemaDatatypes', access: 'readonly', declaredBy: 'mx.rpc.xml.Schema'},
        'xml': { type: 'XML', access: 'readwrite', declaredBy: 'mx.rpc.xml.Schema'}
      };
    },
    methods: function () {
      return {
        'Schema': { type: '', declaredBy: 'mx.rpc.xml.Schema', parameters: function () { return [ 'XML', true ]; }},
        'addImport': { type: 'void', declaredBy: 'mx.rpc.xml.Schema', parameters: function () { return [ 'Namespace', false ,'mx.rpc.xml.Schema', false ]; }},
        'addInclude': { type: 'void', declaredBy: 'mx.rpc.xml.Schema', parameters: function () { return [ 'XMLList', false ]; }},
        'getNamedDefinition': { type: 'Object', declaredBy: 'mx.rpc.xml.Schema', parameters: function () { return [ 'QName', false ,'Array', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.xml.Schema.prototype.ROYALE_COMPILE_FLAGS = 26;
