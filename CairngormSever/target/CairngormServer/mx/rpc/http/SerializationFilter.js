/**
 * Generated by Apache Royale Compiler from mx/rpc/http/SerializationFilter.as
 * mx.rpc.http.SerializationFilter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.http.SerializationFilter');
/* Royale Dependency List: mx.core.mx_internal,mx.messaging.errors.ArgumentError,mx.rpc.http.AbstractOperation,XML*/




/**
 * @constructor
 */
mx.rpc.http.SerializationFilter = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.http.SerializationFilter', mx.rpc.http.SerializationFilter);


/**
 * @type {Object}
 */
mx.rpc.http.SerializationFilter.http_$$www_adobe_com$2006$flex$mx$internal__filterForResultFormatTable = {};


/**
 * This static function is used to register a new SerializationFilter for a 
 * particular resultFormat value.  If you call this method once at startup,
 * you can then just specify the resultFormat property of an HTTPService or HTTPMultiService
 * to use that serialization filter to make it easier for developers to specify a
 * format.
 *
 * @asparam resultFormat A custom resultFormat name to be associated with the supplied
 * SerializationFilter.  
 * @asparam filter The SerializationFilter to register.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} resultFormat
 * @param {mx.rpc.http.SerializationFilter} filter
 * @return {mx.rpc.http.SerializationFilter}
 */
mx.rpc.http.SerializationFilter.registerFilterForResultFormat = function(resultFormat, filter) {
  var /** @type {mx.rpc.http.SerializationFilter} */ old = mx.rpc.http.SerializationFilter.http_$$www_adobe_com$2006$flex$mx$internal__filterForResultFormatTable[resultFormat];
  mx.rpc.http.SerializationFilter.http_$$www_adobe_com$2006$flex$mx$internal__filterForResultFormatTable[resultFormat] = filter;
  return old;
};


/**
 * This method takes the result from the HTTP request in a raw format.  It 
 * can convert it to a more fully typed ActionScript object if desired.  
 * To make the SerializationFilter more general, you can use the resultType or 
 * resultElementType properties of the AbstractOperation provided so your code can 
 * dynamically map the incoming request to the type configured in ActionScript as
 * the return type.
 * <p>
 * Note also that AbstractOperation has a "properties" map which you
 * can use to store additional properties as part of the service invocation
 * in ActionScript to handle the deserialization of a particular type.
 * </p>
 * 
 * @asparam operation The AbstractOperation which is being invoked.  
 * @asparam result the raw result as returned from the server.  
 * @asreturn the converted result which will then be supplied in the result event
 * for the service.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.http.AbstractOperation} operation
 * @param {Object} result
 * @return {Object}
 */
mx.rpc.http.SerializationFilter.prototype.deserializeResult = function(operation, result) {
  return result;
};


/**
 * This method is called by the HTTP service just before a call is made.  Its role
 * is to choose the contentType used for this request.  For many serialization
 * formats, there is a single fixed content type so you might just return that content
 * type here.  Since the HTTPService is itself configured with a content type, that
 * value is passed in here and returned by the default implementation.  The request
 * body being serialized is also provided with the obj parameter just in case the 
 * content type depends on the type of object being sent to the server.
 *
 * @asparam operation The AbstractionOperation being invoked.
 * @asparam obj the body of the HTTP request being serialized
 * @asparam contentType the contentType configured for the operation
 * @asreturn the content type to use for this HTTP request.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.http.AbstractOperation} operation
 * @param {Object} obj
 * @param {string} contentType
 * @return {string}
 */
mx.rpc.http.SerializationFilter.prototype.getRequestContentType = function(operation, obj, contentType) {
  return contentType;
};


/**
 * This method is called from the "send" method of the HTTP service invocation to convert the
 * parameters into a request body.  The parameters of the original send call are put into the
 * params array.  This method converts this set of parameters into to a single object which is used as the 
 * data for the HTTP request body.  The default implementation produces an object where the 
 * keys are the values in the Operation's argumentNames array and the values are the values of the parameters.
 * When using the default implementation, you must set argumentNames to have the same number
 * of elements as the parameters array.
 * 
 * <p>Note that this method is not used if you invoke the HTTP operation using the sendBody
 * method which just takes a single object.  In that case, this step is skipped and only
 * the serializeBody method is called.</p>
 *
 * @asparam operation The AbstractOperation being invoked.
 * @asparam params the list of parameters passed to the send method
 * @asreturn the body to be used in the HTTP request
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.http.AbstractOperation} operation
 * @param {Array} params
 * @return {Object}
 */
mx.rpc.http.SerializationFilter.prototype.serializeParameters = function(operation, params) {
  var /** @type {Array} */ argNames = operation.argumentNames;
  if (params == null || params.length == 0)
    return params;
  if (argNames == null || params.length != argNames.length)
    throw new mx.messaging.errors.ArgumentError("HTTPMultiService operation called with " + (argNames == null ? 0 : argNames.length) + " argumentNames and " + params.length + " number of parameters.  When argumentNames is specified, it must match the number of arguments passed to the invocation");
  var /** @type {Object} */ obj = new Object();
  for (var /** @type {number} */ i = 0; i < argNames.length; i++)
    obj[argNames[i]] = params[i];
  return obj;
};


/**
 * This method is called for all invocations of the HTTP service.  It is able to convert
 * the supplied object into a form suitable for placing directly in the HTTP's request
 * body.  The default implementation just returns the object passed in as the body without
 * any conversion.
 *
 * @asparam operation The AbstractOperation being invoked
 * @asparam obj the initial body of the HTTP request, either the return value of serializeParameters or the parameter to the sendBody method
 * or the send method of HTTPService.
 * @asreturn the potentially converted body to use in the request.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.http.AbstractOperation} operation
 * @param {Object} obj
 * @return {Object}
 */
mx.rpc.http.SerializationFilter.prototype.serializeBody = function(operation, obj) {
  return obj;
};


/**
 * This method is used if you need to take data from the request body object and encode
 * it into the URL string.  It is given the incoming URL as configured on the operation
 * or service.  This implementation just returns the incoming URL without any conversion.
 *
 * @asparam operation The AbstractOperation being invoked
 * @asparam url the URL set on the service or operation
 * @asreturn the potentially modified URL to use for this request.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.http.AbstractOperation} operation
 * @param {Object} obj
 * @param {string} url
 * @return {string}
 */
mx.rpc.http.SerializationFilter.prototype.serializeURL = function(operation, obj, url) {
  return url;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.http.SerializationFilter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SerializationFilter', qName: 'mx.rpc.http.SerializationFilter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.http.SerializationFilter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|http://www.adobe.com/2006/flex/mx/internal::filterForResultFormatTable': { type: 'Object', get_set: function (/** * */ v) {return v !== undefined ? mx.rpc.http.SerializationFilter.http_$$www_adobe_com$2006$flex$mx$internal__filterForResultFormatTable = v : mx.rpc.http.SerializationFilter.http_$$www_adobe_com$2006$flex$mx$internal__filterForResultFormatTable;}}
      };
    },
    methods: function () {
      return {
        '|registerFilterForResultFormat': { type: 'mx.rpc.http.SerializationFilter', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'String', false ,'mx.rpc.http.SerializationFilter', false ]; }},
        'deserializeResult': { type: 'Object', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'mx.rpc.http.AbstractOperation', false ,'Object', false ]; }},
        'getRequestContentType': { type: 'String', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'mx.rpc.http.AbstractOperation', false ,'Object', false ,'String', false ]; }},
        'serializeParameters': { type: 'Object', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'mx.rpc.http.AbstractOperation', false ,'Array', false ]; }},
        'serializeBody': { type: 'Object', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'mx.rpc.http.AbstractOperation', false ,'Object', false ]; }},
        'serializeURL': { type: 'String', declaredBy: 'mx.rpc.http.SerializationFilter', parameters: function () { return [ 'mx.rpc.http.AbstractOperation', false ,'Object', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.http.SerializationFilter.prototype.ROYALE_COMPILE_FLAGS = 26;
