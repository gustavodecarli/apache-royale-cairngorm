/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/types/RowSetType.as
 * mx.rpc.soap.types.RowSetType
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.types.RowSetType');
/* Royale Dependency List: QName,XML,XMLList,mx.rpc.soap.SOAPDecoder,mx.rpc.soap.SOAPEncoder,mx.rpc.xml.ContentProxy,mx.utils.object_proxy,org.apache.royale.utils.Language*/

goog.require('mx.rpc.soap.types.ICustomSOAPType');



/**
 * @constructor
 * @implements {mx.rpc.soap.types.ICustomSOAPType}
 */
mx.rpc.soap.types.RowSetType = function() {
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.types.RowSetType', mx.rpc.soap.types.RowSetType);


/**
 * @export
 * @param {mx.rpc.soap.SOAPEncoder} encoder
 * @param {XML} parent
 * @param {QName} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.RowSetType.prototype.encode = function(encoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  throw new Error("Unsupported operation - RowSet cannot be sent to a server.");
};


/**
 * @export
 * @param {mx.rpc.soap.SOAPDecoder} decoder
 * @param {*} parent
 * @param {*} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.RowSetType.prototype.decode = function(decoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {number} */ i = 0;
  if (org.apache.royale.utils.Language.is(parent, mx.rpc.xml.ContentProxy))
    parent[new QName(mx.utils.object_proxy, 'isSimple').objectAccessFormat()] = false;
  var /** @type {XML} */ rowSetNode = org.apache.royale.utils.Language.as(value, XML);
  var /** @type {Array} */ returnVal = [];
  var /** @type {Array} */ types = [];
  var /** @type {Array} */ fields = [];
  var /** @type {XMLList} */ fieldNodes = rowSetNode.elements()[0].elements();
  //var /** @type {number} */ i = 0;
  var foreachiter0_target = fieldNodes;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var field = foreachiter0_target[foreachiter0];
  {
    var /** @type {string} */ typeAttr = field.attribute("type").toString();
    var /** @type {QName} */ typeQName;
    if (typeAttr != null && typeAttr != "")
      typeQName = decoder.schemaManager.getQNameForPrefixedName(typeAttr, field);
    if (typeQName == null)
      typeQName = decoder.schemaManager.schemaDatatypes.stringQName;
    types[i] = typeQName;
    fields[i] = field.text().toString();
    i++;
  }}
  
  var /** @type {XMLList} */ items = rowSetNode.elements()[1].elements();
  i = 0;
  var foreachiter1_target = items;
  for (var foreachiter1 in foreachiter1_target.elementNames()) 
  {
  var item = foreachiter1_target[foreachiter1];
  {
    var /** @type {XMLList} */ columns = item.elements();
    var /** @type {*} */ row = decoder.createContent();
    var /** @type {number} */ j = 0;
    var foreachiter2_target = columns;
    for (var foreachiter2 in foreachiter2_target.elementNames()) 
    {
    var column = foreachiter2_target[foreachiter2];
    {
      row[fields[j]] = decoder.decode(column, null, org.apache.royale.utils.Language.as(types[j], QName));
      j++;
    }}
    
    returnVal[i] = row;
    i++;
  }}
  
  decoder.setValue(parent, name, returnVal);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.types.RowSetType.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RowSetType', qName: 'mx.rpc.soap.types.RowSetType', kind: 'class' }], interfaces: [mx.rpc.soap.types.ICustomSOAPType] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.types.RowSetType.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'RowSetType': { type: '', declaredBy: 'mx.rpc.soap.types.RowSetType'},
        'encode': { type: 'void', declaredBy: 'mx.rpc.soap.types.RowSetType', parameters: function () { return [ 'mx.rpc.soap.SOAPEncoder', false ,'XML', false ,'QName', false ,'*', false ,'XML', true ]; }},
        'decode': { type: 'void', declaredBy: 'mx.rpc.soap.types.RowSetType', parameters: function () { return [ 'mx.rpc.soap.SOAPDecoder', false ,'*', false ,'*', false ,'*', false ,'XML', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.types.RowSetType.prototype.ROYALE_COMPILE_FLAGS = 26;
