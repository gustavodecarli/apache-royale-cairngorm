/**
 * Generated by Apache Royale Compiler from mx/rpc/soap/types/QueryBeanType.as
 * mx.rpc.soap.types.QueryBeanType
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.soap.types.QueryBeanType');
/* Royale Dependency List: QName,XML,XMLList,mx.rpc.soap.SOAPDecoder,mx.rpc.soap.SOAPEncoder,mx.rpc.soap.types.SOAPArrayType,mx.rpc.xml.TypeIterator,mx.rpc.xml.XMLDecoder,mx.utils.ObjectProxy,mx.utils.object_proxy,org.apache.royale.utils.Language*/

goog.require('mx.rpc.soap.types.ICustomSOAPType');



/**
 * @constructor
 * @implements {mx.rpc.soap.types.ICustomSOAPType}
 */
mx.rpc.soap.types.QueryBeanType = function() {
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.soap.types.QueryBeanType', mx.rpc.soap.types.QueryBeanType);


/**
 * @export
 * @param {mx.rpc.soap.SOAPEncoder} encoder
 * @param {XML} parent
 * @param {QName} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.QueryBeanType.prototype.encode = function(encoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  throw new Error("Unsupported operation - Query Beans cannot be sent to ColdFusion.");
};


/**
 * @export
 * @param {mx.rpc.soap.SOAPDecoder} decoder
 * @param {*} parent
 * @param {*} name
 * @param {*} value
 * @param {XML=} restriction
 */
mx.rpc.soap.types.QueryBeanType.prototype.decode = function(decoder, parent, name, value, restriction) {
  restriction = typeof restriction !== 'undefined' ? restriction : null;
  var /** @type {XML} */ beanXML = org.apache.royale.utils.Language.as(value, XML);
  var /** @type {*} */ returnVal;
  if (decoder.makeObjectsBindable)
    returnVal = new mx.rpc.xml.XMLDecoder.listClass();
  else
    returnVal = [];
  var /** @type {XML} */ colXML = beanXML.child('columnList')[0];
  if (colXML == null)
    return;
  var /** @type {XMLList} */ columnsXMLList = colXML.elements();
  var /** @type {Array} */ columnNames = [];
  var foreachiter0_target = columnsXMLList;
  for (var foreachiter0 in foreachiter0_target.elementNames()) 
  {
  var columnName = foreachiter0_target[foreachiter0];
  {
    columnNames.push(columnName.toString());
  }}
  
  var /** @type {XML} */ dataXML = beanXML.child('data')[0];
  if (dataXML == null)
    return;
  var /** @type {mx.rpc.soap.types.SOAPArrayType} */ soapArrayType = new mx.rpc.soap.types.SOAPArrayType();
  var /** @type {Array} */ tempParent = [];
  soapArrayType.decode(decoder, tempParent, name, dataXML, restriction);
  var /** @type {mx.rpc.xml.TypeIterator} */ iterator = new mx.rpc.xml.TypeIterator(tempParent);
  while (iterator.hasNext()) {
    var /** @type {*} */ item = iterator.next();
    var /** @type {*} */ resultItem;
    if (decoder.makeObjectsBindable)
      resultItem = new mx.utils.ObjectProxy();
    else
      resultItem = {};
    for (var /** @type {number} */ i = 0; i < columnNames.length; i++) {
      resultItem[columnNames[i]] = item[i];
    }
    mx.rpc.xml.TypeIterator.push(returnVal, resultItem);
  }
  decoder.setValue(parent, name, returnVal);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.soap.types.QueryBeanType.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'QueryBeanType', qName: 'mx.rpc.soap.types.QueryBeanType', kind: 'class' }], interfaces: [mx.rpc.soap.types.ICustomSOAPType] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.soap.types.QueryBeanType.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'QueryBeanType': { type: '', declaredBy: 'mx.rpc.soap.types.QueryBeanType'},
        'encode': { type: 'void', declaredBy: 'mx.rpc.soap.types.QueryBeanType', parameters: function () { return [ 'mx.rpc.soap.SOAPEncoder', false ,'XML', false ,'QName', false ,'*', false ,'XML', true ]; }},
        'decode': { type: 'void', declaredBy: 'mx.rpc.soap.types.QueryBeanType', parameters: function () { return [ 'mx.rpc.soap.SOAPDecoder', false ,'*', false ,'*', false ,'*', false ,'XML', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.soap.types.QueryBeanType.prototype.ROYALE_COMPILE_FLAGS = 26;
