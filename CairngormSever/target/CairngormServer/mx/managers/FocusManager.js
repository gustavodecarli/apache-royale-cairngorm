/**
 * Generated by Apache Royale Compiler from mx/managers/FocusManager.as
 * mx.managers.FocusManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.managers.FocusManager');
/* Royale Dependency List: mx.core.UIComponent,mx.core.mx_internal,mx.managers.IFocusManagerComponent,mx.managers.IFocusManagerContainer,org.apache.royale.events.MouseEvent,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('mx.managers.IFocusManager');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {mx.managers.IFocusManager}
 * @param {mx.managers.IFocusManagerContainer} container
 * @param {boolean=} popup
 */
mx.managers.FocusManager = function(container, popup) {
  popup = typeof popup !== 'undefined' ? popup : false;
  mx.managers.FocusManager.base(this, 'constructor');
  this.mx_managers_FocusManager_form = container;
  this.mx_managers_FocusManager_form.addEventListener(org.apache.royale.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.mx_managers_FocusManager_mouseDownCaptureHandler, this, 'mouseDownCaptureHandler'), true);
};
goog.inherits(mx.managers.FocusManager, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.managers.FocusManager', mx.managers.FocusManager);


/**
 * @private
 * @type {mx.managers.IFocusManagerContainer}
 */
mx.managers.FocusManager.prototype.mx_managers_FocusManager_form;


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} event
 */
mx.managers.FocusManager.prototype.mx_managers_FocusManager_mouseDownCaptureHandler = function(event) {
  var /** @type {Object} */ target = event.target;
  if (org.apache.royale.utils.Language.is(target, mx.core.UIComponent))
    target["element"].focus();
};


/**
 * @export
 * @param {boolean=} backward
 * @return {mx.managers.IFocusManagerComponent}
 */
mx.managers.FocusManager.prototype.getNextFocusManagerComponent = function(backward) {
  backward = typeof backward !== 'undefined' ? backward : false;
  return null;
};


/**
 * @private
 * @type {mx.managers.IFocusManagerComponent}
 */
mx.managers.FocusManager.prototype.mx_managers_FocusManager__getFocus;


/**
 * @export
 * @return {mx.managers.IFocusManagerComponent}
 */
mx.managers.FocusManager.prototype.getFocus = function() {
  return this.mx_managers_FocusManager__getFocus;
};


/**
 * @export
 * @param {mx.managers.IFocusManagerComponent} o
 */
mx.managers.FocusManager.prototype.setFocus = function(o) {
  o.setFocus();
  if (this.hasEventListener("setFocus"))
    this.dispatchEvent(new Event("setFocus"));
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.managers.FocusManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'FocusManager', qName: 'mx.managers.FocusManager', kind: 'class' }], interfaces: [mx.managers.IFocusManager] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.managers.FocusManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'FocusManager': { type: '', declaredBy: 'mx.managers.FocusManager', parameters: function () { return [ 'mx.managers.IFocusManagerContainer', false ,'Boolean', true ]; }},
        'getNextFocusManagerComponent': { type: 'mx.managers.IFocusManagerComponent', declaredBy: 'mx.managers.FocusManager', parameters: function () { return [ 'Boolean', true ]; }},
        'getFocus': { type: 'mx.managers.IFocusManagerComponent', declaredBy: 'mx.managers.FocusManager'},
        'setFocus': { type: 'void', declaredBy: 'mx.managers.FocusManager', parameters: function () { return [ 'mx.managers.IFocusManagerComponent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.managers.FocusManager.prototype.ROYALE_COMPILE_FLAGS = 26;
